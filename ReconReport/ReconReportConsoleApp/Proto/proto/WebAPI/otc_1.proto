// OTC messages
// Times are in google.protobuf.Timestamp since Unix Epoch on January 1st, 1970
// Each change in this protocol increases webapi_1.proto version.
syntax = "proto2";
package otc_1;

import "common/shared_1.proto";
import "common/timestamp.proto";
import "common/decimal.proto";

////------------------------------------------
//// Client to OTC/WebAPI messages

// Client messages.
message OtcRequest
{
  // Request identifier.
  optional string request_id = 1;

  // OTC instances subscription.
  optional OtcInstancesSubscription otc_instances_subscription = 2;

  // Hedge books subscription.
  optional HedgeBooksSubscription hedge_books_subscription = 3;

  // Hedge book details subscription.
  optional HedgeBookDetailsSubscription hedge_book_details_subscription = 4;

  // Offset hedge balance request.
  optional OffsetHedgeBalanceRequest offset_hedge_balance_request = 5;

  // Change OTC state request.
  optional ChangeOtcStateRequest change_otc_state_request = 6;
}

// OTC/WebAPI responses.
message OtcReport
{
  enum StatusCode
  {
    /// success codes (0 - 100)
    SUCCESS = 0;

    // Request is processed and subscription is established.
    SUBSCRIBED = 1;

    // Subscription is dropped by a client request.
    DROPPED = 2;

    // Unsolicited information update because of subscription.
    UPDATE = 3;

    // Currently subscription is disconnected because of communication issues.
    // NOTE: Clients should not resubscribe in this case, the server will restore subscription with
    // sending SUBSCRIBED status once communication issues are resolved.
    DISCONNECTED = 4;

    //// failure codes (100+)
    // General failure.
    FAILURE = 101;

    // Subscription parameters are invalid.
    INVALID_PARAMS = 102;

    // The user is not allowed to be subscribed to this OTC instance.
    ACCESS_DENIED = 103;

    // The subscription count limit has been violated.
    SUBSCRIPTION_LIMIT_VIOLATION = 104;

    // The subscription rate limit has been violated.
    SUBSCRIPTION_RATE_LIMIT_VIOLATION = 105;
  }

  // ID of a corresponding request or subscription.
  optional string request_id = 1;

  // Operation status.
  // This field is associated with ResultCode enum.
  optional uint32 result_code = 2;

  // Operation details.
  optional shared_1.Text details = 3;

  // OTC instances report.
  optional OtcInstancesReport otc_instances_report = 4;

  // Hedge books report.
  optional HedgeBooksReport hedge_books_report = 5;

  // Hedge book details report.
  optional HedgeBookDetailsReport hedge_book_details_report = 6;

  // Offset hedge balance result.
  optional OffsetHedgeBalanceResult offset_hedge_balance_result = 7;

  // Change OTC state result.
  optional ChangeOtcStateResult change_otc_state_result = 8;
}

////------------------------------------------
//// Entities

enum InstanceState
{
  // Instance is online and processes orders.
  ONLINE = 0;

  // Instance is offline. Used only in status response. OTC may not be put offline by client request.
  OFFLINE = 1;

  // Instance is suspended by ChangeOtcStateRequest.
  SUSPENDED = 2;
}

// Hedge balance key.
message HedgeBalanceKey
{
  // Hedge Account ID in CQG trade routing system.
  optional sint32 account_id = 1;

  // Server side contract id.
  optional uint32 contract_id = 2;

  // Reserved for internal use.
  extensions 100 to 199;
}

// OTC instances subscription.
message OtcInstancesSubscription
{
  // If set to true - subscribe to changes, if false - drop subscription.
  optional bool subscribe = 1 [default = true];
}

// OTC instances report.
message OtcInstancesReport
{
  repeated OtcInstanceState otc_instance_state = 1;
}

// OTC instance state.
message OtcInstanceState
{
  // OTC instance ID.
  optional uint32 instance_id = 1;

  // OTC instance name.
  optional string name = 2;

  // OTC instance state.
  // This field is associated with InstanceState enum type.
  optional uint32 state = 3;
}

// Hedge books subscription.
message HedgeBooksSubscription
{
  // If set to true - subscribe to changes, if false - drop subscription.
  optional bool subscribe = 1 [default = true];

  // OTC instance id.
  optional uint32 otc_instance_id = 2;
}

// Hedge books report.
message HedgeBooksReport
{
  // True if this is a snapshot (all previously known data about this hedge book should be cleaned).
  // All updates will be postponed until full snapshot is sent.
  // False used for incremental updates.
  // Snapshot will be sent only once after subscription. May be sent in multiple parts. Each part will have this field
  // set to true. False by default.
  optional bool is_snapshot = 1;

  // If true - then this message mean last part of multi-parted snapshot.
  optional bool is_last_part = 2;

  // Hedge balance details.
  repeated HedgeBalanceDetails hedge_balance_details = 3;
}

message HedgeBalanceDetails
{
  // Hedge balance key.
  optional HedgeBalanceKey hedge_balance_key = 1;

  // Deleted flag is used in updates when entity is removed.
  // Only hedge_balance_key will be provided in this case.
  optional bool deleted = 2;

  // Current hedge balance in units. If missing - hedge balance is not changed since last update.
  optional cqg.Decimal hedge_balance = 3;

  // Pending balance in units. Means non-filled hedge orders size in units.
  // If missing - pending balance is not changed since last update.
  optional cqg.Decimal pending_balance = 4;

  // Full contract symbol.
  optional string contract_symbol = 5;
}

// Hedge book details subscription.
message HedgeBookDetailsSubscription
{
  // If set to true - subscribe to changes, if false - drop subscription.
  optional bool subscribe = 1 [default = true];

  // OTC instance id.
  optional uint32 otc_instance_id = 2;

  // Hedge balance key.
  optional HedgeBalanceKey hedge_balance_key = 3;

  // Start point for the history request, inclusive.
  // Maximum allowed history is returned if omitted.
  optional google.protobuf.Timestamp from_utc_timestamp = 4;
}

// Hedge book details report.
message HedgeBookDetailsReport
{
  // True if this is a snapshot (all previously known data about this hedge book should be cleaned).
  // False used for incremental updates.
  // Snapshot will be sent only once after subscription. May be sent in multiple parts. Each part will have this field
  // set to true. False by default.
  optional bool is_snapshot = 1;

  // If true - then this message mean last part of multi-parted snapshot.
  optional bool is_last_part = 2;

  // List of cash orders.
  repeated CashOrderDetails cash_order_details = 3;

  // List of hedge orders.
  repeated HedgeOrderDetails hedge_order_details = 4;

  // List of links between cash and hedge orders.
  // Only one link between particular cash and hedge orders may exist.
  repeated CashToHedgeOrdersLink cash_to_hedge_orders_link = 5;
}

// Cash order details.
message CashOrderDetails
{
  // Order ID assigned by server to originally placed order.
  optional string chain_order_id = 1;

  // Deleted flag is used in updates when entity is removed.
  // Only chain_order_id will be provided in this case.
  optional bool deleted = 2;

  // Account ID in CQG trade routing system.
  optional sint32 account_id = 3;

  // Server side contract id.
  optional uint32 contract_id = 4;

  // Time when order added to hedge balance.
  optional google.protobuf.Timestamp hedge_utc_timestamp = 5;

  // Total order size in units.
  optional cqg.Decimal units = 6;

  // Reserved for internal use.
  extensions 100 to 199;
}

// Hedge order details.
message HedgeOrderDetails
{
  // Order ID assigned by server to originally placed order.
  optional string chain_order_id = 1;

  // Deleted flag is used in updates when entity is removed.
  // Only chain_order_id will be provided in this case.
  optional bool deleted = 2;

  // Time when hedge order placed.
  optional google.protobuf.Timestamp hedge_utc_timestamp = 3;

  // Total order size in units.
  optional cqg.Decimal units = 4;

  // Quantity open for further execution in units.
  optional cqg.Decimal open_units = 5;
}

// Cash to hedge orders link.
message CashToHedgeOrdersLink
{
  // Deleted flag is used in updates when entity is removed.
  // Only link_id will be provided in this case.
  optional bool deleted = 1;

  // Time when link created.
  optional google.protobuf.Timestamp link_utc_timestamp = 2;

  // Cash order ID.
  optional string cash_order_id = 3;

  // Hedge Order ID.
  optional string hedge_order_id = 4;

  // Hedge size covered by this link in units.
  optional cqg.Decimal link_units = 5;
}

// Offset hedge balance request.
message OffsetHedgeBalanceRequest
{
  // OTC instance id.
  optional uint32 otc_instance_id = 1;

  // Hedge balance key.
  optional HedgeBalanceKey hedge_balance_key = 2;

  // Hedge balance offset.
  optional cqg.Decimal hedge_balance_offset = 3;
}

// Offset hedge balance result.
message OffsetHedgeBalanceResult
{
}

// Change OTC state request.
// Shall provide OTC instance ID.
message ChangeOtcStateRequest
{
  enum Action
  {
    // Activate previously suspended OTC instance.
    ACTIVATE = 0;

    // Suspend active OTC instance.
    // OTC will reject all client orders and will not send hedge orders to exchange.
    SUSPEND = 1;
  }

  // OTC instance id.
  optional uint32 otc_instance_id = 1;

  // New OTC instance state.
  // This field is associated with Action enum type.
  optional uint32 action = 2;
}

// Change OTC state result.
message ChangeOtcStateResult
{
}
