// User attributes messages
syntax = "proto2";
package user_attribute_2;

// User defined attribute.
message UserAttribute
{
  // Attribute name.
  required string name = 1;

  // Attribute value (optional for modification if attribute is deleted).
  optional string value = 2;

  // True if attribute has to be deleted during modify operation.
  optional bool deleted = 3;
}

// Modification of order's user attributes.
message ModifyUserAttributes
{
  // ID of the order chain.
  required string chain_order_id = 1;

  // ID of the order's account.
  required sint32 account_id = 2;

  // List of attributes to modify.
  // See Order.user_attribute for additional description.
  repeated UserAttribute user_attributes = 3;

  // Flag used by the client for marking the user attributes checked/unchecked.
  // Empty means to leave the flag the same as it was.
  optional bool is_checked = 4;
}

// Read stored user attribute by name.
message ReadUserAttributeRequest
{
  // ID of a request and optional subscription that should be unique enough to match responses and updates with corresponding requests.
  required uint32 request_id = 1;

  // List of names of requested attributes or expressions to match.
  // Empty list means requesting of all available user attributes.
  repeated string attribute_names = 2;
}

// Result with requested attributes.
message ReadUserAttributeResult
{
  // Corresponding request ID.
  required uint32 request_id = 1;

  // Result code.
  enum ResultCode
  {
    // success codes
    RESULT_CODE_SUCCESS = 0;

    // failure codes (100+)
    RESULT_CODE_FAILURE = 101;

    // The request rate limit has been violated.
    RESULT_CODE_REQUEST_RATE_LIMIT_VIOLATION = 102;
  }

  // This field is associated with ResultCode enum type.
  required uint32 result_code = 2;

  // List of requested attributes.
  repeated UserAttribute user_attributes = 3;

  // Optional failure details.
  optional string text_message = 4;
}

// Modify or delete user attributes.
message ModifyUserAttributeRequest
{
  // ID of a request that should be unique enough to match responses with corresponding requests.
  required uint32 request_id = 1;

  // List of attributes to modify.
  repeated UserAttribute user_attributes = 2;
}

// User attributes modification result.
message ModifyUserAttributeResult
{
  // Corresponding request ID.
  required uint32 request_id = 1;

  // Result code.
  enum ResultCode
  {
    // success codes
    RESULT_CODE_SUCCESS = 0;

    // failure codes (100+)
    RESULT_CODE_FAILURE = 101;

    // The request rate limit has been violated.
    RESULT_CODE_REQUEST_RATE_LIMIT_VIOLATION = 102;

    // The limit of storage space has been violated.
    RESULT_CODE_STORAGE_SPACE_LIMIT_VIOLATION = 103;
  }

  // This field is associated with ResultCode enum type.
  required uint32 result_code = 2;

  // Optional failure details.
  optional string text_message = 3;
}
