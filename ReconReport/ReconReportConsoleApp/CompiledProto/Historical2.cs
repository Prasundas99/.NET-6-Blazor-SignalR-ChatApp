// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WebAPI/historical_2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Historical2 {

  /// <summary>Holder for reflection information generated from WebAPI/historical_2.proto</summary>
  public static partial class Historical2Reflection {

    #region Descriptor
    /// <summary>File descriptor for WebAPI/historical_2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Historical2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlXZWJBUEkvaGlzdG9yaWNhbF8yLnByb3RvEgxoaXN0b3JpY2FsXzIaFWNv",
            "bW1vbi9zaGFyZWRfMS5wcm90bxoaV2ViQVBJL21hcmtldF9kYXRhXzIucHJv",
            "dG8ioQEKFlRpbWVBbmRTYWxlc1BhcmFtZXRlcnMSEwoLY29udHJhY3RfaWQY",
            "ASACKA0SDQoFbGV2ZWwYAiACKA0SFQoNZnJvbV91dGNfdGltZRgDIAIoEhIT",
            "Cgt0b191dGNfdGltZRgEIAEoEiI3CgVMZXZlbBIQCgxMRVZFTF9UUkFERVMQ",
            "ARIcChhMRVZFTF9UUkFERVNfQkJBX1ZPTFVNRVMQAyLEAQoTVGltZUFuZFNh",
            "bGVzUmVxdWVzdBISCgpyZXF1ZXN0X2lkGAEgAigNEkcKGXRpbWVfYW5kX3Nh",
            "bGVzX3BhcmFtZXRlcnMYAiABKAsyJC5oaXN0b3JpY2FsXzIuVGltZUFuZFNh",
            "bGVzUGFyYW1ldGVycxIUCgxyZXF1ZXN0X3R5cGUYAyABKA0iOgoLUmVxdWVz",
            "dFR5cGUSFAoQUkVRVUVTVF9UWVBFX0dFVBABEhUKEVJFUVVFU1RfVFlQRV9E",
            "Uk9QEAMinQQKElRpbWVBbmRTYWxlc1JlcG9ydBISCgpyZXF1ZXN0X2lkGAEg",
            "AigNEhMKC3Jlc3VsdF9jb2RlGAIgAigNEiQKBnF1b3RlcxgDIAMoCzIULm1h",
            "cmtldF9kYXRhXzIuUXVvdGUSFgoOdXBfdG9fdXRjX3RpbWUYBCABKAMSIAoS",
            "aXNfcmVwb3J0X2NvbXBsZXRlGAUgASgIOgR0cnVlEhQKDHRleHRfbWVzc2Fn",
            "ZRgGIAEoCRIRCgl0cnVuY2F0ZWQYByABKAgi1AIKClJlc3VsdENvZGUSFwoT",
            "UkVTVUxUX0NPREVfU1VDQ0VTUxAAEhcKE1JFU1VMVF9DT0RFX0RST1BQRUQQ",
            "AhIcChhSRVNVTFRfQ09ERV9ESVNDT05ORUNURUQQBBIXChNSRVNVTFRfQ09E",
            "RV9GQUlMVVJFEGUSHQoZUkVTVUxUX0NPREVfQUNDRVNTX0RFTklFRBBnEhkK",
            "FVJFU1VMVF9DT0RFX05PVF9GT1VORBBoEiUKIVJFU1VMVF9DT0RFX09VVFNJ",
            "REVfQUxMT1dFRF9SQU5HRRBpEi8KK1JFU1VMVF9DT0RFX0FDVElWRV9SRVFV",
            "RVNUU19MSU1JVF9WSU9MQVRJT04QahIsCihSRVNVTFRfQ09ERV9SRVFVRVNU",
            "X1JBVEVfTElNSVRfVklPTEFUSU9OEGsSHQoZUkVTVUxUX0NPREVfTk9UX1NV",
            "UFBPUlRFRBBuIp4BChZDb250aW51YXRpb25QYXJhbWV0ZXJzEhkKEWNvbnRp",
            "bnVhdGlvbl90eXBlGAEgAigNEhcKCGVxdWFsaXplGAIgASgIOgVmYWxzZSJQ",
            "ChBDb250aW51YXRpb25UeXBlEhwKGENPTlRJTlVBVElPTl9UWVBFX0FDVElW",
            "RRABEh4KGkNPTlRJTlVBVElPTl9UWVBFX1NUQU5EQVJEEAIinAMKEVRpbWVC",
            "YXJQYXJhbWV0ZXJzEhMKC2NvbnRyYWN0X2lkGAEgAigNEhAKCGJhcl91bml0",
            "GAIgAigNEhMKC3VuaXRfbnVtYmVyGAMgASgNEhUKDWZyb21fdXRjX3RpbWUY",
            "BCACKBISEwoLdG9fdXRjX3RpbWUYBSABKBISFwoPdXNlX3NldHRsZW1lbnRz",
            "GAYgASgIEkUKF2NvbnRpbnVhdGlvbl9wYXJhbWV0ZXJzGAcgASgLMiQuaGlz",
            "dG9yaWNhbF8yLkNvbnRpbnVhdGlvblBhcmFtZXRlcnMSEgoKdGlja190eXBl",
            "cxgIIAMoDSKqAQoHQmFyVW5pdBIRCg1CQVJfVU5JVF9ZRUFSEAESGAoUQkFS",
            "X1VOSVRfU0VNSV9BTk5VQUwQAhIUChBCQVJfVU5JVF9RVUFSVEVSEAMSEgoO",
            "QkFSX1VOSVRfTU9OVEgQBBIRCg1CQVJfVU5JVF9XRUVLEAUSEAoMQkFSX1VO",
            "SVRfREFZEAYSEQoNQkFSX1VOSVRfSE9VUhAHEhAKDEJBUl9VTklUX01JThAI",
            "ItABCg5UaW1lQmFyUmVxdWVzdBISCgpyZXF1ZXN0X2lkGAEgAigNEjwKE3Rp",
            "bWVfYmFyX3BhcmFtZXRlcnMYAiABKAsyHy5oaXN0b3JpY2FsXzIuVGltZUJh",
            "clBhcmFtZXRlcnMSFAoMcmVxdWVzdF90eXBlGAMgASgNIlYKC1JlcXVlc3RU",
            "eXBlEhQKEFJFUVVFU1RfVFlQRV9HRVQQARIaChZSRVFVRVNUX1RZUEVfU1VC",
            "U0NSSUJFEAISFQoRUkVRVUVTVF9UWVBFX0RST1AQAyIpChNDb250aW51YXRp",
            "b25TZWdtZW50EhIKCmNxZ19zeW1ib2wYASABKAkiswMKB1RpbWVCYXISFAoM",
            "YmFyX3V0Y190aW1lGAEgAigSEhkKEXNjYWxlZF9vcGVuX3ByaWNlGAIgASgR",
            "EhkKEXNjYWxlZF9oaWdoX3ByaWNlGAMgASgREhgKEHNjYWxlZF9sb3dfcHJp",
            "Y2UYBCABKBESGgoSc2NhbGVkX2Nsb3NlX3ByaWNlGAUgASgREhUKDXNjYWxl",
            "ZF92b2x1bWUYBiABKAQSEgoKdHJhZGVfZGF0ZRgHIAEoEhIfChdzY2FsZWRf",
            "Y29tbW9kaXR5X3ZvbHVtZRgIIAEoBBIcChRzY2FsZWRfb3Blbl9pbnRlcmVz",
            "dBgJIAEoBBImCh5zY2FsZWRfY29tbW9kaXR5X29wZW5faW50ZXJlc3QYCiAB",
            "KAQSHwoXc2NhbGVkX3NldHRsZW1lbnRfcHJpY2UYCyABKBESEwoLdGlja192",
            "b2x1bWUYDCABKAQSHQoVY29tbW9kaXR5X3RpY2tfdm9sdW1lGA0gASgEEj8K",
            "FGNvbnRpbnVhdGlvbl9zZWdtZW50GA4gASgLMiEuaGlzdG9yaWNhbF8yLkNv",
            "bnRpbnVhdGlvblNlZ21lbnQi6gEKDVRpbWVCYXJSZXBvcnQSEgoKcmVxdWVz",
            "dF9pZBgBIAIoDRITCgtzdGF0dXNfY29kZRgCIAIoDRIoCgl0aW1lX2JhcnMY",
            "AyADKAsyFS5oaXN0b3JpY2FsXzIuVGltZUJhchIWCg51cF90b191dGNfdGlt",
            "ZRgEIAEoAxIgChJpc19yZXBvcnRfY29tcGxldGUYBSABKAg6BHRydWUSGAoM",
            "dGV4dF9tZXNzYWdlGAYgASgJQgIYARIRCgl0cnVuY2F0ZWQYByABKAgSHwoH",
            "ZGV0YWlscxgIIAEoCzIOLnNoYXJlZF8xLlRleHQiOgoIQmFyUmFuZ2USEAoI",
            "dXRjX3RpbWUYASABKBISDQoFY291bnQYAiACKA0SDQoFaW5kZXgYAyABKBEi",
            "0QQKEk5vblRpbWVkQmFyUmVxdWVzdBISCgpyZXF1ZXN0X2lkGAEgAigNEhQK",
            "DHJlcXVlc3RfdHlwZRgCIAEoDRJFChdjb250aW51YXRpb25fcGFyYW1ldGVy",
            "cxgDIAEoCzIkLmhpc3RvcmljYWxfMi5Db250aW51YXRpb25QYXJhbWV0ZXJz",
            "EhMKC2NvbnRyYWN0X2lkGAQgASgNEikKCWJhcl9yYW5nZRgFIAEoCzIWLmhp",
            "c3RvcmljYWxfMi5CYXJSYW5nZRISCgp0aWNrX3R5cGVzGAogAygNElEKHmNv",
            "bnN0YW50X3ZvbHVtZV9iYXJfcGFyYW1ldGVycxgGIAEoCzIpLmhpc3Rvcmlj",
            "YWxfMi5Db25zdGFudFZvbHVtZUJhclBhcmFtZXRlcnMSSwobcG9pbnRfYW5k",
            "X2ZpZ3VyZV9wYXJhbWV0ZXJzGAcgASgLMiYuaGlzdG9yaWNhbF8yLlBvaW50",
            "QW5kRmlndXJlUGFyYW1ldGVycxI+ChRyZW5rb19iYXJfcGFyYW1ldGVycxgI",
            "IAEoCzIgLmhpc3RvcmljYWxfMi5SZW5rb0JhclBhcmFtZXRlcnMSPgoUcmFu",
            "Z2VfYmFyX3BhcmFtZXRlcnMYCSABKAsyIC5oaXN0b3JpY2FsXzIuUmFuZ2VC",
            "YXJQYXJhbWV0ZXJzIlYKC1JlcXVlc3RUeXBlEhQKEFJFUVVFU1RfVFlQRV9H",
            "RVQQARIaChZSRVFVRVNUX1RZUEVfU1VCU0NSSUJFEAISFQoRUkVRVUVTVF9U",
            "WVBFX0RST1AQAyJBChJSZW5rb0JhclBhcmFtZXRlcnMSEgoKYnJpY2tfc2l6",
            "ZRgBIAIoDRIXCg9tYXhfbnVsbF9icmlja3MYAiABKA0iPwoSUmFuZ2VCYXJQ",
            "YXJhbWV0ZXJzEhIKCnJhbmdlX3NpemUYASACKA0SFQoNbWF4X251bGxfYmFy",
            "cxgCIAEoDSLFAwoRTm9uVGltZWRCYXJSZXBvcnQSEgoKcmVxdWVzdF9pZBgB",
            "IAIoDRITCgtzdGF0dXNfY29kZRgCIAIoDRIfCgdkZXRhaWxzGAMgASgLMg4u",
            "c2hhcmVkXzEuVGV4dBIhChlpbnZhbGlkYXRlZF9mcm9tX3V0Y190aW1lGAQg",
            "ASgSEh8KF2ludmFsaWRhdGVkX3RvX3V0Y190aW1lGAUgASgSEhYKDnVwX3Rv",
            "X3V0Y190aW1lGAYgASgDEhEKCXRydW5jYXRlZBgHIAEoCBIgChJpc19yZXBv",
            "cnRfY29tcGxldGUYCCABKAg6BHRydWUSPQoUY29uc3RhbnRfdm9sdW1lX2Jh",
            "cnMYCSADKAsyHy5oaXN0b3JpY2FsXzIuQ29uc3RhbnRWb2x1bWVCYXISPgoV",
            "cG9pbnRfYW5kX2ZpZ3VyZV9iYXJzGAogAygLMh8uaGlzdG9yaWNhbF8yLlBv",
            "aW50QW5kRmlndXJlQmFyEioKCnJlbmtvX2JhcnMYCyADKAsyFi5oaXN0b3Jp",
            "Y2FsXzIuUmVua29CYXISKgoKcmFuZ2VfYmFycxgMIAMoCzIWLmhpc3Rvcmlj",
            "YWxfMi5SYW5nZUJhciJkChtDb25zdGFudFZvbHVtZUJhclBhcmFtZXRlcnMS",
            "FAoMdm9sdW1lX2xldmVsGAEgAigNEhcKD3VzZV90aWNrX3ZvbHVtZRgCIAEo",
            "CBIWCg51c2VfZmxhdF90aWNrcxgDIAEoCCI+ChhQb2ludEFuZEZpZ3VyZVBh",
            "cmFtZXRlcnMSEAoIYm94X3NpemUYASACKA0SEAoIcmV2ZXJzYWwYAiACKA0i",
            "pQIKEUNvbnN0YW50Vm9sdW1lQmFyEhQKDGJhcl91dGNfdGltZRgBIAEoEhIN",
            "CgVpbmRleBgCIAEoERISCgp0cmFkZV9kYXRlGAMgASgSEhkKEXNjYWxlZF9v",
            "cGVuX3ByaWNlGAQgASgSEhkKEXNjYWxlZF9oaWdoX3ByaWNlGAUgASgSEhgK",
            "EHNjYWxlZF9sb3dfcHJpY2UYBiABKBISGgoSc2NhbGVkX2Nsb3NlX3ByaWNl",
            "GAcgASgSEhUKDXNjYWxlZF92b2x1bWUYCCABKAQSEwoLdGlja192b2x1bWUY",
            "CSABKAQSPwoUY29udGludWF0aW9uX3NlZ21lbnQYCiABKAsyIS5oaXN0b3Jp",
            "Y2FsXzIuQ29udGludWF0aW9uU2VnbWVudCLyAgoRUG9pbnRBbmRGaWd1cmVC",
            "YXISFAoMYmFyX3V0Y190aW1lGAEgASgSEg0KBWluZGV4GAIgASgREhIKCnRy",
            "YWRlX2RhdGUYAyABKBISHAoUcGZfc2NhbGVkX29wZW5fcHJpY2UYBCABKBIS",
            "HAoUcGZfc2NhbGVkX2hpZ2hfcHJpY2UYBSABKBISGwoTcGZfc2NhbGVkX2xv",
            "d19wcmljZRgGIAEoEhIdChVwZl9zY2FsZWRfY2xvc2VfcHJpY2UYByABKBIS",
            "GQoRc2NhbGVkX2hpZ2hfcHJpY2UYCCABKBISGAoQc2NhbGVkX2xvd19wcmlj",
            "ZRgJIAEoEhIVCg1zY2FsZWRfdm9sdW1lGAogASgEEhMKC3RpY2tfdm9sdW1l",
            "GAsgASgEEgoKAnVwGAwgASgIEj8KFGNvbnRpbnVhdGlvbl9zZWdtZW50GA0g",
            "ASgLMiEuaGlzdG9yaWNhbF8yLkNvbnRpbnVhdGlvblNlZ21lbnQihwMKCFJl",
            "bmtvQmFyEhQKDGJhcl91dGNfdGltZRgBIAEoEhINCgVpbmRleBgCIAEoERIS",
            "Cgp0cmFkZV9kYXRlGAMgASgSEhkKEXNjYWxlZF9vcGVuX3ByaWNlGAQgASgS",
            "EhkKEXNjYWxlZF9oaWdoX3ByaWNlGAUgASgSEhgKEHNjYWxlZF9sb3dfcHJp",
            "Y2UYBiABKBISGgoSc2NhbGVkX2Nsb3NlX3ByaWNlGAcgASgSEh8KF3NjYWxl",
            "ZF9yZW5rb19oaWdoX3ByaWNlGAggASgSEh4KFnNjYWxlZF9yZW5rb19sb3df",
            "cHJpY2UYCSABKBISCgoCdXAYCiABKAgSFQoNc2NhbGVkX3ZvbHVtZRgLIAEo",
            "BBITCgt0aWNrX3ZvbHVtZRgMIAEoBBIcChRmaXJzdF9iYXJfb2Zfc2Vzc2lv",
            "bhgNIAEoCBI/ChRjb250aW51YXRpb25fc2VnbWVudBgOIAEoCzIhLmhpc3Rv",
            "cmljYWxfMi5Db250aW51YXRpb25TZWdtZW50IpwCCghSYW5nZUJhchIUCgxi",
            "YXJfdXRjX3RpbWUYASABKBISDQoFaW5kZXgYAiABKBESEgoKdHJhZGVfZGF0",
            "ZRgDIAEoEhIZChFzY2FsZWRfb3Blbl9wcmljZRgEIAEoEhIZChFzY2FsZWRf",
            "aGlnaF9wcmljZRgFIAEoEhIYChBzY2FsZWRfbG93X3ByaWNlGAYgASgSEhoK",
            "EnNjYWxlZF9jbG9zZV9wcmljZRgHIAEoEhIVCg1zY2FsZWRfdm9sdW1lGAgg",
            "ASgEEhMKC3RpY2tfdm9sdW1lGAkgASgEEj8KFGNvbnRpbnVhdGlvbl9zZWdt",
            "ZW50GAogASgLMiEuaGlzdG9yaWNhbF8yLkNvbnRpbnVhdGlvblNlZ21lbnQi",
            "xgEKFFZvbHVtZVByb2ZpbGVSZXF1ZXN0EhIKCnJlcXVlc3RfaWQYASACKA0S",
            "SAoZdm9sdW1lX3Byb2ZpbGVfcGFyYW1ldGVycxgCIAEoCzIlLmhpc3Rvcmlj",
            "YWxfMi5Wb2x1bWVQcm9maWxlUGFyYW1ldGVycxIUCgxyZXF1ZXN0X3R5cGUY",
            "AyABKA0iOgoLUmVxdWVzdFR5cGUSFAoQUkVRVUVTVF9UWVBFX0dFVBABEhUK",
            "EVJFUVVFU1RfVFlQRV9EUk9QEAMiXAoXVm9sdW1lUHJvZmlsZVBhcmFtZXRl",
            "cnMSEwoLY29udHJhY3RfaWQYASACKA0SFgoOc3RhcnRfdXRjX3RpbWUYAiAB",
            "KBISFAoMZW5kX3V0Y190aW1lGAMgASgSIu8EChNWb2x1bWVQcm9maWxlUmVw",
            "b3J0EhIKCnJlcXVlc3RfaWQYASACKA0SEwoLcmVzdWx0X2NvZGUYAiACKA0S",
            "PQoUdm9sdW1lX3Byb2ZpbGVfaXRlbXMYAyADKAsyHy5oaXN0b3JpY2FsXzIu",
            "Vm9sdW1lUHJvZmlsZUl0ZW0SZAohbGFzdF9xdW90ZXNfY3VtdWxhdGl2ZV9z",
            "dGF0aXN0aWNzGAggASgLMjkuaGlzdG9yaWNhbF8yLlZvbHVtZVByb2ZpbGVM",
            "YXN0UXVvdGVzQ3VtdWxhdGl2ZVN0YXRpc3RpY3MSFgoOdXBfdG9fdXRjX3Rp",
            "bWUYBCABKAMSFAoMdGV4dF9tZXNzYWdlGAUgASgJEhEKCXRydW5jYXRlZBgG",
            "IAEoCBIgChJpc19yZXBvcnRfY29tcGxldGUYByABKAg6BHRydWUipgIKClJl",
            "c3VsdENvZGUSFwoTUkVTVUxUX0NPREVfU1VDQ0VTUxAAEhcKE1JFU1VMVF9D",
            "T0RFX0RST1BQRUQQAhIcChhSRVNVTFRfQ09ERV9ESVNDT05ORUNURUQQBBIX",
            "ChNSRVNVTFRfQ09ERV9GQUlMVVJFEGUSHQoZUkVTVUxUX0NPREVfQUNDRVNT",
            "X0RFTklFRBBnEhkKFVJFU1VMVF9DT0RFX05PVF9GT1VORBBoEiUKIVJFU1VM",
            "VF9DT0RFX09VVFNJREVfQUxMT1dFRF9SQU5HRRBpEi8KK1JFU1VMVF9DT0RF",
            "X0FDVElWRV9SRVFVRVNUU19MSU1JVF9WSU9MQVRJT04QahIdChlSRVNVTFRf",
            "Q09ERV9OT1RfU1VQUE9SVEVEEG4irQEKK1ZvbHVtZVByb2ZpbGVMYXN0UXVv",
            "dGVzQ3VtdWxhdGl2ZVN0YXRpc3RpY3MSHQoVc2NhbGVkX2xhc3RfYXNrX3By",
            "aWNlGAEgASgREh0KFXNjYWxlZF9sYXN0X2JpZF9wcmljZRgCIAEoERIfChdz",
            "Y2FsZWRfYXNrX3RyYWRlX3ZvbHVtZRgDIAEoARIfChdzY2FsZWRfYmlkX3Ry",
            "YWRlX3ZvbHVtZRgEIAEoASJAChFWb2x1bWVQcm9maWxlSXRlbRIUCgxzY2Fs",
            "ZWRfcHJpY2UYASACKBESFQoNc2NhbGVkX3ZvbHVtZRgCIAIoBCqeAQoTQmFy",
            "QnVpbGRpbmdUaWNrVHlwZRIeChpCQVJfQlVJTERJTkdfVElDS19UWVBFX0JJ",
            "RBABEh4KGkJBUl9CVUlMRElOR19USUNLX1RZUEVfQVNLEAISIAocQkFSX0JV",
            "SUxESU5HX1RJQ0tfVFlQRV9UUkFERRADEiUKIUJBUl9CVUlMRElOR19USUNL",
            "X1RZUEVfU0VUVExFTUVOVBAEKqEFChNCYXJSZXBvcnRTdGF0dXNDb2RlEiIK",
            "HkJBUl9SRVBPUlRfU1RBVFVTX0NPREVfU1VDQ0VTUxAAEiUKIUJBUl9SRVBP",
            "UlRfU1RBVFVTX0NPREVfU1VCU0NSSUJFRBABEiIKHkJBUl9SRVBPUlRfU1RB",
            "VFVTX0NPREVfRFJPUFBFRBACEiEKHUJBUl9SRVBPUlRfU1RBVFVTX0NPREVf",
            "VVBEQVRFEAMSJwojQkFSX1JFUE9SVF9TVEFUVVNfQ09ERV9ESVNDT05ORUNU",
            "RUQQBBImCiJCQVJfUkVQT1JUX1NUQVRVU19DT0RFX0lOVkFMSURBVEVEEAUS",
            "IgoeQkFSX1JFUE9SVF9TVEFUVVNfQ09ERV9GQUlMVVJFEGUSKAokQkFSX1JF",
            "UE9SVF9TVEFUVVNfQ09ERV9BQ0NFU1NfREVOSUVEEGcSJAogQkFSX1JFUE9S",
            "VF9TVEFUVVNfQ09ERV9OT1RfRk9VTkQQaBIwCixCQVJfUkVQT1JUX1NUQVRV",
            "U19DT0RFX09VVFNJREVfQUxMT1dFRF9SQU5HRRBpEikKJUJBUl9SRVBPUlRf",
            "U1RBVFVTX0NPREVfSU5WQUxJRF9QQVJBTVMQahI6CjZCQVJfUkVQT1JUX1NU",
            "QVRVU19DT0RFX0FDVElWRV9SRVFVRVNUU19MSU1JVF9WSU9MQVRJT04QaxI3",
            "CjNCQVJfUkVQT1JUX1NUQVRVU19DT0RFX1NVQlNDUklQVElPTl9MSU1JVF9W",
            "SU9MQVRJT04QbBI3CjNCQVJfUkVQT1JUX1NUQVRVU19DT0RFX1JFUVVFU1Rf",
            "UkFURV9MSU1JVF9WSU9MQVRJT04QbRIoCiRCQVJfUkVQT1JUX1NUQVRVU19D",
            "T0RFX05PVF9TVVBQT1JURUQQbg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Shared1.Shared1Reflection.Descriptor, global::MarketData2.MarketData2Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Historical2.BarBuildingTickType), typeof(global::Historical2.BarReportStatusCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.TimeAndSalesParameters), global::Historical2.TimeAndSalesParameters.Parser, new[]{ "ContractId", "Level", "FromUtcTime", "ToUtcTime" }, null, new[]{ typeof(global::Historical2.TimeAndSalesParameters.Types.Level) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.TimeAndSalesRequest), global::Historical2.TimeAndSalesRequest.Parser, new[]{ "RequestId", "TimeAndSalesParameters", "RequestType" }, null, new[]{ typeof(global::Historical2.TimeAndSalesRequest.Types.RequestType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.TimeAndSalesReport), global::Historical2.TimeAndSalesReport.Parser, new[]{ "RequestId", "ResultCode", "Quotes", "UpToUtcTime", "IsReportComplete", "TextMessage", "Truncated" }, null, new[]{ typeof(global::Historical2.TimeAndSalesReport.Types.ResultCode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.ContinuationParameters), global::Historical2.ContinuationParameters.Parser, new[]{ "ContinuationType", "Equalize" }, null, new[]{ typeof(global::Historical2.ContinuationParameters.Types.ContinuationType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.TimeBarParameters), global::Historical2.TimeBarParameters.Parser, new[]{ "ContractId", "BarUnit", "UnitNumber", "FromUtcTime", "ToUtcTime", "UseSettlements", "ContinuationParameters", "TickTypes" }, null, new[]{ typeof(global::Historical2.TimeBarParameters.Types.BarUnit) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.TimeBarRequest), global::Historical2.TimeBarRequest.Parser, new[]{ "RequestId", "TimeBarParameters", "RequestType" }, null, new[]{ typeof(global::Historical2.TimeBarRequest.Types.RequestType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.ContinuationSegment), global::Historical2.ContinuationSegment.Parser, new[]{ "CqgSymbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.TimeBar), global::Historical2.TimeBar.Parser, new[]{ "BarUtcTime", "ScaledOpenPrice", "ScaledHighPrice", "ScaledLowPrice", "ScaledClosePrice", "ScaledVolume", "TradeDate", "ScaledCommodityVolume", "ScaledOpenInterest", "ScaledCommodityOpenInterest", "ScaledSettlementPrice", "TickVolume", "CommodityTickVolume", "ContinuationSegment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.TimeBarReport), global::Historical2.TimeBarReport.Parser, new[]{ "RequestId", "StatusCode", "TimeBars", "UpToUtcTime", "IsReportComplete", "TextMessage", "Truncated", "Details" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.BarRange), global::Historical2.BarRange.Parser, new[]{ "UtcTime", "Count", "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.NonTimedBarRequest), global::Historical2.NonTimedBarRequest.Parser, new[]{ "RequestId", "RequestType", "ContinuationParameters", "ContractId", "BarRange", "TickTypes", "ConstantVolumeBarParameters", "PointAndFigureParameters", "RenkoBarParameters", "RangeBarParameters" }, null, new[]{ typeof(global::Historical2.NonTimedBarRequest.Types.RequestType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.RenkoBarParameters), global::Historical2.RenkoBarParameters.Parser, new[]{ "BrickSize", "MaxNullBricks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.RangeBarParameters), global::Historical2.RangeBarParameters.Parser, new[]{ "RangeSize", "MaxNullBars" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.NonTimedBarReport), global::Historical2.NonTimedBarReport.Parser, new[]{ "RequestId", "StatusCode", "Details", "InvalidatedFromUtcTime", "InvalidatedToUtcTime", "UpToUtcTime", "Truncated", "IsReportComplete", "ConstantVolumeBars", "PointAndFigureBars", "RenkoBars", "RangeBars" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.ConstantVolumeBarParameters), global::Historical2.ConstantVolumeBarParameters.Parser, new[]{ "VolumeLevel", "UseTickVolume", "UseFlatTicks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.PointAndFigureParameters), global::Historical2.PointAndFigureParameters.Parser, new[]{ "BoxSize", "Reversal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.ConstantVolumeBar), global::Historical2.ConstantVolumeBar.Parser, new[]{ "BarUtcTime", "Index", "TradeDate", "ScaledOpenPrice", "ScaledHighPrice", "ScaledLowPrice", "ScaledClosePrice", "ScaledVolume", "TickVolume", "ContinuationSegment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.PointAndFigureBar), global::Historical2.PointAndFigureBar.Parser, new[]{ "BarUtcTime", "Index", "TradeDate", "PfScaledOpenPrice", "PfScaledHighPrice", "PfScaledLowPrice", "PfScaledClosePrice", "ScaledHighPrice", "ScaledLowPrice", "ScaledVolume", "TickVolume", "Up", "ContinuationSegment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.RenkoBar), global::Historical2.RenkoBar.Parser, new[]{ "BarUtcTime", "Index", "TradeDate", "ScaledOpenPrice", "ScaledHighPrice", "ScaledLowPrice", "ScaledClosePrice", "ScaledRenkoHighPrice", "ScaledRenkoLowPrice", "Up", "ScaledVolume", "TickVolume", "FirstBarOfSession", "ContinuationSegment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.RangeBar), global::Historical2.RangeBar.Parser, new[]{ "BarUtcTime", "Index", "TradeDate", "ScaledOpenPrice", "ScaledHighPrice", "ScaledLowPrice", "ScaledClosePrice", "ScaledVolume", "TickVolume", "ContinuationSegment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.VolumeProfileRequest), global::Historical2.VolumeProfileRequest.Parser, new[]{ "RequestId", "VolumeProfileParameters", "RequestType" }, null, new[]{ typeof(global::Historical2.VolumeProfileRequest.Types.RequestType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.VolumeProfileParameters), global::Historical2.VolumeProfileParameters.Parser, new[]{ "ContractId", "StartUtcTime", "EndUtcTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.VolumeProfileReport), global::Historical2.VolumeProfileReport.Parser, new[]{ "RequestId", "ResultCode", "VolumeProfileItems", "LastQuotesCumulativeStatistics", "UpToUtcTime", "TextMessage", "Truncated", "IsReportComplete" }, null, new[]{ typeof(global::Historical2.VolumeProfileReport.Types.ResultCode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.VolumeProfileLastQuotesCumulativeStatistics), global::Historical2.VolumeProfileLastQuotesCumulativeStatistics.Parser, new[]{ "ScaledLastAskPrice", "ScaledLastBidPrice", "ScaledAskTradeVolume", "ScaledBidTradeVolume" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Historical2.VolumeProfileItem), global::Historical2.VolumeProfileItem.Parser, new[]{ "ScaledPrice", "ScaledVolume" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Bar building tick type enumeration.
  /// </summary>
  public enum BarBuildingTickType {
    /// <summary>
    /// Bid.
    /// </summary>
    [pbr::OriginalName("BAR_BUILDING_TICK_TYPE_BID")] Bid = 1,
    /// <summary>
    /// Ask.
    /// </summary>
    [pbr::OriginalName("BAR_BUILDING_TICK_TYPE_ASK")] Ask = 2,
    /// <summary>
    /// Trade.
    /// </summary>
    [pbr::OriginalName("BAR_BUILDING_TICK_TYPE_TRADE")] Trade = 3,
    /// <summary>
    /// Settlement.
    /// </summary>
    [pbr::OriginalName("BAR_BUILDING_TICK_TYPE_SETTLEMENT")] Settlement = 4,
  }

  /// <summary>
  /// Bar report status code enumeration.
  /// </summary>
  public enum BarReportStatusCode {
    /// <summary>
    //// success codes  (0 - 99)
    /// Request is processed without subscription (subscription was not requested).
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_SUCCESS")] Success = 0,
    /// <summary>
    /// Request is processed and subscription is established or restored after disconnection.
    /// Data can be resent as a result of the restored subscription.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_SUBSCRIBED")] Subscribed = 1,
    /// <summary>
    /// Subscription or delayed request is dropped by a client.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_DROPPED")] Dropped = 2,
    /// <summary>
    /// Unsolicited information update because of subscription.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_UPDATE")] Update = 3,
    /// <summary>
    /// Subscription or request processing status that indicates that currently processing is impossible because of communication issues.
    /// NOTE: Clients should not resubscribe or resend requests in this case, the server will restore processing with
    /// sending BAR_REPORT_STATUS_CODE_SUCCESS or BAR_REPORT_STATUS_CODE_SUBSCRIBED status once communication issues are resolved.
    /// If client is not interested in this request or subscription any longer it should send REQUEST_TYPE_DROP request.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_DISCONNECTED")] Disconnected = 4,
    /// <summary>
    /// Bars are invalidated for specified time range due to data correction.
    /// Re-request historical bars and/or re-subscribe to bar updates to receive valid bar data.
    /// NOTE: Subscription is not dropped.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_INVALIDATED")] Invalidated = 5,
    /// <summary>
    //// failure codes (100+), subscription (if any) is dropped in case of failure.
    /// General failure.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_FAILURE")] Failure = 101,
    /// <summary>
    /// The user is not allowed to access this data.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_ACCESS_DENIED")] AccessDenied = 103,
    /// <summary>
    /// Requested information is not found.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_NOT_FOUND")] NotFound = 104,
    /// <summary>
    /// Requested data is outside of allowed range.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_OUTSIDE_ALLOWED_RANGE")] OutsideAllowedRange = 105,
    /// <summary>
    /// Parameters of a bar request are invalid.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_INVALID_PARAMS")] InvalidParams = 106,
    /// <summary>
    /// The limit of active requests has been violated.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION")] ActiveRequestsLimitViolation = 107,
    /// <summary>
    /// The limit of simultaneous historical subscriptions has been violated.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION")] SubscriptionLimitViolation = 108,
    /// <summary>
    /// The request rate limit has been violated.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION")] RequestRateLimitViolation = 109,
    /// <summary>
    /// Bar request without subscription on updates is not supported for specified contract.
    /// </summary>
    [pbr::OriginalName("BAR_REPORT_STATUS_CODE_NOT_SUPPORTED")] NotSupported = 110,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Parameters for Time and Sales request.
  /// </summary>
  public sealed partial class TimeAndSalesParameters : pb::IMessage<TimeAndSalesParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeAndSalesParameters> _parser = new pb::MessageParser<TimeAndSalesParameters>(() => new TimeAndSalesParameters());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeAndSalesParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeAndSalesParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeAndSalesParameters(TimeAndSalesParameters other) : this() {
      _hasBits0 = other._hasBits0;
      contractId_ = other.contractId_;
      level_ = other.level_;
      fromUtcTime_ = other.fromUtcTime_;
      toUtcTime_ = other.toUtcTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeAndSalesParameters Clone() {
      return new TimeAndSalesParameters(this);
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 1;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// contract id for Time and Sales request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContractId {
      get { if ((_hasBits0 & 1) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContractId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContractId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private readonly static uint LevelDefaultValue = 0;

    private uint level_;
    /// <summary>
    /// This field is associated with Level enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { if ((_hasBits0 & 2) != 0) { return level_; } else { return LevelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        level_ = value;
      }
    }
    /// <summary>Gets whether the "level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLevel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLevel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "from_utc_time" field.</summary>
    public const int FromUtcTimeFieldNumber = 3;
    private readonly static long FromUtcTimeDefaultValue = 0L;

    private long fromUtcTime_;
    /// <summary>
    /// Time and Sales period time to start from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return fromUtcTime_; } else { return FromUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fromUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "from_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "from_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFromUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "to_utc_time" field.</summary>
    public const int ToUtcTimeFieldNumber = 4;
    private readonly static long ToUtcTimeDefaultValue = 0L;

    private long toUtcTime_;
    /// <summary>
    /// Optional Time and Sales period finish time.
    /// Current server time is used if it is not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ToUtcTime {
      get { if ((_hasBits0 & 8) != 0) { return toUtcTime_; } else { return ToUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        toUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "to_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToUtcTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "to_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToUtcTime() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeAndSalesParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeAndSalesParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContractId != other.ContractId) return false;
      if (Level != other.Level) return false;
      if (FromUtcTime != other.FromUtcTime) return false;
      if (ToUtcTime != other.ToUtcTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (HasLevel) hash ^= Level.GetHashCode();
      if (HasFromUtcTime) hash ^= FromUtcTime.GetHashCode();
      if (HasToUtcTime) hash ^= ToUtcTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(ToUtcTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (HasLevel) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(ToUtcTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (HasLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (HasFromUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(FromUtcTime);
      }
      if (HasToUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ToUtcTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeAndSalesParameters other) {
      if (other == null) {
        return;
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasFromUtcTime) {
        FromUtcTime = other.FromUtcTime;
      }
      if (other.HasToUtcTime) {
        ToUtcTime = other.ToUtcTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 32: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TimeAndSalesParameters message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Level or requested Time and Sales data.
      /// </summary>
      public enum Level {
        /// <summary>
        /// Get trades with volumes and settlement quotes.
        /// </summary>
        [pbr::OriginalName("LEVEL_TRADES")] Trades = 1,
        /// <summary>
        /// Get trades, settlement and best ask &amp; bid quotes with volumes.
        /// </summary>
        [pbr::OriginalName("LEVEL_TRADES_BBA_VOLUMES")] TradesBbaVolumes = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Time and sales request (30 days history limit).
  /// </summary>
  public sealed partial class TimeAndSalesRequest : pb::IMessage<TimeAndSalesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeAndSalesRequest> _parser = new pb::MessageParser<TimeAndSalesRequest>(() => new TimeAndSalesRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeAndSalesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeAndSalesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeAndSalesRequest(TimeAndSalesRequest other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      timeAndSalesParameters_ = other.timeAndSalesParameters_ != null ? other.timeAndSalesParameters_.Clone() : null;
      requestType_ = other.requestType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeAndSalesRequest Clone() {
      return new TimeAndSalesRequest(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static uint RequestIdDefaultValue = 0;

    private uint requestId_;
    /// <summary>
    /// Request ID, should be unique among currently processed requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "time_and_sales_parameters" field.</summary>
    public const int TimeAndSalesParametersFieldNumber = 2;
    private global::Historical2.TimeAndSalesParameters timeAndSalesParameters_;
    /// <summary>
    /// parameters of a request, ignored for a REQUEST_TYPE_DROP operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.TimeAndSalesParameters TimeAndSalesParameters {
      get { return timeAndSalesParameters_; }
      set {
        timeAndSalesParameters_ = value;
      }
    }

    /// <summary>Field number for the "request_type" field.</summary>
    public const int RequestTypeFieldNumber = 3;
    private readonly static uint RequestTypeDefaultValue = 0;

    private uint requestType_;
    /// <summary>
    /// This field is associated with RequestType enum type. REQUEST_TYPE_GET operation is processed by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestType {
      get { if ((_hasBits0 & 2) != 0) { return requestType_; } else { return RequestTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestType_ = value;
      }
    }
    /// <summary>Gets whether the "request_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeAndSalesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeAndSalesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (!object.Equals(TimeAndSalesParameters, other.TimeAndSalesParameters)) return false;
      if (RequestType != other.RequestType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (timeAndSalesParameters_ != null) hash ^= TimeAndSalesParameters.GetHashCode();
      if (HasRequestType) hash ^= RequestType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (timeAndSalesParameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeAndSalesParameters);
      }
      if (HasRequestType) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequestType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (timeAndSalesParameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeAndSalesParameters);
      }
      if (HasRequestType) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequestType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (timeAndSalesParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeAndSalesParameters);
      }
      if (HasRequestType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeAndSalesRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.timeAndSalesParameters_ != null) {
        if (timeAndSalesParameters_ == null) {
          TimeAndSalesParameters = new global::Historical2.TimeAndSalesParameters();
        }
        TimeAndSalesParameters.MergeFrom(other.TimeAndSalesParameters);
      }
      if (other.HasRequestType) {
        RequestType = other.RequestType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (timeAndSalesParameters_ == null) {
              TimeAndSalesParameters = new global::Historical2.TimeAndSalesParameters();
            }
            input.ReadMessage(TimeAndSalesParameters);
            break;
          }
          case 24: {
            RequestType = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (timeAndSalesParameters_ == null) {
              TimeAndSalesParameters = new global::Historical2.TimeAndSalesParameters();
            }
            input.ReadMessage(TimeAndSalesParameters);
            break;
          }
          case 24: {
            RequestType = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TimeAndSalesRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type of request.
      /// </summary>
      public enum RequestType {
        /// <summary>
        /// Request.
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE_GET")] Get = 1,
        /// <summary>
        /// Drop request.
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE_DROP")] Drop = 3,
      }

    }
    #endregion

  }

  public sealed partial class TimeAndSalesReport : pb::IMessage<TimeAndSalesReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeAndSalesReport> _parser = new pb::MessageParser<TimeAndSalesReport>(() => new TimeAndSalesReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeAndSalesReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeAndSalesReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeAndSalesReport(TimeAndSalesReport other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      resultCode_ = other.resultCode_;
      quotes_ = other.quotes_.Clone();
      upToUtcTime_ = other.upToUtcTime_;
      isReportComplete_ = other.isReportComplete_;
      textMessage_ = other.textMessage_;
      truncated_ = other.truncated_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeAndSalesReport Clone() {
      return new TimeAndSalesReport(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static uint RequestIdDefaultValue = 0;

    private uint requestId_;
    /// <summary>
    /// ID of a corresponding request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private readonly static uint ResultCodeDefaultValue = 0;

    private uint resultCode_;
    /// <summary>
    /// This field is associated with ResultCode enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { if ((_hasBits0 & 2) != 0) { return resultCode_; } else { return ResultCodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        resultCode_ = value;
      }
    }
    /// <summary>Gets whether the "result_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResultCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "result_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResultCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "quotes" field.</summary>
    public const int QuotesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MarketData2.Quote> _repeated_quotes_codec
        = pb::FieldCodec.ForMessage(26, global::MarketData2.Quote.Parser);
    private readonly pbc::RepeatedField<global::MarketData2.Quote> quotes_ = new pbc::RepeatedField<global::MarketData2.Quote>();
    /// <summary>
    /// List of the requested Time and Sales as quotes.
    /// Note that in order to simplify linking of T&amp;S with real time quotes by a client server will atomically include
    /// all quotes with the same time-stamp into T&amp;S without splitting the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MarketData2.Quote> Quotes {
      get { return quotes_; }
    }

    /// <summary>Field number for the "up_to_utc_time" field.</summary>
    public const int UpToUtcTimeFieldNumber = 4;
    private readonly static long UpToUtcTimeDefaultValue = 0L;

    private long upToUtcTime_;
    /// <summary>
    /// Time up to which the quotes were included into this report,
    /// if there were several with the same time-stamp equal to this time then all are included into the report (UTC).
    /// This time is set only for 'up-to-current' requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpToUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return upToUtcTime_; } else { return UpToUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        upToUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "up_to_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUpToUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "up_to_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpToUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_report_complete" field.</summary>
    public const int IsReportCompleteFieldNumber = 5;
    private readonly static bool IsReportCompleteDefaultValue = true;

    private bool isReportComplete_;
    /// <summary>
    /// True means that requested data is complete at the moment, false means more report messages are expected for completeness.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReportComplete {
      get { if ((_hasBits0 & 8) != 0) { return isReportComplete_; } else { return IsReportCompleteDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isReportComplete_ = value;
      }
    }
    /// <summary>Gets whether the "is_report_complete" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsReportComplete {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_report_complete" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsReportComplete() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "text_message" field.</summary>
    public const int TextMessageFieldNumber = 6;
    private readonly static string TextMessageDefaultValue = "";

    private string textMessage_;
    /// <summary>
    /// Optional failure details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextMessage {
      get { return textMessage_ ?? TextMessageDefaultValue; }
      set {
        textMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text_message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTextMessage {
      get { return textMessage_ != null; }
    }
    /// <summary>Clears the value of the "text_message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTextMessage() {
      textMessage_ = null;
    }

    /// <summary>Field number for the "truncated" field.</summary>
    public const int TruncatedFieldNumber = 7;
    private readonly static bool TruncatedDefaultValue = false;

    private bool truncated_;
    /// <summary>
    /// Request contains dates partially outside of allowed historical data depth.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Truncated {
      get { if ((_hasBits0 & 16) != 0) { return truncated_; } else { return TruncatedDefaultValue; } }
      set {
        _hasBits0 |= 16;
        truncated_ = value;
      }
    }
    /// <summary>Gets whether the "truncated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTruncated {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "truncated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTruncated() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeAndSalesReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeAndSalesReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (ResultCode != other.ResultCode) return false;
      if(!quotes_.Equals(other.quotes_)) return false;
      if (UpToUtcTime != other.UpToUtcTime) return false;
      if (IsReportComplete != other.IsReportComplete) return false;
      if (TextMessage != other.TextMessage) return false;
      if (Truncated != other.Truncated) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasResultCode) hash ^= ResultCode.GetHashCode();
      hash ^= quotes_.GetHashCode();
      if (HasUpToUtcTime) hash ^= UpToUtcTime.GetHashCode();
      if (HasIsReportComplete) hash ^= IsReportComplete.GetHashCode();
      if (HasTextMessage) hash ^= TextMessage.GetHashCode();
      if (HasTruncated) hash ^= Truncated.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasResultCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      quotes_.WriteTo(output, _repeated_quotes_codec);
      if (HasUpToUtcTime) {
        output.WriteRawTag(32);
        output.WriteInt64(UpToUtcTime);
      }
      if (HasIsReportComplete) {
        output.WriteRawTag(40);
        output.WriteBool(IsReportComplete);
      }
      if (HasTextMessage) {
        output.WriteRawTag(50);
        output.WriteString(TextMessage);
      }
      if (HasTruncated) {
        output.WriteRawTag(56);
        output.WriteBool(Truncated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasResultCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      quotes_.WriteTo(ref output, _repeated_quotes_codec);
      if (HasUpToUtcTime) {
        output.WriteRawTag(32);
        output.WriteInt64(UpToUtcTime);
      }
      if (HasIsReportComplete) {
        output.WriteRawTag(40);
        output.WriteBool(IsReportComplete);
      }
      if (HasTextMessage) {
        output.WriteRawTag(50);
        output.WriteString(TextMessage);
      }
      if (HasTruncated) {
        output.WriteRawTag(56);
        output.WriteBool(Truncated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (HasResultCode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      size += quotes_.CalculateSize(_repeated_quotes_codec);
      if (HasUpToUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpToUtcTime);
      }
      if (HasIsReportComplete) {
        size += 1 + 1;
      }
      if (HasTextMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextMessage);
      }
      if (HasTruncated) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeAndSalesReport other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasResultCode) {
        ResultCode = other.ResultCode;
      }
      quotes_.Add(other.quotes_);
      if (other.HasUpToUtcTime) {
        UpToUtcTime = other.UpToUtcTime;
      }
      if (other.HasIsReportComplete) {
        IsReportComplete = other.IsReportComplete;
      }
      if (other.HasTextMessage) {
        TextMessage = other.TextMessage;
      }
      if (other.HasTruncated) {
        Truncated = other.Truncated;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 26: {
            quotes_.AddEntriesFrom(input, _repeated_quotes_codec);
            break;
          }
          case 32: {
            UpToUtcTime = input.ReadInt64();
            break;
          }
          case 40: {
            IsReportComplete = input.ReadBool();
            break;
          }
          case 50: {
            TextMessage = input.ReadString();
            break;
          }
          case 56: {
            Truncated = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 26: {
            quotes_.AddEntriesFrom(ref input, _repeated_quotes_codec);
            break;
          }
          case 32: {
            UpToUtcTime = input.ReadInt64();
            break;
          }
          case 40: {
            IsReportComplete = input.ReadBool();
            break;
          }
          case 50: {
            TextMessage = input.ReadString();
            break;
          }
          case 56: {
            Truncated = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TimeAndSalesReport message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Result code.
      /// </summary>
      public enum ResultCode {
        /// <summary>
        //// success codes  (0 - 99)
        /// Request is processed successfully.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_SUCCESS")] Success = 0,
        /// <summary>
        /// Delayed request is dropped by a client.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_DROPPED")] Dropped = 2,
        /// <summary>
        /// Request processing status that indicates that currently processing is impossible because of communication issues.
        /// NOTE: Clients should not resend requests in this case, the server will restore processing with
        /// sending RESULT_CODE_SUCCESS status once communication issues are resolved.
        /// If client is not interested in this request any longer it should send REQUEST_TYPE_DROP request.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_DISCONNECTED")] Disconnected = 4,
        /// <summary>
        //// failure codes (100+)
        /// General failure.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_FAILURE")] Failure = 101,
        /// <summary>
        /// The user is not allowed to access this instrument data.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_ACCESS_DENIED")] AccessDenied = 103,
        /// <summary>
        /// Requested information is not found.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_NOT_FOUND")] NotFound = 104,
        /// <summary>
        /// Requested data is outside of allowed range.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_OUTSIDE_ALLOWED_RANGE")] OutsideAllowedRange = 105,
        /// <summary>
        /// The limit of the active historical requests has been violated.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION")] ActiveRequestsLimitViolation = 106,
        /// <summary>
        /// The request rate limit has been violated.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_REQUEST_RATE_LIMIT_VIOLATION")] RequestRateLimitViolation = 107,
        /// <summary>
        /// T&amp;S request is not supported for specified contract.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_NOT_SUPPORTED")] NotSupported = 110,
      }

    }
    #endregion

  }

  /// <summary>
  /// Continuation parameters for TimeBarRequest.
  /// </summary>
  public sealed partial class ContinuationParameters : pb::IMessage<ContinuationParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContinuationParameters> _parser = new pb::MessageParser<ContinuationParameters>(() => new ContinuationParameters());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuationParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuationParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuationParameters(ContinuationParameters other) : this() {
      _hasBits0 = other._hasBits0;
      continuationType_ = other.continuationType_;
      equalize_ = other.equalize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuationParameters Clone() {
      return new ContinuationParameters(this);
    }

    /// <summary>Field number for the "continuation_type" field.</summary>
    public const int ContinuationTypeFieldNumber = 1;
    private readonly static uint ContinuationTypeDefaultValue = 0;

    private uint continuationType_;
    /// <summary>
    /// This field is associated with ContinuationType enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContinuationType {
      get { if ((_hasBits0 & 1) != 0) { return continuationType_; } else { return ContinuationTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        continuationType_ = value;
      }
    }
    /// <summary>Gets whether the "continuation_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContinuationType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "continuation_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContinuationType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "equalize" field.</summary>
    public const int EqualizeFieldNumber = 2;
    private readonly static bool EqualizeDefaultValue = false;

    private bool equalize_;
    /// <summary>
    /// Equalize closes (opens for bonds). Supported for CONTINUATION_TYPE_ACTIVE continuation only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equalize {
      get { if ((_hasBits0 & 2) != 0) { return equalize_; } else { return EqualizeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        equalize_ = value;
      }
    }
    /// <summary>Gets whether the "equalize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEqualize {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "equalize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEqualize() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuationParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuationParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContinuationType != other.ContinuationType) return false;
      if (Equalize != other.Equalize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContinuationType) hash ^= ContinuationType.GetHashCode();
      if (HasEqualize) hash ^= Equalize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasContinuationType) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContinuationType);
      }
      if (HasEqualize) {
        output.WriteRawTag(16);
        output.WriteBool(Equalize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasContinuationType) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContinuationType);
      }
      if (HasEqualize) {
        output.WriteRawTag(16);
        output.WriteBool(Equalize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasContinuationType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContinuationType);
      }
      if (HasEqualize) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuationParameters other) {
      if (other == null) {
        return;
      }
      if (other.HasContinuationType) {
        ContinuationType = other.ContinuationType;
      }
      if (other.HasEqualize) {
        Equalize = other.Equalize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ContinuationType = input.ReadUInt32();
            break;
          }
          case 16: {
            Equalize = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ContinuationType = input.ReadUInt32();
            break;
          }
          case 16: {
            Equalize = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ContinuationParameters message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ContinuationType {
        /// <summary>
        /// Rollover with trading activity (corresponds with ContractMetadata.is_most_active).
        /// </summary>
        [pbr::OriginalName("CONTINUATION_TYPE_ACTIVE")] Active = 1,
        /// <summary>
        /// Rollover at expiration (non-Delayed and non-EOD contracts only).
        /// </summary>
        [pbr::OriginalName("CONTINUATION_TYPE_STANDARD")] Standard = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Parameters of a time bar request.
  /// </summary>
  public sealed partial class TimeBarParameters : pb::IMessage<TimeBarParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeBarParameters> _parser = new pb::MessageParser<TimeBarParameters>(() => new TimeBarParameters());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeBarParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBarParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBarParameters(TimeBarParameters other) : this() {
      _hasBits0 = other._hasBits0;
      contractId_ = other.contractId_;
      barUnit_ = other.barUnit_;
      unitNumber_ = other.unitNumber_;
      fromUtcTime_ = other.fromUtcTime_;
      toUtcTime_ = other.toUtcTime_;
      useSettlements_ = other.useSettlements_;
      continuationParameters_ = other.continuationParameters_ != null ? other.continuationParameters_.Clone() : null;
      tickTypes_ = other.tickTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBarParameters Clone() {
      return new TimeBarParameters(this);
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 1;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// Contract id for a bar request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContractId {
      get { if ((_hasBits0 & 1) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContractId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContractId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bar_unit" field.</summary>
    public const int BarUnitFieldNumber = 2;
    private readonly static uint BarUnitDefaultValue = 0;

    private uint barUnit_;
    /// <summary>
    /// This field is associated with BarUnit enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BarUnit {
      get { if ((_hasBits0 & 2) != 0) { return barUnit_; } else { return BarUnitDefaultValue; } }
      set {
        _hasBits0 |= 2;
        barUnit_ = value;
      }
    }
    /// <summary>Gets whether the "bar_unit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBarUnit {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bar_unit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBarUnit() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "unit_number" field.</summary>
    public const int UnitNumberFieldNumber = 3;
    private readonly static uint UnitNumberDefaultValue = 0;

    private uint unitNumber_;
    /// <summary>
    /// Number of units per a single bar for Intra-day bars (must be within 24 hours period).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitNumber {
      get { if ((_hasBits0 & 4) != 0) { return unitNumber_; } else { return UnitNumberDefaultValue; } }
      set {
        _hasBits0 |= 4;
        unitNumber_ = value;
      }
    }
    /// <summary>Gets whether the "unit_number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnitNumber {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "unit_number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnitNumber() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "from_utc_time" field.</summary>
    public const int FromUtcTimeFieldNumber = 4;
    private readonly static long FromUtcTimeDefaultValue = 0L;

    private long fromUtcTime_;
    /// <summary>
    /// Bars period time to start from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromUtcTime {
      get { if ((_hasBits0 & 8) != 0) { return fromUtcTime_; } else { return FromUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        fromUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "from_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFromUtcTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "from_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFromUtcTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "to_utc_time" field.</summary>
    public const int ToUtcTimeFieldNumber = 5;
    private readonly static long ToUtcTimeDefaultValue = 0L;

    private long toUtcTime_;
    /// <summary>
    /// Optional bars period finish time.
    /// Current server time is used if it is not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ToUtcTime {
      get { if ((_hasBits0 & 16) != 0) { return toUtcTime_; } else { return ToUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        toUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "to_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasToUtcTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "to_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearToUtcTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "use_settlements" field.</summary>
    public const int UseSettlementsFieldNumber = 6;
    private readonly static bool UseSettlementsDefaultValue = false;

    private bool useSettlements_;
    /// <summary>
    /// Defines content of the close_price and settlement_price fields in TimeBar.
    /// close_price is set to last price if the use_settlements is false or omitted, settlement_price is omitted.
    /// settlement_price is set to trade date's settlement price (or omitted for today's bar, if contract did not yet settle)
    /// if the use_settlements is true, close_price is omitted.
    /// Note: can be 'true' for requests with bar_unit equal only to BAR_UNIT_DAY, otherwise request is rejected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSettlements {
      get { if ((_hasBits0 & 32) != 0) { return useSettlements_; } else { return UseSettlementsDefaultValue; } }
      set {
        _hasBits0 |= 32;
        useSettlements_ = value;
      }
    }
    /// <summary>Gets whether the "use_settlements" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseSettlements {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "use_settlements" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseSettlements() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "continuation_parameters" field.</summary>
    public const int ContinuationParametersFieldNumber = 7;
    private global::Historical2.ContinuationParameters continuationParameters_;
    /// <summary>
    /// Continuation parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.ContinuationParameters ContinuationParameters {
      get { return continuationParameters_; }
      set {
        continuationParameters_ = value;
      }
    }

    /// <summary>Field number for the "tick_types" field.</summary>
    public const int TickTypesFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_tickTypes_codec
        = pb::FieldCodec.ForUInt32(64);
    private readonly pbc::RepeatedField<uint> tickTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// List of tick types to be used in bar building.
    /// This field is associated with BarBuildingTickType enum type.
    /// When list is empty, commodity default tick types are used.
    /// Note: can be non-empty for intra-day bar requests only, otherwise request is rejected.
    /// Note: BAR_BUILDING_TICK_TYPE_SETTLEMENT tick type can only be used in combination with other type(s), otherwise request is rejected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TickTypes {
      get { return tickTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeBarParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeBarParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContractId != other.ContractId) return false;
      if (BarUnit != other.BarUnit) return false;
      if (UnitNumber != other.UnitNumber) return false;
      if (FromUtcTime != other.FromUtcTime) return false;
      if (ToUtcTime != other.ToUtcTime) return false;
      if (UseSettlements != other.UseSettlements) return false;
      if (!object.Equals(ContinuationParameters, other.ContinuationParameters)) return false;
      if(!tickTypes_.Equals(other.tickTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (HasBarUnit) hash ^= BarUnit.GetHashCode();
      if (HasUnitNumber) hash ^= UnitNumber.GetHashCode();
      if (HasFromUtcTime) hash ^= FromUtcTime.GetHashCode();
      if (HasToUtcTime) hash ^= ToUtcTime.GetHashCode();
      if (HasUseSettlements) hash ^= UseSettlements.GetHashCode();
      if (continuationParameters_ != null) hash ^= ContinuationParameters.GetHashCode();
      hash ^= tickTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (HasBarUnit) {
        output.WriteRawTag(16);
        output.WriteUInt32(BarUnit);
      }
      if (HasUnitNumber) {
        output.WriteRawTag(24);
        output.WriteUInt32(UnitNumber);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(ToUtcTime);
      }
      if (HasUseSettlements) {
        output.WriteRawTag(48);
        output.WriteBool(UseSettlements);
      }
      if (continuationParameters_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ContinuationParameters);
      }
      tickTypes_.WriteTo(output, _repeated_tickTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (HasBarUnit) {
        output.WriteRawTag(16);
        output.WriteUInt32(BarUnit);
      }
      if (HasUnitNumber) {
        output.WriteRawTag(24);
        output.WriteUInt32(UnitNumber);
      }
      if (HasFromUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(FromUtcTime);
      }
      if (HasToUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(ToUtcTime);
      }
      if (HasUseSettlements) {
        output.WriteRawTag(48);
        output.WriteBool(UseSettlements);
      }
      if (continuationParameters_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ContinuationParameters);
      }
      tickTypes_.WriteTo(ref output, _repeated_tickTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (HasBarUnit) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BarUnit);
      }
      if (HasUnitNumber) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitNumber);
      }
      if (HasFromUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(FromUtcTime);
      }
      if (HasToUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ToUtcTime);
      }
      if (HasUseSettlements) {
        size += 1 + 1;
      }
      if (continuationParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContinuationParameters);
      }
      size += tickTypes_.CalculateSize(_repeated_tickTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeBarParameters other) {
      if (other == null) {
        return;
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      if (other.HasBarUnit) {
        BarUnit = other.BarUnit;
      }
      if (other.HasUnitNumber) {
        UnitNumber = other.UnitNumber;
      }
      if (other.HasFromUtcTime) {
        FromUtcTime = other.FromUtcTime;
      }
      if (other.HasToUtcTime) {
        ToUtcTime = other.ToUtcTime;
      }
      if (other.HasUseSettlements) {
        UseSettlements = other.UseSettlements;
      }
      if (other.continuationParameters_ != null) {
        if (continuationParameters_ == null) {
          ContinuationParameters = new global::Historical2.ContinuationParameters();
        }
        ContinuationParameters.MergeFrom(other.ContinuationParameters);
      }
      tickTypes_.Add(other.tickTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 16: {
            BarUnit = input.ReadUInt32();
            break;
          }
          case 24: {
            UnitNumber = input.ReadUInt32();
            break;
          }
          case 32: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 40: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
          case 48: {
            UseSettlements = input.ReadBool();
            break;
          }
          case 58: {
            if (continuationParameters_ == null) {
              ContinuationParameters = new global::Historical2.ContinuationParameters();
            }
            input.ReadMessage(ContinuationParameters);
            break;
          }
          case 66:
          case 64: {
            tickTypes_.AddEntriesFrom(input, _repeated_tickTypes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 16: {
            BarUnit = input.ReadUInt32();
            break;
          }
          case 24: {
            UnitNumber = input.ReadUInt32();
            break;
          }
          case 32: {
            FromUtcTime = input.ReadSInt64();
            break;
          }
          case 40: {
            ToUtcTime = input.ReadSInt64();
            break;
          }
          case 48: {
            UseSettlements = input.ReadBool();
            break;
          }
          case 58: {
            if (continuationParameters_ == null) {
              ContinuationParameters = new global::Historical2.ContinuationParameters();
            }
            input.ReadMessage(ContinuationParameters);
            break;
          }
          case 66:
          case 64: {
            tickTypes_.AddEntriesFrom(ref input, _repeated_tickTypes_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TimeBarParameters message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Bar unit type.
      /// </summary>
      public enum BarUnit {
        /// <summary>
        /// yearly bars.
        /// </summary>
        [pbr::OriginalName("BAR_UNIT_YEAR")] Year = 1,
        /// <summary>
        /// semi-annual bars.
        /// </summary>
        [pbr::OriginalName("BAR_UNIT_SEMI_ANNUAL")] SemiAnnual = 2,
        /// <summary>
        /// quarterly bars.
        /// </summary>
        [pbr::OriginalName("BAR_UNIT_QUARTER")] Quarter = 3,
        /// <summary>
        /// monthly bars.
        /// </summary>
        [pbr::OriginalName("BAR_UNIT_MONTH")] Month = 4,
        /// <summary>
        /// weekly bars.
        /// </summary>
        [pbr::OriginalName("BAR_UNIT_WEEK")] Week = 5,
        /// <summary>
        /// daily bars.
        /// </summary>
        [pbr::OriginalName("BAR_UNIT_DAY")] Day = 6,
        /// <summary>
        /// hourly bars.
        /// </summary>
        [pbr::OriginalName("BAR_UNIT_HOUR")] Hour = 7,
        /// <summary>
        /// minute bars.
        /// </summary>
        [pbr::OriginalName("BAR_UNIT_MIN")] Min = 8,
      }

    }
    #endregion

  }

  /// <summary>
  /// Request for time bars with optional subscription.
  /// In case of subscription updates are sent when a bar opens, closes or when it is corrected. Corrected bars are sent even
  /// if they are outside of requested time bounds. Range can be expanded with another request if needed.
  /// Bar also is updated upon expiration the update interval (1 second for Intra-day bars or 1 minute for Inter-day bars), if changed.
  /// </summary>
  public sealed partial class TimeBarRequest : pb::IMessage<TimeBarRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeBarRequest> _parser = new pb::MessageParser<TimeBarRequest>(() => new TimeBarRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeBarRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBarRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBarRequest(TimeBarRequest other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      timeBarParameters_ = other.timeBarParameters_ != null ? other.timeBarParameters_.Clone() : null;
      requestType_ = other.requestType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBarRequest Clone() {
      return new TimeBarRequest(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static uint RequestIdDefaultValue = 0;

    private uint requestId_;
    /// <summary>
    /// request or subscription ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "time_bar_parameters" field.</summary>
    public const int TimeBarParametersFieldNumber = 2;
    private global::Historical2.TimeBarParameters timeBarParameters_;
    /// <summary>
    /// parameters of a request, ignored for a REQUEST_TYPE_DROP operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.TimeBarParameters TimeBarParameters {
      get { return timeBarParameters_; }
      set {
        timeBarParameters_ = value;
      }
    }

    /// <summary>Field number for the "request_type" field.</summary>
    public const int RequestTypeFieldNumber = 3;
    private readonly static uint RequestTypeDefaultValue = 0;

    private uint requestType_;
    /// <summary>
    /// This field is associated with RequestType enum type. REQUEST_TYPE_GET operation is processed by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestType {
      get { if ((_hasBits0 & 2) != 0) { return requestType_; } else { return RequestTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestType_ = value;
      }
    }
    /// <summary>Gets whether the "request_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeBarRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeBarRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (!object.Equals(TimeBarParameters, other.TimeBarParameters)) return false;
      if (RequestType != other.RequestType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (timeBarParameters_ != null) hash ^= TimeBarParameters.GetHashCode();
      if (HasRequestType) hash ^= RequestType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (timeBarParameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeBarParameters);
      }
      if (HasRequestType) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequestType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (timeBarParameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeBarParameters);
      }
      if (HasRequestType) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequestType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (timeBarParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeBarParameters);
      }
      if (HasRequestType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeBarRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.timeBarParameters_ != null) {
        if (timeBarParameters_ == null) {
          TimeBarParameters = new global::Historical2.TimeBarParameters();
        }
        TimeBarParameters.MergeFrom(other.TimeBarParameters);
      }
      if (other.HasRequestType) {
        RequestType = other.RequestType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (timeBarParameters_ == null) {
              TimeBarParameters = new global::Historical2.TimeBarParameters();
            }
            input.ReadMessage(TimeBarParameters);
            break;
          }
          case 24: {
            RequestType = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (timeBarParameters_ == null) {
              TimeBarParameters = new global::Historical2.TimeBarParameters();
            }
            input.ReadMessage(TimeBarParameters);
            break;
          }
          case 24: {
            RequestType = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TimeBarRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type of a bar request.
      /// </summary>
      public enum RequestType {
        /// <summary>
        /// Request bars without subscription.
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE_GET")] Get = 1,
        /// <summary>
        /// Request bars with subscription for updates.
        /// Note: to_utc_time parameter must not be specified to subscribe.
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE_SUBSCRIBE")] Subscribe = 2,
        /// <summary>
        /// Drop request if server has not completed it yet and/or unsubscribe if already subscribed for updates.
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE_DROP")] Drop = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Continuation segment.
  /// </summary>
  public sealed partial class ContinuationSegment : pb::IMessage<ContinuationSegment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContinuationSegment> _parser = new pb::MessageParser<ContinuationSegment>(() => new ContinuationSegment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuationSegment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuationSegment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuationSegment(ContinuationSegment other) : this() {
      cqgSymbol_ = other.cqgSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuationSegment Clone() {
      return new ContinuationSegment(this);
    }

    /// <summary>Field number for the "cqg_symbol" field.</summary>
    public const int CqgSymbolFieldNumber = 1;
    private readonly static string CqgSymbolDefaultValue = "";

    private string cqgSymbol_;
    /// <summary>
    /// Symbol in CQG dialect for the continuation segment
    /// populated regardless of the client dialect used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CqgSymbol {
      get { return cqgSymbol_ ?? CqgSymbolDefaultValue; }
      set {
        cqgSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cqg_symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCqgSymbol {
      get { return cqgSymbol_ != null; }
    }
    /// <summary>Clears the value of the "cqg_symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCqgSymbol() {
      cqgSymbol_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuationSegment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuationSegment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CqgSymbol != other.CqgSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCqgSymbol) hash ^= CqgSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCqgSymbol) {
        output.WriteRawTag(10);
        output.WriteString(CqgSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCqgSymbol) {
        output.WriteRawTag(10);
        output.WriteString(CqgSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCqgSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CqgSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuationSegment other) {
      if (other == null) {
        return;
      }
      if (other.HasCqgSymbol) {
        CqgSymbol = other.CqgSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CqgSymbol = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CqgSymbol = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Time bar.
  /// </summary>
  public sealed partial class TimeBar : pb::IMessage<TimeBar>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeBar> _parser = new pb::MessageParser<TimeBar>(() => new TimeBar());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeBar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBar(TimeBar other) : this() {
      _hasBits0 = other._hasBits0;
      barUtcTime_ = other.barUtcTime_;
      scaledOpenPrice_ = other.scaledOpenPrice_;
      scaledHighPrice_ = other.scaledHighPrice_;
      scaledLowPrice_ = other.scaledLowPrice_;
      scaledClosePrice_ = other.scaledClosePrice_;
      scaledVolume_ = other.scaledVolume_;
      tradeDate_ = other.tradeDate_;
      scaledCommodityVolume_ = other.scaledCommodityVolume_;
      scaledOpenInterest_ = other.scaledOpenInterest_;
      scaledCommodityOpenInterest_ = other.scaledCommodityOpenInterest_;
      scaledSettlementPrice_ = other.scaledSettlementPrice_;
      tickVolume_ = other.tickVolume_;
      commodityTickVolume_ = other.commodityTickVolume_;
      continuationSegment_ = other.continuationSegment_ != null ? other.continuationSegment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBar Clone() {
      return new TimeBar(this);
    }

    /// <summary>Field number for the "bar_utc_time" field.</summary>
    public const int BarUtcTimeFieldNumber = 1;
    private readonly static long BarUtcTimeDefaultValue = 0L;

    private long barUtcTime_;
    /// <summary>
    /// Bar start time (UTC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BarUtcTime {
      get { if ((_hasBits0 & 1) != 0) { return barUtcTime_; } else { return BarUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        barUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "bar_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBarUtcTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bar_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBarUtcTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "scaled_open_price" field.</summary>
    public const int ScaledOpenPriceFieldNumber = 2;
    private readonly static int ScaledOpenPriceDefaultValue = 0;

    private int scaledOpenPrice_;
    /// <summary>
    /// Open price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScaledOpenPrice {
      get { if ((_hasBits0 & 2) != 0) { return scaledOpenPrice_; } else { return ScaledOpenPriceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        scaledOpenPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_open_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledOpenPrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "scaled_open_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledOpenPrice() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "scaled_high_price" field.</summary>
    public const int ScaledHighPriceFieldNumber = 3;
    private readonly static int ScaledHighPriceDefaultValue = 0;

    private int scaledHighPrice_;
    /// <summary>
    /// High price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScaledHighPrice {
      get { if ((_hasBits0 & 4) != 0) { return scaledHighPrice_; } else { return ScaledHighPriceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        scaledHighPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_high_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledHighPrice {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "scaled_high_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledHighPrice() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "scaled_low_price" field.</summary>
    public const int ScaledLowPriceFieldNumber = 4;
    private readonly static int ScaledLowPriceDefaultValue = 0;

    private int scaledLowPrice_;
    /// <summary>
    /// Low price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScaledLowPrice {
      get { if ((_hasBits0 & 8) != 0) { return scaledLowPrice_; } else { return ScaledLowPriceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        scaledLowPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_low_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledLowPrice {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "scaled_low_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledLowPrice() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "scaled_close_price" field.</summary>
    public const int ScaledClosePriceFieldNumber = 5;
    private readonly static int ScaledClosePriceDefaultValue = 0;

    private int scaledClosePrice_;
    /// <summary>
    /// Close or last price (if the bar is not closed yet).
    /// It is omitted if the TimeBarParameters.use_settlements is true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScaledClosePrice {
      get { if ((_hasBits0 & 16) != 0) { return scaledClosePrice_; } else { return ScaledClosePriceDefaultValue; } }
      set {
        _hasBits0 |= 16;
        scaledClosePrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_close_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledClosePrice {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "scaled_close_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledClosePrice() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "scaled_volume" field.</summary>
    public const int ScaledVolumeFieldNumber = 6;
    private readonly static ulong ScaledVolumeDefaultValue = 0UL;

    private ulong scaledVolume_;
    /// <summary>
    /// Bar volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScaledVolume {
      get { if ((_hasBits0 & 32) != 0) { return scaledVolume_; } else { return ScaledVolumeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        scaledVolume_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledVolume {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "scaled_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledVolume() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 7;
    private readonly static long TradeDateDefaultValue = 0L;

    private long tradeDate_;
    /// <summary>
    /// Trade date (in time format), it is set only for the first bar in a requested period
    /// and for each first bar of the following trade dates for intra-day bars. Trade date of the bar first day for multi-day bars.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TradeDate {
      get { if ((_hasBits0 & 64) != 0) { return tradeDate_; } else { return TradeDateDefaultValue; } }
      set {
        _hasBits0 |= 64;
        tradeDate_ = value;
      }
    }
    /// <summary>Gets whether the "trade_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTradeDate {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "trade_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTradeDate() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "scaled_commodity_volume" field.</summary>
    public const int ScaledCommodityVolumeFieldNumber = 8;
    private readonly static ulong ScaledCommodityVolumeDefaultValue = 0UL;

    private ulong scaledCommodityVolume_;
    /// <summary>
    /// Commodity volume where available, for multi-day bars only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScaledCommodityVolume {
      get { if ((_hasBits0 & 128) != 0) { return scaledCommodityVolume_; } else { return ScaledCommodityVolumeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        scaledCommodityVolume_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_commodity_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledCommodityVolume {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "scaled_commodity_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledCommodityVolume() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "scaled_open_interest" field.</summary>
    public const int ScaledOpenInterestFieldNumber = 9;
    private readonly static ulong ScaledOpenInterestDefaultValue = 0UL;

    private ulong scaledOpenInterest_;
    /// <summary>
    /// Open interest, for multi-day bars only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScaledOpenInterest {
      get { if ((_hasBits0 & 256) != 0) { return scaledOpenInterest_; } else { return ScaledOpenInterestDefaultValue; } }
      set {
        _hasBits0 |= 256;
        scaledOpenInterest_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_open_interest" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledOpenInterest {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "scaled_open_interest" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledOpenInterest() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "scaled_commodity_open_interest" field.</summary>
    public const int ScaledCommodityOpenInterestFieldNumber = 10;
    private readonly static ulong ScaledCommodityOpenInterestDefaultValue = 0UL;

    private ulong scaledCommodityOpenInterest_;
    /// <summary>
    /// Commodity open interest, for multi-day bars only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScaledCommodityOpenInterest {
      get { if ((_hasBits0 & 512) != 0) { return scaledCommodityOpenInterest_; } else { return ScaledCommodityOpenInterestDefaultValue; } }
      set {
        _hasBits0 |= 512;
        scaledCommodityOpenInterest_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_commodity_open_interest" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledCommodityOpenInterest {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "scaled_commodity_open_interest" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledCommodityOpenInterest() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "scaled_settlement_price" field.</summary>
    public const int ScaledSettlementPriceFieldNumber = 11;
    private readonly static int ScaledSettlementPriceDefaultValue = 0;

    private int scaledSettlementPrice_;
    /// <summary>
    /// Settlement price, for daily bars only.
    /// It is omitted if the TimeBarParameters.use_settlements is false or omitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScaledSettlementPrice {
      get { if ((_hasBits0 & 1024) != 0) { return scaledSettlementPrice_; } else { return ScaledSettlementPriceDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        scaledSettlementPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_settlement_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledSettlementPrice {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "scaled_settlement_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledSettlementPrice() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "tick_volume" field.</summary>
    public const int TickVolumeFieldNumber = 12;
    private readonly static ulong TickVolumeDefaultValue = 0UL;

    private ulong tickVolume_;
    /// <summary>
    /// Tick volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TickVolume {
      get { if ((_hasBits0 & 2048) != 0) { return tickVolume_; } else { return TickVolumeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        tickVolume_ = value;
      }
    }
    /// <summary>Gets whether the "tick_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTickVolume {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "tick_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTickVolume() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "commodity_tick_volume" field.</summary>
    public const int CommodityTickVolumeFieldNumber = 13;
    private readonly static ulong CommodityTickVolumeDefaultValue = 0UL;

    private ulong commodityTickVolume_;
    /// <summary>
    /// Commodity tick volume where available, for multi-day bars only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CommodityTickVolume {
      get { if ((_hasBits0 & 4096) != 0) { return commodityTickVolume_; } else { return CommodityTickVolumeDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        commodityTickVolume_ = value;
      }
    }
    /// <summary>Gets whether the "commodity_tick_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCommodityTickVolume {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "commodity_tick_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommodityTickVolume() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "continuation_segment" field.</summary>
    public const int ContinuationSegmentFieldNumber = 14;
    private global::Historical2.ContinuationSegment continuationSegment_;
    /// <summary>
    /// Continuation segment the bar belongs to, it is set only for the first bar
    /// and for each first bar from the next continuation segment.
    /// Used only for continuation bars with BAR_UNIT_MONTH and smaller BarUnit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.ContinuationSegment ContinuationSegment {
      get { return continuationSegment_; }
      set {
        continuationSegment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeBar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeBar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BarUtcTime != other.BarUtcTime) return false;
      if (ScaledOpenPrice != other.ScaledOpenPrice) return false;
      if (ScaledHighPrice != other.ScaledHighPrice) return false;
      if (ScaledLowPrice != other.ScaledLowPrice) return false;
      if (ScaledClosePrice != other.ScaledClosePrice) return false;
      if (ScaledVolume != other.ScaledVolume) return false;
      if (TradeDate != other.TradeDate) return false;
      if (ScaledCommodityVolume != other.ScaledCommodityVolume) return false;
      if (ScaledOpenInterest != other.ScaledOpenInterest) return false;
      if (ScaledCommodityOpenInterest != other.ScaledCommodityOpenInterest) return false;
      if (ScaledSettlementPrice != other.ScaledSettlementPrice) return false;
      if (TickVolume != other.TickVolume) return false;
      if (CommodityTickVolume != other.CommodityTickVolume) return false;
      if (!object.Equals(ContinuationSegment, other.ContinuationSegment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBarUtcTime) hash ^= BarUtcTime.GetHashCode();
      if (HasScaledOpenPrice) hash ^= ScaledOpenPrice.GetHashCode();
      if (HasScaledHighPrice) hash ^= ScaledHighPrice.GetHashCode();
      if (HasScaledLowPrice) hash ^= ScaledLowPrice.GetHashCode();
      if (HasScaledClosePrice) hash ^= ScaledClosePrice.GetHashCode();
      if (HasScaledVolume) hash ^= ScaledVolume.GetHashCode();
      if (HasTradeDate) hash ^= TradeDate.GetHashCode();
      if (HasScaledCommodityVolume) hash ^= ScaledCommodityVolume.GetHashCode();
      if (HasScaledOpenInterest) hash ^= ScaledOpenInterest.GetHashCode();
      if (HasScaledCommodityOpenInterest) hash ^= ScaledCommodityOpenInterest.GetHashCode();
      if (HasScaledSettlementPrice) hash ^= ScaledSettlementPrice.GetHashCode();
      if (HasTickVolume) hash ^= TickVolume.GetHashCode();
      if (HasCommodityTickVolume) hash ^= CommodityTickVolume.GetHashCode();
      if (continuationSegment_ != null) hash ^= ContinuationSegment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBarUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(BarUtcTime);
      }
      if (HasScaledOpenPrice) {
        output.WriteRawTag(16);
        output.WriteSInt32(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        output.WriteRawTag(24);
        output.WriteSInt32(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        output.WriteRawTag(32);
        output.WriteSInt32(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        output.WriteRawTag(40);
        output.WriteSInt32(ScaledClosePrice);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(48);
        output.WriteUInt64(ScaledVolume);
      }
      if (HasTradeDate) {
        output.WriteRawTag(56);
        output.WriteSInt64(TradeDate);
      }
      if (HasScaledCommodityVolume) {
        output.WriteRawTag(64);
        output.WriteUInt64(ScaledCommodityVolume);
      }
      if (HasScaledOpenInterest) {
        output.WriteRawTag(72);
        output.WriteUInt64(ScaledOpenInterest);
      }
      if (HasScaledCommodityOpenInterest) {
        output.WriteRawTag(80);
        output.WriteUInt64(ScaledCommodityOpenInterest);
      }
      if (HasScaledSettlementPrice) {
        output.WriteRawTag(88);
        output.WriteSInt32(ScaledSettlementPrice);
      }
      if (HasTickVolume) {
        output.WriteRawTag(96);
        output.WriteUInt64(TickVolume);
      }
      if (HasCommodityTickVolume) {
        output.WriteRawTag(104);
        output.WriteUInt64(CommodityTickVolume);
      }
      if (continuationSegment_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ContinuationSegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBarUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(BarUtcTime);
      }
      if (HasScaledOpenPrice) {
        output.WriteRawTag(16);
        output.WriteSInt32(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        output.WriteRawTag(24);
        output.WriteSInt32(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        output.WriteRawTag(32);
        output.WriteSInt32(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        output.WriteRawTag(40);
        output.WriteSInt32(ScaledClosePrice);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(48);
        output.WriteUInt64(ScaledVolume);
      }
      if (HasTradeDate) {
        output.WriteRawTag(56);
        output.WriteSInt64(TradeDate);
      }
      if (HasScaledCommodityVolume) {
        output.WriteRawTag(64);
        output.WriteUInt64(ScaledCommodityVolume);
      }
      if (HasScaledOpenInterest) {
        output.WriteRawTag(72);
        output.WriteUInt64(ScaledOpenInterest);
      }
      if (HasScaledCommodityOpenInterest) {
        output.WriteRawTag(80);
        output.WriteUInt64(ScaledCommodityOpenInterest);
      }
      if (HasScaledSettlementPrice) {
        output.WriteRawTag(88);
        output.WriteSInt32(ScaledSettlementPrice);
      }
      if (HasTickVolume) {
        output.WriteRawTag(96);
        output.WriteUInt64(TickVolume);
      }
      if (HasCommodityTickVolume) {
        output.WriteRawTag(104);
        output.WriteUInt64(CommodityTickVolume);
      }
      if (continuationSegment_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ContinuationSegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBarUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BarUtcTime);
      }
      if (HasScaledOpenPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ScaledClosePrice);
      }
      if (HasScaledVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScaledVolume);
      }
      if (HasTradeDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TradeDate);
      }
      if (HasScaledCommodityVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScaledCommodityVolume);
      }
      if (HasScaledOpenInterest) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScaledOpenInterest);
      }
      if (HasScaledCommodityOpenInterest) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScaledCommodityOpenInterest);
      }
      if (HasScaledSettlementPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ScaledSettlementPrice);
      }
      if (HasTickVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TickVolume);
      }
      if (HasCommodityTickVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CommodityTickVolume);
      }
      if (continuationSegment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContinuationSegment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeBar other) {
      if (other == null) {
        return;
      }
      if (other.HasBarUtcTime) {
        BarUtcTime = other.BarUtcTime;
      }
      if (other.HasScaledOpenPrice) {
        ScaledOpenPrice = other.ScaledOpenPrice;
      }
      if (other.HasScaledHighPrice) {
        ScaledHighPrice = other.ScaledHighPrice;
      }
      if (other.HasScaledLowPrice) {
        ScaledLowPrice = other.ScaledLowPrice;
      }
      if (other.HasScaledClosePrice) {
        ScaledClosePrice = other.ScaledClosePrice;
      }
      if (other.HasScaledVolume) {
        ScaledVolume = other.ScaledVolume;
      }
      if (other.HasTradeDate) {
        TradeDate = other.TradeDate;
      }
      if (other.HasScaledCommodityVolume) {
        ScaledCommodityVolume = other.ScaledCommodityVolume;
      }
      if (other.HasScaledOpenInterest) {
        ScaledOpenInterest = other.ScaledOpenInterest;
      }
      if (other.HasScaledCommodityOpenInterest) {
        ScaledCommodityOpenInterest = other.ScaledCommodityOpenInterest;
      }
      if (other.HasScaledSettlementPrice) {
        ScaledSettlementPrice = other.ScaledSettlementPrice;
      }
      if (other.HasTickVolume) {
        TickVolume = other.TickVolume;
      }
      if (other.HasCommodityTickVolume) {
        CommodityTickVolume = other.CommodityTickVolume;
      }
      if (other.continuationSegment_ != null) {
        if (continuationSegment_ == null) {
          ContinuationSegment = new global::Historical2.ContinuationSegment();
        }
        ContinuationSegment.MergeFrom(other.ContinuationSegment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BarUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            ScaledOpenPrice = input.ReadSInt32();
            break;
          }
          case 24: {
            ScaledHighPrice = input.ReadSInt32();
            break;
          }
          case 32: {
            ScaledLowPrice = input.ReadSInt32();
            break;
          }
          case 40: {
            ScaledClosePrice = input.ReadSInt32();
            break;
          }
          case 48: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
          case 56: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 64: {
            ScaledCommodityVolume = input.ReadUInt64();
            break;
          }
          case 72: {
            ScaledOpenInterest = input.ReadUInt64();
            break;
          }
          case 80: {
            ScaledCommodityOpenInterest = input.ReadUInt64();
            break;
          }
          case 88: {
            ScaledSettlementPrice = input.ReadSInt32();
            break;
          }
          case 96: {
            TickVolume = input.ReadUInt64();
            break;
          }
          case 104: {
            CommodityTickVolume = input.ReadUInt64();
            break;
          }
          case 114: {
            if (continuationSegment_ == null) {
              ContinuationSegment = new global::Historical2.ContinuationSegment();
            }
            input.ReadMessage(ContinuationSegment);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BarUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            ScaledOpenPrice = input.ReadSInt32();
            break;
          }
          case 24: {
            ScaledHighPrice = input.ReadSInt32();
            break;
          }
          case 32: {
            ScaledLowPrice = input.ReadSInt32();
            break;
          }
          case 40: {
            ScaledClosePrice = input.ReadSInt32();
            break;
          }
          case 48: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
          case 56: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 64: {
            ScaledCommodityVolume = input.ReadUInt64();
            break;
          }
          case 72: {
            ScaledOpenInterest = input.ReadUInt64();
            break;
          }
          case 80: {
            ScaledCommodityOpenInterest = input.ReadUInt64();
            break;
          }
          case 88: {
            ScaledSettlementPrice = input.ReadSInt32();
            break;
          }
          case 96: {
            TickVolume = input.ReadUInt64();
            break;
          }
          case 104: {
            CommodityTickVolume = input.ReadUInt64();
            break;
          }
          case 114: {
            if (continuationSegment_ == null) {
              ContinuationSegment = new global::Historical2.ContinuationSegment();
            }
            input.ReadMessage(ContinuationSegment);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Time bar data response or update.
  /// Each report contains set of bars. Reports related to a specific request ordered chronologically from the most recent one to the past.
  /// In case of subscription each report contains 'up_to_utc_time' field.
  /// Warning: bar updates are not synchronized with real time data so a real time quote that is included into
  /// a bar might be received either before or after the bar update, use time of a quote for possible real-time bar updates.
  /// </summary>
  public sealed partial class TimeBarReport : pb::IMessage<TimeBarReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeBarReport> _parser = new pb::MessageParser<TimeBarReport>(() => new TimeBarReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeBarReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBarReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBarReport(TimeBarReport other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      statusCode_ = other.statusCode_;
      timeBars_ = other.timeBars_.Clone();
      upToUtcTime_ = other.upToUtcTime_;
      isReportComplete_ = other.isReportComplete_;
      textMessage_ = other.textMessage_;
      truncated_ = other.truncated_;
      details_ = other.details_ != null ? other.details_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeBarReport Clone() {
      return new TimeBarReport(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static uint RequestIdDefaultValue = 0;

    private uint requestId_;
    /// <summary>
    /// ID of a corresponding request or subscription.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 2;
    private readonly static uint StatusCodeDefaultValue = 0;

    private uint statusCode_;
    /// <summary>
    /// This field is associated with BarReportStatusCode enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StatusCode {
      get { if ((_hasBits0 & 2) != 0) { return statusCode_; } else { return StatusCodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        statusCode_ = value;
      }
    }
    /// <summary>Gets whether the "status_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatusCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "status_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatusCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "time_bars" field.</summary>
    public const int TimeBarsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Historical2.TimeBar> _repeated_timeBars_codec
        = pb::FieldCodec.ForMessage(26, global::Historical2.TimeBar.Parser);
    private readonly pbc::RepeatedField<global::Historical2.TimeBar> timeBars_ = new pbc::RepeatedField<global::Historical2.TimeBar>();
    /// <summary>
    /// List of time bars.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.TimeBar> TimeBars {
      get { return timeBars_; }
    }

    /// <summary>Field number for the "up_to_utc_time" field.</summary>
    public const int UpToUtcTimeFieldNumber = 4;
    private readonly static long UpToUtcTimeDefaultValue = 0L;

    private long upToUtcTime_;
    /// <summary>
    /// Time up to which the quotes were included into bars,
    /// if there were several with the same time-stamp equal to this time then all are included into the last bar (UTC).
    /// This time is set for 'up-to-current' bar requests and bar updates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpToUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return upToUtcTime_; } else { return UpToUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        upToUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "up_to_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUpToUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "up_to_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpToUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_report_complete" field.</summary>
    public const int IsReportCompleteFieldNumber = 5;
    private readonly static bool IsReportCompleteDefaultValue = true;

    private bool isReportComplete_;
    /// <summary>
    /// True means that requested data is complete at the moment, false means more report messages are expected for completeness.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReportComplete {
      get { if ((_hasBits0 & 8) != 0) { return isReportComplete_; } else { return IsReportCompleteDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isReportComplete_ = value;
      }
    }
    /// <summary>Gets whether the "is_report_complete" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsReportComplete {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_report_complete" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsReportComplete() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "text_message" field.</summary>
    public const int TextMessageFieldNumber = 6;
    private readonly static string TextMessageDefaultValue = "";

    private string textMessage_;
    /// <summary>
    /// Optional failure details.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextMessage {
      get { return textMessage_ ?? TextMessageDefaultValue; }
      set {
        textMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text_message" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTextMessage {
      get { return textMessage_ != null; }
    }
    /// <summary>Clears the value of the "text_message" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTextMessage() {
      textMessage_ = null;
    }

    /// <summary>Field number for the "truncated" field.</summary>
    public const int TruncatedFieldNumber = 7;
    private readonly static bool TruncatedDefaultValue = false;

    private bool truncated_;
    /// <summary>
    /// Request contains dates partially outside of allowed historical data depth.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Truncated {
      get { if ((_hasBits0 & 16) != 0) { return truncated_; } else { return TruncatedDefaultValue; } }
      set {
        _hasBits0 |= 16;
        truncated_ = value;
      }
    }
    /// <summary>Gets whether the "truncated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTruncated {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "truncated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTruncated() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 8;
    private global::Shared1.Text details_;
    /// <summary>
    /// Optional failure details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Shared1.Text Details {
      get { return details_; }
      set {
        details_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeBarReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeBarReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (StatusCode != other.StatusCode) return false;
      if(!timeBars_.Equals(other.timeBars_)) return false;
      if (UpToUtcTime != other.UpToUtcTime) return false;
      if (IsReportComplete != other.IsReportComplete) return false;
      if (TextMessage != other.TextMessage) return false;
      if (Truncated != other.Truncated) return false;
      if (!object.Equals(Details, other.Details)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasStatusCode) hash ^= StatusCode.GetHashCode();
      hash ^= timeBars_.GetHashCode();
      if (HasUpToUtcTime) hash ^= UpToUtcTime.GetHashCode();
      if (HasIsReportComplete) hash ^= IsReportComplete.GetHashCode();
      if (HasTextMessage) hash ^= TextMessage.GetHashCode();
      if (HasTruncated) hash ^= Truncated.GetHashCode();
      if (details_ != null) hash ^= Details.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasStatusCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatusCode);
      }
      timeBars_.WriteTo(output, _repeated_timeBars_codec);
      if (HasUpToUtcTime) {
        output.WriteRawTag(32);
        output.WriteInt64(UpToUtcTime);
      }
      if (HasIsReportComplete) {
        output.WriteRawTag(40);
        output.WriteBool(IsReportComplete);
      }
      if (HasTextMessage) {
        output.WriteRawTag(50);
        output.WriteString(TextMessage);
      }
      if (HasTruncated) {
        output.WriteRawTag(56);
        output.WriteBool(Truncated);
      }
      if (details_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Details);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasStatusCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatusCode);
      }
      timeBars_.WriteTo(ref output, _repeated_timeBars_codec);
      if (HasUpToUtcTime) {
        output.WriteRawTag(32);
        output.WriteInt64(UpToUtcTime);
      }
      if (HasIsReportComplete) {
        output.WriteRawTag(40);
        output.WriteBool(IsReportComplete);
      }
      if (HasTextMessage) {
        output.WriteRawTag(50);
        output.WriteString(TextMessage);
      }
      if (HasTruncated) {
        output.WriteRawTag(56);
        output.WriteBool(Truncated);
      }
      if (details_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Details);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (HasStatusCode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatusCode);
      }
      size += timeBars_.CalculateSize(_repeated_timeBars_codec);
      if (HasUpToUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpToUtcTime);
      }
      if (HasIsReportComplete) {
        size += 1 + 1;
      }
      if (HasTextMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextMessage);
      }
      if (HasTruncated) {
        size += 1 + 1;
      }
      if (details_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Details);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeBarReport other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasStatusCode) {
        StatusCode = other.StatusCode;
      }
      timeBars_.Add(other.timeBars_);
      if (other.HasUpToUtcTime) {
        UpToUtcTime = other.UpToUtcTime;
      }
      if (other.HasIsReportComplete) {
        IsReportComplete = other.IsReportComplete;
      }
      if (other.HasTextMessage) {
        TextMessage = other.TextMessage;
      }
      if (other.HasTruncated) {
        Truncated = other.Truncated;
      }
      if (other.details_ != null) {
        if (details_ == null) {
          Details = new global::Shared1.Text();
        }
        Details.MergeFrom(other.Details);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            StatusCode = input.ReadUInt32();
            break;
          }
          case 26: {
            timeBars_.AddEntriesFrom(input, _repeated_timeBars_codec);
            break;
          }
          case 32: {
            UpToUtcTime = input.ReadInt64();
            break;
          }
          case 40: {
            IsReportComplete = input.ReadBool();
            break;
          }
          case 50: {
            TextMessage = input.ReadString();
            break;
          }
          case 56: {
            Truncated = input.ReadBool();
            break;
          }
          case 66: {
            if (details_ == null) {
              Details = new global::Shared1.Text();
            }
            input.ReadMessage(Details);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            StatusCode = input.ReadUInt32();
            break;
          }
          case 26: {
            timeBars_.AddEntriesFrom(ref input, _repeated_timeBars_codec);
            break;
          }
          case 32: {
            UpToUtcTime = input.ReadInt64();
            break;
          }
          case 40: {
            IsReportComplete = input.ReadBool();
            break;
          }
          case 50: {
            TextMessage = input.ReadString();
            break;
          }
          case 56: {
            Truncated = input.ReadBool();
            break;
          }
          case 66: {
            if (details_ == null) {
              Details = new global::Shared1.Text();
            }
            input.ReadMessage(Details);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Range of bars.
  /// </summary>
  public sealed partial class BarRange : pb::IMessage<BarRange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BarRange> _parser = new pb::MessageParser<BarRange>(() => new BarRange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BarRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarRange(BarRange other) : this() {
      _hasBits0 = other._hasBits0;
      utcTime_ = other.utcTime_;
      count_ = other.count_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BarRange Clone() {
      return new BarRange(this);
    }

    /// <summary>Field number for the "utc_time" field.</summary>
    public const int UtcTimeFieldNumber = 1;
    private readonly static long UtcTimeDefaultValue = 0L;

    private long utcTime_;
    /// <summary>
    /// Time of last bar.
    /// Current server time is used if it is not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UtcTime {
      get { if ((_hasBits0 & 1) != 0) { return utcTime_; } else { return UtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        utcTime_ = value;
      }
    }
    /// <summary>Gets whether the "utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUtcTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUtcTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private readonly static uint CountDefaultValue = 0;

    private uint count_;
    /// <summary>
    /// Number of requested bars (back in history).
    /// Note: The maximal number of bars that can be requested in one message is limited, 100000 by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { if ((_hasBits0 & 2) != 0) { return count_; } else { return CountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private readonly static int IndexDefaultValue = 0;

    private int index_;
    /// <summary>
    /// Index of bar. If there is a bar with given utc_time and index,
    /// the report will contain specified amount of bars preceding that bar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { if ((_hasBits0 & 4) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BarRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BarRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UtcTime != other.UtcTime) return false;
      if (Count != other.Count) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUtcTime) hash ^= UtcTime.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(UtcTime);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (HasIndex) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(UtcTime);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (HasIndex) {
        output.WriteRawTag(24);
        output.WriteSInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(UtcTime);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BarRange other) {
      if (other == null) {
        return;
      }
      if (other.HasUtcTime) {
        UtcTime = other.UtcTime;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
          case 24: {
            Index = input.ReadSInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for non-time based bars with optional subscription.
  /// </summary>
  public sealed partial class NonTimedBarRequest : pb::IMessage<NonTimedBarRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NonTimedBarRequest> _parser = new pb::MessageParser<NonTimedBarRequest>(() => new NonTimedBarRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NonTimedBarRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonTimedBarRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonTimedBarRequest(NonTimedBarRequest other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      requestType_ = other.requestType_;
      continuationParameters_ = other.continuationParameters_ != null ? other.continuationParameters_.Clone() : null;
      contractId_ = other.contractId_;
      barRange_ = other.barRange_ != null ? other.barRange_.Clone() : null;
      tickTypes_ = other.tickTypes_.Clone();
      constantVolumeBarParameters_ = other.constantVolumeBarParameters_ != null ? other.constantVolumeBarParameters_.Clone() : null;
      pointAndFigureParameters_ = other.pointAndFigureParameters_ != null ? other.pointAndFigureParameters_.Clone() : null;
      renkoBarParameters_ = other.renkoBarParameters_ != null ? other.renkoBarParameters_.Clone() : null;
      rangeBarParameters_ = other.rangeBarParameters_ != null ? other.rangeBarParameters_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonTimedBarRequest Clone() {
      return new NonTimedBarRequest(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static uint RequestIdDefaultValue = 0;

    private uint requestId_;
    /// <summary>
    /// Request ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "request_type" field.</summary>
    public const int RequestTypeFieldNumber = 2;
    private readonly static uint RequestTypeDefaultValue = 0;

    private uint requestType_;
    /// <summary>
    /// This field is associated with RequestType enum type.
    /// REQUEST_TYPE_GET operation is processed by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestType {
      get { if ((_hasBits0 & 2) != 0) { return requestType_; } else { return RequestTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestType_ = value;
      }
    }
    /// <summary>Gets whether the "request_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "continuation_parameters" field.</summary>
    public const int ContinuationParametersFieldNumber = 3;
    private global::Historical2.ContinuationParameters continuationParameters_;
    /// <summary>
    /// Continuation parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.ContinuationParameters ContinuationParameters {
      get { return continuationParameters_; }
      set {
        continuationParameters_ = value;
      }
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 4;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// Contract id.
    /// Note: must be specified for REQUEST_TYPE_GET or REQUEST_TYPE_SUBSCRIBE types of request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContractId {
      get { if ((_hasBits0 & 4) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContractId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContractId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "bar_range" field.</summary>
    public const int BarRangeFieldNumber = 5;
    private global::Historical2.BarRange barRange_;
    /// <summary>
    /// Specifies bar range of a request.
    /// Note: must be specified for REQUEST_TYPE_GET or REQUEST_TYPE_SUBSCRIBE types of request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.BarRange BarRange {
      get { return barRange_; }
      set {
        barRange_ = value;
      }
    }

    /// <summary>Field number for the "tick_types" field.</summary>
    public const int TickTypesFieldNumber = 10;
    private static readonly pb::FieldCodec<uint> _repeated_tickTypes_codec
        = pb::FieldCodec.ForUInt32(80);
    private readonly pbc::RepeatedField<uint> tickTypes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// List of tick types to be used in bar building.
    /// This field is associated with BarBuildingTickType enum type.
    /// When list is empty, commodity default tick types are used.
    /// Note: Requests with BAR_BUILDING_TICK_TYPE_SETTLEMENT tick type in a list are rejected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TickTypes {
      get { return tickTypes_; }
    }

    /// <summary>Field number for the "constant_volume_bar_parameters" field.</summary>
    public const int ConstantVolumeBarParametersFieldNumber = 6;
    private global::Historical2.ConstantVolumeBarParameters constantVolumeBarParameters_;
    /// <summary>
    //// Only one of following optional fields has to be specified.
    /// Constant volume bar request parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.ConstantVolumeBarParameters ConstantVolumeBarParameters {
      get { return constantVolumeBarParameters_; }
      set {
        constantVolumeBarParameters_ = value;
      }
    }

    /// <summary>Field number for the "point_and_figure_parameters" field.</summary>
    public const int PointAndFigureParametersFieldNumber = 7;
    private global::Historical2.PointAndFigureParameters pointAndFigureParameters_;
    /// <summary>
    /// P&amp;F request parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.PointAndFigureParameters PointAndFigureParameters {
      get { return pointAndFigureParameters_; }
      set {
        pointAndFigureParameters_ = value;
      }
    }

    /// <summary>Field number for the "renko_bar_parameters" field.</summary>
    public const int RenkoBarParametersFieldNumber = 8;
    private global::Historical2.RenkoBarParameters renkoBarParameters_;
    /// <summary>
    /// Renko bar request parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.RenkoBarParameters RenkoBarParameters {
      get { return renkoBarParameters_; }
      set {
        renkoBarParameters_ = value;
      }
    }

    /// <summary>Field number for the "range_bar_parameters" field.</summary>
    public const int RangeBarParametersFieldNumber = 9;
    private global::Historical2.RangeBarParameters rangeBarParameters_;
    /// <summary>
    /// Range bar request parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.RangeBarParameters RangeBarParameters {
      get { return rangeBarParameters_; }
      set {
        rangeBarParameters_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NonTimedBarRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NonTimedBarRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (RequestType != other.RequestType) return false;
      if (!object.Equals(ContinuationParameters, other.ContinuationParameters)) return false;
      if (ContractId != other.ContractId) return false;
      if (!object.Equals(BarRange, other.BarRange)) return false;
      if(!tickTypes_.Equals(other.tickTypes_)) return false;
      if (!object.Equals(ConstantVolumeBarParameters, other.ConstantVolumeBarParameters)) return false;
      if (!object.Equals(PointAndFigureParameters, other.PointAndFigureParameters)) return false;
      if (!object.Equals(RenkoBarParameters, other.RenkoBarParameters)) return false;
      if (!object.Equals(RangeBarParameters, other.RangeBarParameters)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasRequestType) hash ^= RequestType.GetHashCode();
      if (continuationParameters_ != null) hash ^= ContinuationParameters.GetHashCode();
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (barRange_ != null) hash ^= BarRange.GetHashCode();
      hash ^= tickTypes_.GetHashCode();
      if (constantVolumeBarParameters_ != null) hash ^= ConstantVolumeBarParameters.GetHashCode();
      if (pointAndFigureParameters_ != null) hash ^= PointAndFigureParameters.GetHashCode();
      if (renkoBarParameters_ != null) hash ^= RenkoBarParameters.GetHashCode();
      if (rangeBarParameters_ != null) hash ^= RangeBarParameters.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasRequestType) {
        output.WriteRawTag(16);
        output.WriteUInt32(RequestType);
      }
      if (continuationParameters_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ContinuationParameters);
      }
      if (HasContractId) {
        output.WriteRawTag(32);
        output.WriteUInt32(ContractId);
      }
      if (barRange_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BarRange);
      }
      if (constantVolumeBarParameters_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ConstantVolumeBarParameters);
      }
      if (pointAndFigureParameters_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PointAndFigureParameters);
      }
      if (renkoBarParameters_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RenkoBarParameters);
      }
      if (rangeBarParameters_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RangeBarParameters);
      }
      tickTypes_.WriteTo(output, _repeated_tickTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasRequestType) {
        output.WriteRawTag(16);
        output.WriteUInt32(RequestType);
      }
      if (continuationParameters_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ContinuationParameters);
      }
      if (HasContractId) {
        output.WriteRawTag(32);
        output.WriteUInt32(ContractId);
      }
      if (barRange_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BarRange);
      }
      if (constantVolumeBarParameters_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ConstantVolumeBarParameters);
      }
      if (pointAndFigureParameters_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PointAndFigureParameters);
      }
      if (renkoBarParameters_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RenkoBarParameters);
      }
      if (rangeBarParameters_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RangeBarParameters);
      }
      tickTypes_.WriteTo(ref output, _repeated_tickTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (HasRequestType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestType);
      }
      if (continuationParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContinuationParameters);
      }
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (barRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BarRange);
      }
      size += tickTypes_.CalculateSize(_repeated_tickTypes_codec);
      if (constantVolumeBarParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConstantVolumeBarParameters);
      }
      if (pointAndFigureParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PointAndFigureParameters);
      }
      if (renkoBarParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenkoBarParameters);
      }
      if (rangeBarParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RangeBarParameters);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NonTimedBarRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasRequestType) {
        RequestType = other.RequestType;
      }
      if (other.continuationParameters_ != null) {
        if (continuationParameters_ == null) {
          ContinuationParameters = new global::Historical2.ContinuationParameters();
        }
        ContinuationParameters.MergeFrom(other.ContinuationParameters);
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      if (other.barRange_ != null) {
        if (barRange_ == null) {
          BarRange = new global::Historical2.BarRange();
        }
        BarRange.MergeFrom(other.BarRange);
      }
      tickTypes_.Add(other.tickTypes_);
      if (other.constantVolumeBarParameters_ != null) {
        if (constantVolumeBarParameters_ == null) {
          ConstantVolumeBarParameters = new global::Historical2.ConstantVolumeBarParameters();
        }
        ConstantVolumeBarParameters.MergeFrom(other.ConstantVolumeBarParameters);
      }
      if (other.pointAndFigureParameters_ != null) {
        if (pointAndFigureParameters_ == null) {
          PointAndFigureParameters = new global::Historical2.PointAndFigureParameters();
        }
        PointAndFigureParameters.MergeFrom(other.PointAndFigureParameters);
      }
      if (other.renkoBarParameters_ != null) {
        if (renkoBarParameters_ == null) {
          RenkoBarParameters = new global::Historical2.RenkoBarParameters();
        }
        RenkoBarParameters.MergeFrom(other.RenkoBarParameters);
      }
      if (other.rangeBarParameters_ != null) {
        if (rangeBarParameters_ == null) {
          RangeBarParameters = new global::Historical2.RangeBarParameters();
        }
        RangeBarParameters.MergeFrom(other.RangeBarParameters);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            RequestType = input.ReadUInt32();
            break;
          }
          case 26: {
            if (continuationParameters_ == null) {
              ContinuationParameters = new global::Historical2.ContinuationParameters();
            }
            input.ReadMessage(ContinuationParameters);
            break;
          }
          case 32: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (barRange_ == null) {
              BarRange = new global::Historical2.BarRange();
            }
            input.ReadMessage(BarRange);
            break;
          }
          case 50: {
            if (constantVolumeBarParameters_ == null) {
              ConstantVolumeBarParameters = new global::Historical2.ConstantVolumeBarParameters();
            }
            input.ReadMessage(ConstantVolumeBarParameters);
            break;
          }
          case 58: {
            if (pointAndFigureParameters_ == null) {
              PointAndFigureParameters = new global::Historical2.PointAndFigureParameters();
            }
            input.ReadMessage(PointAndFigureParameters);
            break;
          }
          case 66: {
            if (renkoBarParameters_ == null) {
              RenkoBarParameters = new global::Historical2.RenkoBarParameters();
            }
            input.ReadMessage(RenkoBarParameters);
            break;
          }
          case 74: {
            if (rangeBarParameters_ == null) {
              RangeBarParameters = new global::Historical2.RangeBarParameters();
            }
            input.ReadMessage(RangeBarParameters);
            break;
          }
          case 82:
          case 80: {
            tickTypes_.AddEntriesFrom(input, _repeated_tickTypes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            RequestType = input.ReadUInt32();
            break;
          }
          case 26: {
            if (continuationParameters_ == null) {
              ContinuationParameters = new global::Historical2.ContinuationParameters();
            }
            input.ReadMessage(ContinuationParameters);
            break;
          }
          case 32: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 42: {
            if (barRange_ == null) {
              BarRange = new global::Historical2.BarRange();
            }
            input.ReadMessage(BarRange);
            break;
          }
          case 50: {
            if (constantVolumeBarParameters_ == null) {
              ConstantVolumeBarParameters = new global::Historical2.ConstantVolumeBarParameters();
            }
            input.ReadMessage(ConstantVolumeBarParameters);
            break;
          }
          case 58: {
            if (pointAndFigureParameters_ == null) {
              PointAndFigureParameters = new global::Historical2.PointAndFigureParameters();
            }
            input.ReadMessage(PointAndFigureParameters);
            break;
          }
          case 66: {
            if (renkoBarParameters_ == null) {
              RenkoBarParameters = new global::Historical2.RenkoBarParameters();
            }
            input.ReadMessage(RenkoBarParameters);
            break;
          }
          case 74: {
            if (rangeBarParameters_ == null) {
              RangeBarParameters = new global::Historical2.RangeBarParameters();
            }
            input.ReadMessage(RangeBarParameters);
            break;
          }
          case 82:
          case 80: {
            tickTypes_.AddEntriesFrom(ref input, _repeated_tickTypes_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the NonTimedBarRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type of request action.
      /// </summary>
      public enum RequestType {
        /// <summary>
        /// Request bars without subscription.
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE_GET")] Get = 1,
        /// <summary>
        /// Request bars with subscription for updates.
        /// Note: utc_time parameter of BarRange must not be specified to subscribe.
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE_SUBSCRIBE")] Subscribe = 2,
        /// <summary>
        /// Drop request if server has not completed it yet and/or unsubscribe if already subscribed for updates.
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE_DROP")] Drop = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Parameters of a Renko bar request.
  /// </summary>
  public sealed partial class RenkoBarParameters : pb::IMessage<RenkoBarParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RenkoBarParameters> _parser = new pb::MessageParser<RenkoBarParameters>(() => new RenkoBarParameters());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenkoBarParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenkoBarParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenkoBarParameters(RenkoBarParameters other) : this() {
      _hasBits0 = other._hasBits0;
      brickSize_ = other.brickSize_;
      maxNullBricks_ = other.maxNullBricks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenkoBarParameters Clone() {
      return new RenkoBarParameters(this);
    }

    /// <summary>Field number for the "brick_size" field.</summary>
    public const int BrickSizeFieldNumber = 1;
    private readonly static uint BrickSizeDefaultValue = 0;

    private uint brickSize_;
    /// <summary>
    /// Size of single brick. Can take a value from 1 to 1000000000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BrickSize {
      get { if ((_hasBits0 & 1) != 0) { return brickSize_; } else { return BrickSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        brickSize_ = value;
      }
    }
    /// <summary>Gets whether the "brick_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBrickSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "brick_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBrickSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_null_bricks" field.</summary>
    public const int MaxNullBricksFieldNumber = 2;
    private readonly static uint MaxNullBricksDefaultValue = 0;

    private uint maxNullBricks_;
    /// <summary>
    /// Maximum number of null bricks that can be generated as a single brick in the case of price gaps.
    /// Can take a value from 0 to 200. Default values is 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNullBricks {
      get { if ((_hasBits0 & 2) != 0) { return maxNullBricks_; } else { return MaxNullBricksDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxNullBricks_ = value;
      }
    }
    /// <summary>Gets whether the "max_null_bricks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxNullBricks {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_null_bricks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxNullBricks() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenkoBarParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenkoBarParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrickSize != other.BrickSize) return false;
      if (MaxNullBricks != other.MaxNullBricks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBrickSize) hash ^= BrickSize.GetHashCode();
      if (HasMaxNullBricks) hash ^= MaxNullBricks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBrickSize) {
        output.WriteRawTag(8);
        output.WriteUInt32(BrickSize);
      }
      if (HasMaxNullBricks) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxNullBricks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBrickSize) {
        output.WriteRawTag(8);
        output.WriteUInt32(BrickSize);
      }
      if (HasMaxNullBricks) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxNullBricks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBrickSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BrickSize);
      }
      if (HasMaxNullBricks) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNullBricks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenkoBarParameters other) {
      if (other == null) {
        return;
      }
      if (other.HasBrickSize) {
        BrickSize = other.BrickSize;
      }
      if (other.HasMaxNullBricks) {
        MaxNullBricks = other.MaxNullBricks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BrickSize = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxNullBricks = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BrickSize = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxNullBricks = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Parameters of a Range bar request.
  /// </summary>
  public sealed partial class RangeBarParameters : pb::IMessage<RangeBarParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RangeBarParameters> _parser = new pb::MessageParser<RangeBarParameters>(() => new RangeBarParameters());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeBarParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeBarParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeBarParameters(RangeBarParameters other) : this() {
      _hasBits0 = other._hasBits0;
      rangeSize_ = other.rangeSize_;
      maxNullBars_ = other.maxNullBars_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeBarParameters Clone() {
      return new RangeBarParameters(this);
    }

    /// <summary>Field number for the "range_size" field.</summary>
    public const int RangeSizeFieldNumber = 1;
    private readonly static uint RangeSizeDefaultValue = 0;

    private uint rangeSize_;
    /// <summary>
    /// Size of single range bar. Can take a value from 1 to 1000000000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RangeSize {
      get { if ((_hasBits0 & 1) != 0) { return rangeSize_; } else { return RangeSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        rangeSize_ = value;
      }
    }
    /// <summary>Gets whether the "range_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRangeSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "range_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRangeSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "max_null_bars" field.</summary>
    public const int MaxNullBarsFieldNumber = 2;
    private readonly static uint MaxNullBarsDefaultValue = 0;

    private uint maxNullBars_;
    /// <summary>
    /// Maximum number of null range bars that can be generated as a single range bar in the case of price gaps.
    /// Can take a value from 0 to 200. Default values is 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNullBars {
      get { if ((_hasBits0 & 2) != 0) { return maxNullBars_; } else { return MaxNullBarsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maxNullBars_ = value;
      }
    }
    /// <summary>Gets whether the "max_null_bars" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaxNullBars {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "max_null_bars" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaxNullBars() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeBarParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeBarParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RangeSize != other.RangeSize) return false;
      if (MaxNullBars != other.MaxNullBars) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRangeSize) hash ^= RangeSize.GetHashCode();
      if (HasMaxNullBars) hash ^= MaxNullBars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRangeSize) {
        output.WriteRawTag(8);
        output.WriteUInt32(RangeSize);
      }
      if (HasMaxNullBars) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxNullBars);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRangeSize) {
        output.WriteRawTag(8);
        output.WriteUInt32(RangeSize);
      }
      if (HasMaxNullBars) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxNullBars);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRangeSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RangeSize);
      }
      if (HasMaxNullBars) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNullBars);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeBarParameters other) {
      if (other == null) {
        return;
      }
      if (other.HasRangeSize) {
        RangeSize = other.RangeSize;
      }
      if (other.HasMaxNullBars) {
        MaxNullBars = other.MaxNullBars;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RangeSize = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxNullBars = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RangeSize = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxNullBars = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Non-time based bar data response or update.
  /// </summary>
  public sealed partial class NonTimedBarReport : pb::IMessage<NonTimedBarReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NonTimedBarReport> _parser = new pb::MessageParser<NonTimedBarReport>(() => new NonTimedBarReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NonTimedBarReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonTimedBarReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonTimedBarReport(NonTimedBarReport other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      statusCode_ = other.statusCode_;
      details_ = other.details_ != null ? other.details_.Clone() : null;
      invalidatedFromUtcTime_ = other.invalidatedFromUtcTime_;
      invalidatedToUtcTime_ = other.invalidatedToUtcTime_;
      upToUtcTime_ = other.upToUtcTime_;
      truncated_ = other.truncated_;
      isReportComplete_ = other.isReportComplete_;
      constantVolumeBars_ = other.constantVolumeBars_.Clone();
      pointAndFigureBars_ = other.pointAndFigureBars_.Clone();
      renkoBars_ = other.renkoBars_.Clone();
      rangeBars_ = other.rangeBars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonTimedBarReport Clone() {
      return new NonTimedBarReport(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static uint RequestIdDefaultValue = 0;

    private uint requestId_;
    /// <summary>
    /// ID of the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 2;
    private readonly static uint StatusCodeDefaultValue = 0;

    private uint statusCode_;
    /// <summary>
    /// This field is associated with BarReportStatusCode enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StatusCode {
      get { if ((_hasBits0 & 2) != 0) { return statusCode_; } else { return StatusCodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        statusCode_ = value;
      }
    }
    /// <summary>Gets whether the "status_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatusCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "status_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatusCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 3;
    private global::Shared1.Text details_;
    /// <summary>
    /// Optional failure details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Shared1.Text Details {
      get { return details_; }
      set {
        details_ = value;
      }
    }

    /// <summary>Field number for the "invalidated_from_utc_time" field.</summary>
    public const int InvalidatedFromUtcTimeFieldNumber = 4;
    private readonly static long InvalidatedFromUtcTimeDefaultValue = 0L;

    private long invalidatedFromUtcTime_;
    /// <summary>
    /// Time from which bars are invalidated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InvalidatedFromUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return invalidatedFromUtcTime_; } else { return InvalidatedFromUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        invalidatedFromUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "invalidated_from_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidatedFromUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "invalidated_from_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidatedFromUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "invalidated_to_utc_time" field.</summary>
    public const int InvalidatedToUtcTimeFieldNumber = 5;
    private readonly static long InvalidatedToUtcTimeDefaultValue = 0L;

    private long invalidatedToUtcTime_;
    /// <summary>
    /// Time up to which bars are invalidated.
    /// If not set, bars are invalidated up to current time and bar updates are stopped for this subscription.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InvalidatedToUtcTime {
      get { if ((_hasBits0 & 8) != 0) { return invalidatedToUtcTime_; } else { return InvalidatedToUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        invalidatedToUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "invalidated_to_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInvalidatedToUtcTime {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "invalidated_to_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInvalidatedToUtcTime() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "up_to_utc_time" field.</summary>
    public const int UpToUtcTimeFieldNumber = 6;
    private readonly static long UpToUtcTimeDefaultValue = 0L;

    private long upToUtcTime_;
    /// <summary>
    /// Time up to which the quotes were included into bars,
    /// if there were several with the same time-stamp equal to this time
    /// then all are included into the report (UTC).
    /// This time is set only for requests with time range that includes the current time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpToUtcTime {
      get { if ((_hasBits0 & 16) != 0) { return upToUtcTime_; } else { return UpToUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        upToUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "up_to_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUpToUtcTime {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "up_to_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpToUtcTime() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "truncated" field.</summary>
    public const int TruncatedFieldNumber = 7;
    private readonly static bool TruncatedDefaultValue = false;

    private bool truncated_;
    /// <summary>
    /// Request contains dates partially outside of allowed historical data depth.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Truncated {
      get { if ((_hasBits0 & 32) != 0) { return truncated_; } else { return TruncatedDefaultValue; } }
      set {
        _hasBits0 |= 32;
        truncated_ = value;
      }
    }
    /// <summary>Gets whether the "truncated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTruncated {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "truncated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTruncated() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "is_report_complete" field.</summary>
    public const int IsReportCompleteFieldNumber = 8;
    private readonly static bool IsReportCompleteDefaultValue = true;

    private bool isReportComplete_;
    /// <summary>
    /// True means that requested data is complete at the moment, false means more report messages are expected for completeness.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReportComplete {
      get { if ((_hasBits0 & 64) != 0) { return isReportComplete_; } else { return IsReportCompleteDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isReportComplete_ = value;
      }
    }
    /// <summary>Gets whether the "is_report_complete" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsReportComplete {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "is_report_complete" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsReportComplete() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "constant_volume_bars" field.</summary>
    public const int ConstantVolumeBarsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Historical2.ConstantVolumeBar> _repeated_constantVolumeBars_codec
        = pb::FieldCodec.ForMessage(74, global::Historical2.ConstantVolumeBar.Parser);
    private readonly pbc::RepeatedField<global::Historical2.ConstantVolumeBar> constantVolumeBars_ = new pbc::RepeatedField<global::Historical2.ConstantVolumeBar>();
    /// <summary>
    //// Only one of the following repeated fields is specified.
    /// Constant volume bars.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.ConstantVolumeBar> ConstantVolumeBars {
      get { return constantVolumeBars_; }
    }

    /// <summary>Field number for the "point_and_figure_bars" field.</summary>
    public const int PointAndFigureBarsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Historical2.PointAndFigureBar> _repeated_pointAndFigureBars_codec
        = pb::FieldCodec.ForMessage(82, global::Historical2.PointAndFigureBar.Parser);
    private readonly pbc::RepeatedField<global::Historical2.PointAndFigureBar> pointAndFigureBars_ = new pbc::RepeatedField<global::Historical2.PointAndFigureBar>();
    /// <summary>
    /// Point and figure bars.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.PointAndFigureBar> PointAndFigureBars {
      get { return pointAndFigureBars_; }
    }

    /// <summary>Field number for the "renko_bars" field.</summary>
    public const int RenkoBarsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Historical2.RenkoBar> _repeated_renkoBars_codec
        = pb::FieldCodec.ForMessage(90, global::Historical2.RenkoBar.Parser);
    private readonly pbc::RepeatedField<global::Historical2.RenkoBar> renkoBars_ = new pbc::RepeatedField<global::Historical2.RenkoBar>();
    /// <summary>
    /// Renko bars.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.RenkoBar> RenkoBars {
      get { return renkoBars_; }
    }

    /// <summary>Field number for the "range_bars" field.</summary>
    public const int RangeBarsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Historical2.RangeBar> _repeated_rangeBars_codec
        = pb::FieldCodec.ForMessage(98, global::Historical2.RangeBar.Parser);
    private readonly pbc::RepeatedField<global::Historical2.RangeBar> rangeBars_ = new pbc::RepeatedField<global::Historical2.RangeBar>();
    /// <summary>
    /// Range bars.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.RangeBar> RangeBars {
      get { return rangeBars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NonTimedBarReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NonTimedBarReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (StatusCode != other.StatusCode) return false;
      if (!object.Equals(Details, other.Details)) return false;
      if (InvalidatedFromUtcTime != other.InvalidatedFromUtcTime) return false;
      if (InvalidatedToUtcTime != other.InvalidatedToUtcTime) return false;
      if (UpToUtcTime != other.UpToUtcTime) return false;
      if (Truncated != other.Truncated) return false;
      if (IsReportComplete != other.IsReportComplete) return false;
      if(!constantVolumeBars_.Equals(other.constantVolumeBars_)) return false;
      if(!pointAndFigureBars_.Equals(other.pointAndFigureBars_)) return false;
      if(!renkoBars_.Equals(other.renkoBars_)) return false;
      if(!rangeBars_.Equals(other.rangeBars_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasStatusCode) hash ^= StatusCode.GetHashCode();
      if (details_ != null) hash ^= Details.GetHashCode();
      if (HasInvalidatedFromUtcTime) hash ^= InvalidatedFromUtcTime.GetHashCode();
      if (HasInvalidatedToUtcTime) hash ^= InvalidatedToUtcTime.GetHashCode();
      if (HasUpToUtcTime) hash ^= UpToUtcTime.GetHashCode();
      if (HasTruncated) hash ^= Truncated.GetHashCode();
      if (HasIsReportComplete) hash ^= IsReportComplete.GetHashCode();
      hash ^= constantVolumeBars_.GetHashCode();
      hash ^= pointAndFigureBars_.GetHashCode();
      hash ^= renkoBars_.GetHashCode();
      hash ^= rangeBars_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasStatusCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatusCode);
      }
      if (details_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Details);
      }
      if (HasInvalidatedFromUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(InvalidatedFromUtcTime);
      }
      if (HasInvalidatedToUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(InvalidatedToUtcTime);
      }
      if (HasUpToUtcTime) {
        output.WriteRawTag(48);
        output.WriteInt64(UpToUtcTime);
      }
      if (HasTruncated) {
        output.WriteRawTag(56);
        output.WriteBool(Truncated);
      }
      if (HasIsReportComplete) {
        output.WriteRawTag(64);
        output.WriteBool(IsReportComplete);
      }
      constantVolumeBars_.WriteTo(output, _repeated_constantVolumeBars_codec);
      pointAndFigureBars_.WriteTo(output, _repeated_pointAndFigureBars_codec);
      renkoBars_.WriteTo(output, _repeated_renkoBars_codec);
      rangeBars_.WriteTo(output, _repeated_rangeBars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasStatusCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(StatusCode);
      }
      if (details_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Details);
      }
      if (HasInvalidatedFromUtcTime) {
        output.WriteRawTag(32);
        output.WriteSInt64(InvalidatedFromUtcTime);
      }
      if (HasInvalidatedToUtcTime) {
        output.WriteRawTag(40);
        output.WriteSInt64(InvalidatedToUtcTime);
      }
      if (HasUpToUtcTime) {
        output.WriteRawTag(48);
        output.WriteInt64(UpToUtcTime);
      }
      if (HasTruncated) {
        output.WriteRawTag(56);
        output.WriteBool(Truncated);
      }
      if (HasIsReportComplete) {
        output.WriteRawTag(64);
        output.WriteBool(IsReportComplete);
      }
      constantVolumeBars_.WriteTo(ref output, _repeated_constantVolumeBars_codec);
      pointAndFigureBars_.WriteTo(ref output, _repeated_pointAndFigureBars_codec);
      renkoBars_.WriteTo(ref output, _repeated_renkoBars_codec);
      rangeBars_.WriteTo(ref output, _repeated_rangeBars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (HasStatusCode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatusCode);
      }
      if (details_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Details);
      }
      if (HasInvalidatedFromUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(InvalidatedFromUtcTime);
      }
      if (HasInvalidatedToUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(InvalidatedToUtcTime);
      }
      if (HasUpToUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpToUtcTime);
      }
      if (HasTruncated) {
        size += 1 + 1;
      }
      if (HasIsReportComplete) {
        size += 1 + 1;
      }
      size += constantVolumeBars_.CalculateSize(_repeated_constantVolumeBars_codec);
      size += pointAndFigureBars_.CalculateSize(_repeated_pointAndFigureBars_codec);
      size += renkoBars_.CalculateSize(_repeated_renkoBars_codec);
      size += rangeBars_.CalculateSize(_repeated_rangeBars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NonTimedBarReport other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasStatusCode) {
        StatusCode = other.StatusCode;
      }
      if (other.details_ != null) {
        if (details_ == null) {
          Details = new global::Shared1.Text();
        }
        Details.MergeFrom(other.Details);
      }
      if (other.HasInvalidatedFromUtcTime) {
        InvalidatedFromUtcTime = other.InvalidatedFromUtcTime;
      }
      if (other.HasInvalidatedToUtcTime) {
        InvalidatedToUtcTime = other.InvalidatedToUtcTime;
      }
      if (other.HasUpToUtcTime) {
        UpToUtcTime = other.UpToUtcTime;
      }
      if (other.HasTruncated) {
        Truncated = other.Truncated;
      }
      if (other.HasIsReportComplete) {
        IsReportComplete = other.IsReportComplete;
      }
      constantVolumeBars_.Add(other.constantVolumeBars_);
      pointAndFigureBars_.Add(other.pointAndFigureBars_);
      renkoBars_.Add(other.renkoBars_);
      rangeBars_.Add(other.rangeBars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            StatusCode = input.ReadUInt32();
            break;
          }
          case 26: {
            if (details_ == null) {
              Details = new global::Shared1.Text();
            }
            input.ReadMessage(Details);
            break;
          }
          case 32: {
            InvalidatedFromUtcTime = input.ReadSInt64();
            break;
          }
          case 40: {
            InvalidatedToUtcTime = input.ReadSInt64();
            break;
          }
          case 48: {
            UpToUtcTime = input.ReadInt64();
            break;
          }
          case 56: {
            Truncated = input.ReadBool();
            break;
          }
          case 64: {
            IsReportComplete = input.ReadBool();
            break;
          }
          case 74: {
            constantVolumeBars_.AddEntriesFrom(input, _repeated_constantVolumeBars_codec);
            break;
          }
          case 82: {
            pointAndFigureBars_.AddEntriesFrom(input, _repeated_pointAndFigureBars_codec);
            break;
          }
          case 90: {
            renkoBars_.AddEntriesFrom(input, _repeated_renkoBars_codec);
            break;
          }
          case 98: {
            rangeBars_.AddEntriesFrom(input, _repeated_rangeBars_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            StatusCode = input.ReadUInt32();
            break;
          }
          case 26: {
            if (details_ == null) {
              Details = new global::Shared1.Text();
            }
            input.ReadMessage(Details);
            break;
          }
          case 32: {
            InvalidatedFromUtcTime = input.ReadSInt64();
            break;
          }
          case 40: {
            InvalidatedToUtcTime = input.ReadSInt64();
            break;
          }
          case 48: {
            UpToUtcTime = input.ReadInt64();
            break;
          }
          case 56: {
            Truncated = input.ReadBool();
            break;
          }
          case 64: {
            IsReportComplete = input.ReadBool();
            break;
          }
          case 74: {
            constantVolumeBars_.AddEntriesFrom(ref input, _repeated_constantVolumeBars_codec);
            break;
          }
          case 82: {
            pointAndFigureBars_.AddEntriesFrom(ref input, _repeated_pointAndFigureBars_codec);
            break;
          }
          case 90: {
            renkoBars_.AddEntriesFrom(ref input, _repeated_renkoBars_codec);
            break;
          }
          case 98: {
            rangeBars_.AddEntriesFrom(ref input, _repeated_rangeBars_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Parameters of a Constant Volume Bar request.
  /// </summary>
  public sealed partial class ConstantVolumeBarParameters : pb::IMessage<ConstantVolumeBarParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConstantVolumeBarParameters> _parser = new pb::MessageParser<ConstantVolumeBarParameters>(() => new ConstantVolumeBarParameters());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConstantVolumeBarParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstantVolumeBarParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstantVolumeBarParameters(ConstantVolumeBarParameters other) : this() {
      _hasBits0 = other._hasBits0;
      volumeLevel_ = other.volumeLevel_;
      useTickVolume_ = other.useTickVolume_;
      useFlatTicks_ = other.useFlatTicks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstantVolumeBarParameters Clone() {
      return new ConstantVolumeBarParameters(this);
    }

    /// <summary>Field number for the "volume_level" field.</summary>
    public const int VolumeLevelFieldNumber = 1;
    private readonly static uint VolumeLevelDefaultValue = 0;

    private uint volumeLevel_;
    /// <summary>
    /// Volume covered by each bar. Can take a value from 1 to 1000000000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VolumeLevel {
      get { if ((_hasBits0 & 1) != 0) { return volumeLevel_; } else { return VolumeLevelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        volumeLevel_ = value;
      }
    }
    /// <summary>Gets whether the "volume_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVolumeLevel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "volume_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVolumeLevel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "use_tick_volume" field.</summary>
    public const int UseTickVolumeFieldNumber = 2;
    private readonly static bool UseTickVolumeDefaultValue = false;

    private bool useTickVolume_;
    /// <summary>
    /// Determines volume type. If false (default value) then bars are built based on exchange volume,
    /// otherwise they are built based on ticks (number of inside price changes).
    /// Note: WebAPI server rejects requests for contracts without actual volume data (
    ///       ContractMetadata.has_exchange_volume=False).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseTickVolume {
      get { if ((_hasBits0 & 2) != 0) { return useTickVolume_; } else { return UseTickVolumeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        useTickVolume_ = value;
      }
    }
    /// <summary>Gets whether the "use_tick_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseTickVolume {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "use_tick_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseTickVolume() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "use_flat_ticks" field.</summary>
    public const int UseFlatTicksFieldNumber = 3;
    private readonly static bool UseFlatTicksDefaultValue = false;

    private bool useFlatTicks_;
    /// <summary>
    /// Use 0-plus and 0-minus ticks when building bars.
    /// Note: applicable only to tick volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseFlatTicks {
      get { if ((_hasBits0 & 4) != 0) { return useFlatTicks_; } else { return UseFlatTicksDefaultValue; } }
      set {
        _hasBits0 |= 4;
        useFlatTicks_ = value;
      }
    }
    /// <summary>Gets whether the "use_flat_ticks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUseFlatTicks {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "use_flat_ticks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUseFlatTicks() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConstantVolumeBarParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConstantVolumeBarParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VolumeLevel != other.VolumeLevel) return false;
      if (UseTickVolume != other.UseTickVolume) return false;
      if (UseFlatTicks != other.UseFlatTicks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVolumeLevel) hash ^= VolumeLevel.GetHashCode();
      if (HasUseTickVolume) hash ^= UseTickVolume.GetHashCode();
      if (HasUseFlatTicks) hash ^= UseFlatTicks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVolumeLevel) {
        output.WriteRawTag(8);
        output.WriteUInt32(VolumeLevel);
      }
      if (HasUseTickVolume) {
        output.WriteRawTag(16);
        output.WriteBool(UseTickVolume);
      }
      if (HasUseFlatTicks) {
        output.WriteRawTag(24);
        output.WriteBool(UseFlatTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVolumeLevel) {
        output.WriteRawTag(8);
        output.WriteUInt32(VolumeLevel);
      }
      if (HasUseTickVolume) {
        output.WriteRawTag(16);
        output.WriteBool(UseTickVolume);
      }
      if (HasUseFlatTicks) {
        output.WriteRawTag(24);
        output.WriteBool(UseFlatTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVolumeLevel) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VolumeLevel);
      }
      if (HasUseTickVolume) {
        size += 1 + 1;
      }
      if (HasUseFlatTicks) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConstantVolumeBarParameters other) {
      if (other == null) {
        return;
      }
      if (other.HasVolumeLevel) {
        VolumeLevel = other.VolumeLevel;
      }
      if (other.HasUseTickVolume) {
        UseTickVolume = other.UseTickVolume;
      }
      if (other.HasUseFlatTicks) {
        UseFlatTicks = other.UseFlatTicks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VolumeLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            UseTickVolume = input.ReadBool();
            break;
          }
          case 24: {
            UseFlatTicks = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            VolumeLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            UseTickVolume = input.ReadBool();
            break;
          }
          case 24: {
            UseFlatTicks = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Parameters of a Point and Figure request.
  /// </summary>
  public sealed partial class PointAndFigureParameters : pb::IMessage<PointAndFigureParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PointAndFigureParameters> _parser = new pb::MessageParser<PointAndFigureParameters>(() => new PointAndFigureParameters());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointAndFigureParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointAndFigureParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointAndFigureParameters(PointAndFigureParameters other) : this() {
      _hasBits0 = other._hasBits0;
      boxSize_ = other.boxSize_;
      reversal_ = other.reversal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointAndFigureParameters Clone() {
      return new PointAndFigureParameters(this);
    }

    /// <summary>Field number for the "box_size" field.</summary>
    public const int BoxSizeFieldNumber = 1;
    private readonly static uint BoxSizeDefaultValue = 0;

    private uint boxSize_;
    /// <summary>
    /// Specifies the number of tick units represented by each P&amp;F. Can take a value from 1 to 1000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxSize {
      get { if ((_hasBits0 & 1) != 0) { return boxSize_; } else { return BoxSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        boxSize_ = value;
      }
    }
    /// <summary>Gets whether the "box_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBoxSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "box_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBoxSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reversal" field.</summary>
    public const int ReversalFieldNumber = 2;
    private readonly static uint ReversalDefaultValue = 0;

    private uint reversal_;
    /// <summary>
    /// Specifies the number of boxes for P&amp;F direction reversal. Can take a value from 1 to 1000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reversal {
      get { if ((_hasBits0 & 2) != 0) { return reversal_; } else { return ReversalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reversal_ = value;
      }
    }
    /// <summary>Gets whether the "reversal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReversal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "reversal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReversal() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointAndFigureParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointAndFigureParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoxSize != other.BoxSize) return false;
      if (Reversal != other.Reversal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBoxSize) hash ^= BoxSize.GetHashCode();
      if (HasReversal) hash ^= Reversal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBoxSize) {
        output.WriteRawTag(8);
        output.WriteUInt32(BoxSize);
      }
      if (HasReversal) {
        output.WriteRawTag(16);
        output.WriteUInt32(Reversal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBoxSize) {
        output.WriteRawTag(8);
        output.WriteUInt32(BoxSize);
      }
      if (HasReversal) {
        output.WriteRawTag(16);
        output.WriteUInt32(Reversal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBoxSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxSize);
      }
      if (HasReversal) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reversal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointAndFigureParameters other) {
      if (other == null) {
        return;
      }
      if (other.HasBoxSize) {
        BoxSize = other.BoxSize;
      }
      if (other.HasReversal) {
        Reversal = other.Reversal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BoxSize = input.ReadUInt32();
            break;
          }
          case 16: {
            Reversal = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BoxSize = input.ReadUInt32();
            break;
          }
          case 16: {
            Reversal = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Constant Volume Bar.
  /// </summary>
  public sealed partial class ConstantVolumeBar : pb::IMessage<ConstantVolumeBar>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConstantVolumeBar> _parser = new pb::MessageParser<ConstantVolumeBar>(() => new ConstantVolumeBar());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConstantVolumeBar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstantVolumeBar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstantVolumeBar(ConstantVolumeBar other) : this() {
      _hasBits0 = other._hasBits0;
      barUtcTime_ = other.barUtcTime_;
      index_ = other.index_;
      tradeDate_ = other.tradeDate_;
      scaledOpenPrice_ = other.scaledOpenPrice_;
      scaledHighPrice_ = other.scaledHighPrice_;
      scaledLowPrice_ = other.scaledLowPrice_;
      scaledClosePrice_ = other.scaledClosePrice_;
      scaledVolume_ = other.scaledVolume_;
      tickVolume_ = other.tickVolume_;
      continuationSegment_ = other.continuationSegment_ != null ? other.continuationSegment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConstantVolumeBar Clone() {
      return new ConstantVolumeBar(this);
    }

    /// <summary>Field number for the "bar_utc_time" field.</summary>
    public const int BarUtcTimeFieldNumber = 1;
    private readonly static long BarUtcTimeDefaultValue = 0L;

    private long barUtcTime_;
    /// <summary>
    /// Bar start time (UTC), it is set only for the first bar of the following bar start times.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BarUtcTime {
      get { if ((_hasBits0 & 1) != 0) { return barUtcTime_; } else { return BarUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        barUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "bar_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBarUtcTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bar_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBarUtcTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private readonly static int IndexDefaultValue = 0;

    private int index_;
    /// <summary>
    /// Bar index. Different bars with the same bar_utc_time always have different indexes.
    /// It is set only if non-zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { if ((_hasBits0 & 2) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 3;
    private readonly static long TradeDateDefaultValue = 0L;

    private long tradeDate_;
    /// <summary>
    /// Trade date (in time format), it is set only for the first bar of the following trade dates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TradeDate {
      get { if ((_hasBits0 & 4) != 0) { return tradeDate_; } else { return TradeDateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tradeDate_ = value;
      }
    }
    /// <summary>Gets whether the "trade_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTradeDate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "trade_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTradeDate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "scaled_open_price" field.</summary>
    public const int ScaledOpenPriceFieldNumber = 4;
    private readonly static long ScaledOpenPriceDefaultValue = 0L;

    private long scaledOpenPrice_;
    /// <summary>
    /// Open price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledOpenPrice {
      get { if ((_hasBits0 & 8) != 0) { return scaledOpenPrice_; } else { return ScaledOpenPriceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        scaledOpenPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_open_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledOpenPrice {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "scaled_open_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledOpenPrice() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "scaled_high_price" field.</summary>
    public const int ScaledHighPriceFieldNumber = 5;
    private readonly static long ScaledHighPriceDefaultValue = 0L;

    private long scaledHighPrice_;
    /// <summary>
    /// High price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledHighPrice {
      get { if ((_hasBits0 & 16) != 0) { return scaledHighPrice_; } else { return ScaledHighPriceDefaultValue; } }
      set {
        _hasBits0 |= 16;
        scaledHighPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_high_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledHighPrice {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "scaled_high_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledHighPrice() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "scaled_low_price" field.</summary>
    public const int ScaledLowPriceFieldNumber = 6;
    private readonly static long ScaledLowPriceDefaultValue = 0L;

    private long scaledLowPrice_;
    /// <summary>
    /// Low price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledLowPrice {
      get { if ((_hasBits0 & 32) != 0) { return scaledLowPrice_; } else { return ScaledLowPriceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        scaledLowPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_low_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledLowPrice {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "scaled_low_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledLowPrice() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "scaled_close_price" field.</summary>
    public const int ScaledClosePriceFieldNumber = 7;
    private readonly static long ScaledClosePriceDefaultValue = 0L;

    private long scaledClosePrice_;
    /// <summary>
    /// Close or last price (if the bar is not closed yet).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledClosePrice {
      get { if ((_hasBits0 & 64) != 0) { return scaledClosePrice_; } else { return ScaledClosePriceDefaultValue; } }
      set {
        _hasBits0 |= 64;
        scaledClosePrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_close_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledClosePrice {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "scaled_close_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledClosePrice() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "scaled_volume" field.</summary>
    public const int ScaledVolumeFieldNumber = 8;
    private readonly static ulong ScaledVolumeDefaultValue = 0UL;

    private ulong scaledVolume_;
    /// <summary>
    /// Exchange volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScaledVolume {
      get { if ((_hasBits0 & 128) != 0) { return scaledVolume_; } else { return ScaledVolumeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        scaledVolume_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledVolume {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "scaled_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledVolume() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "tick_volume" field.</summary>
    public const int TickVolumeFieldNumber = 9;
    private readonly static ulong TickVolumeDefaultValue = 0UL;

    private ulong tickVolume_;
    /// <summary>
    /// Tick volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TickVolume {
      get { if ((_hasBits0 & 256) != 0) { return tickVolume_; } else { return TickVolumeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        tickVolume_ = value;
      }
    }
    /// <summary>Gets whether the "tick_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTickVolume {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "tick_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTickVolume() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "continuation_segment" field.</summary>
    public const int ContinuationSegmentFieldNumber = 10;
    private global::Historical2.ContinuationSegment continuationSegment_;
    /// <summary>
    /// Continuation segment the bar belongs to, it is set only for the first bar
    /// and for each first bar from the next continuation segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.ContinuationSegment ContinuationSegment {
      get { return continuationSegment_; }
      set {
        continuationSegment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConstantVolumeBar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConstantVolumeBar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BarUtcTime != other.BarUtcTime) return false;
      if (Index != other.Index) return false;
      if (TradeDate != other.TradeDate) return false;
      if (ScaledOpenPrice != other.ScaledOpenPrice) return false;
      if (ScaledHighPrice != other.ScaledHighPrice) return false;
      if (ScaledLowPrice != other.ScaledLowPrice) return false;
      if (ScaledClosePrice != other.ScaledClosePrice) return false;
      if (ScaledVolume != other.ScaledVolume) return false;
      if (TickVolume != other.TickVolume) return false;
      if (!object.Equals(ContinuationSegment, other.ContinuationSegment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBarUtcTime) hash ^= BarUtcTime.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasTradeDate) hash ^= TradeDate.GetHashCode();
      if (HasScaledOpenPrice) hash ^= ScaledOpenPrice.GetHashCode();
      if (HasScaledHighPrice) hash ^= ScaledHighPrice.GetHashCode();
      if (HasScaledLowPrice) hash ^= ScaledLowPrice.GetHashCode();
      if (HasScaledClosePrice) hash ^= ScaledClosePrice.GetHashCode();
      if (HasScaledVolume) hash ^= ScaledVolume.GetHashCode();
      if (HasTickVolume) hash ^= TickVolume.GetHashCode();
      if (continuationSegment_ != null) hash ^= ContinuationSegment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBarUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(BarUtcTime);
      }
      if (HasIndex) {
        output.WriteRawTag(16);
        output.WriteSInt32(Index);
      }
      if (HasTradeDate) {
        output.WriteRawTag(24);
        output.WriteSInt64(TradeDate);
      }
      if (HasScaledOpenPrice) {
        output.WriteRawTag(32);
        output.WriteSInt64(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        output.WriteRawTag(40);
        output.WriteSInt64(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        output.WriteRawTag(48);
        output.WriteSInt64(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        output.WriteRawTag(56);
        output.WriteSInt64(ScaledClosePrice);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(64);
        output.WriteUInt64(ScaledVolume);
      }
      if (HasTickVolume) {
        output.WriteRawTag(72);
        output.WriteUInt64(TickVolume);
      }
      if (continuationSegment_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ContinuationSegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBarUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(BarUtcTime);
      }
      if (HasIndex) {
        output.WriteRawTag(16);
        output.WriteSInt32(Index);
      }
      if (HasTradeDate) {
        output.WriteRawTag(24);
        output.WriteSInt64(TradeDate);
      }
      if (HasScaledOpenPrice) {
        output.WriteRawTag(32);
        output.WriteSInt64(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        output.WriteRawTag(40);
        output.WriteSInt64(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        output.WriteRawTag(48);
        output.WriteSInt64(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        output.WriteRawTag(56);
        output.WriteSInt64(ScaledClosePrice);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(64);
        output.WriteUInt64(ScaledVolume);
      }
      if (HasTickVolume) {
        output.WriteRawTag(72);
        output.WriteUInt64(TickVolume);
      }
      if (continuationSegment_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ContinuationSegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBarUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BarUtcTime);
      }
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (HasTradeDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TradeDate);
      }
      if (HasScaledOpenPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledClosePrice);
      }
      if (HasScaledVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScaledVolume);
      }
      if (HasTickVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TickVolume);
      }
      if (continuationSegment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContinuationSegment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConstantVolumeBar other) {
      if (other == null) {
        return;
      }
      if (other.HasBarUtcTime) {
        BarUtcTime = other.BarUtcTime;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasTradeDate) {
        TradeDate = other.TradeDate;
      }
      if (other.HasScaledOpenPrice) {
        ScaledOpenPrice = other.ScaledOpenPrice;
      }
      if (other.HasScaledHighPrice) {
        ScaledHighPrice = other.ScaledHighPrice;
      }
      if (other.HasScaledLowPrice) {
        ScaledLowPrice = other.ScaledLowPrice;
      }
      if (other.HasScaledClosePrice) {
        ScaledClosePrice = other.ScaledClosePrice;
      }
      if (other.HasScaledVolume) {
        ScaledVolume = other.ScaledVolume;
      }
      if (other.HasTickVolume) {
        TickVolume = other.TickVolume;
      }
      if (other.continuationSegment_ != null) {
        if (continuationSegment_ == null) {
          ContinuationSegment = new global::Historical2.ContinuationSegment();
        }
        ContinuationSegment.MergeFrom(other.ContinuationSegment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BarUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            Index = input.ReadSInt32();
            break;
          }
          case 24: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 32: {
            ScaledOpenPrice = input.ReadSInt64();
            break;
          }
          case 40: {
            ScaledHighPrice = input.ReadSInt64();
            break;
          }
          case 48: {
            ScaledLowPrice = input.ReadSInt64();
            break;
          }
          case 56: {
            ScaledClosePrice = input.ReadSInt64();
            break;
          }
          case 64: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
          case 72: {
            TickVolume = input.ReadUInt64();
            break;
          }
          case 82: {
            if (continuationSegment_ == null) {
              ContinuationSegment = new global::Historical2.ContinuationSegment();
            }
            input.ReadMessage(ContinuationSegment);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BarUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            Index = input.ReadSInt32();
            break;
          }
          case 24: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 32: {
            ScaledOpenPrice = input.ReadSInt64();
            break;
          }
          case 40: {
            ScaledHighPrice = input.ReadSInt64();
            break;
          }
          case 48: {
            ScaledLowPrice = input.ReadSInt64();
            break;
          }
          case 56: {
            ScaledClosePrice = input.ReadSInt64();
            break;
          }
          case 64: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
          case 72: {
            TickVolume = input.ReadUInt64();
            break;
          }
          case 82: {
            if (continuationSegment_ == null) {
              ContinuationSegment = new global::Historical2.ContinuationSegment();
            }
            input.ReadMessage(ContinuationSegment);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Point and Figure bar.
  /// </summary>
  public sealed partial class PointAndFigureBar : pb::IMessage<PointAndFigureBar>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PointAndFigureBar> _parser = new pb::MessageParser<PointAndFigureBar>(() => new PointAndFigureBar());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointAndFigureBar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointAndFigureBar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointAndFigureBar(PointAndFigureBar other) : this() {
      _hasBits0 = other._hasBits0;
      barUtcTime_ = other.barUtcTime_;
      index_ = other.index_;
      tradeDate_ = other.tradeDate_;
      pfScaledOpenPrice_ = other.pfScaledOpenPrice_;
      pfScaledHighPrice_ = other.pfScaledHighPrice_;
      pfScaledLowPrice_ = other.pfScaledLowPrice_;
      pfScaledClosePrice_ = other.pfScaledClosePrice_;
      scaledHighPrice_ = other.scaledHighPrice_;
      scaledLowPrice_ = other.scaledLowPrice_;
      scaledVolume_ = other.scaledVolume_;
      tickVolume_ = other.tickVolume_;
      up_ = other.up_;
      continuationSegment_ = other.continuationSegment_ != null ? other.continuationSegment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointAndFigureBar Clone() {
      return new PointAndFigureBar(this);
    }

    /// <summary>Field number for the "bar_utc_time" field.</summary>
    public const int BarUtcTimeFieldNumber = 1;
    private readonly static long BarUtcTimeDefaultValue = 0L;

    private long barUtcTime_;
    /// <summary>
    /// Bar start time (UTC), it is set only for the first bar of the following bar start times.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BarUtcTime {
      get { if ((_hasBits0 & 1) != 0) { return barUtcTime_; } else { return BarUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        barUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "bar_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBarUtcTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bar_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBarUtcTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private readonly static int IndexDefaultValue = 0;

    private int index_;
    /// <summary>
    /// Bar index. Different bars with the same bar_utc_time always have different indexes.
    /// It is set only if non-zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { if ((_hasBits0 & 2) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 3;
    private readonly static long TradeDateDefaultValue = 0L;

    private long tradeDate_;
    /// <summary>
    /// Trade date (in time format), it is set only for the first bar of the following trade dates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TradeDate {
      get { if ((_hasBits0 & 4) != 0) { return tradeDate_; } else { return TradeDateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tradeDate_ = value;
      }
    }
    /// <summary>Gets whether the "trade_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTradeDate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "trade_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTradeDate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "pf_scaled_open_price" field.</summary>
    public const int PfScaledOpenPriceFieldNumber = 4;
    private readonly static long PfScaledOpenPriceDefaultValue = 0L;

    private long pfScaledOpenPrice_;
    /// <summary>
    /// Open price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PfScaledOpenPrice {
      get { if ((_hasBits0 & 8) != 0) { return pfScaledOpenPrice_; } else { return PfScaledOpenPriceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        pfScaledOpenPrice_ = value;
      }
    }
    /// <summary>Gets whether the "pf_scaled_open_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPfScaledOpenPrice {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "pf_scaled_open_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPfScaledOpenPrice() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pf_scaled_high_price" field.</summary>
    public const int PfScaledHighPriceFieldNumber = 5;
    private readonly static long PfScaledHighPriceDefaultValue = 0L;

    private long pfScaledHighPrice_;
    /// <summary>
    /// High price (rounded to PF box).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PfScaledHighPrice {
      get { if ((_hasBits0 & 16) != 0) { return pfScaledHighPrice_; } else { return PfScaledHighPriceDefaultValue; } }
      set {
        _hasBits0 |= 16;
        pfScaledHighPrice_ = value;
      }
    }
    /// <summary>Gets whether the "pf_scaled_high_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPfScaledHighPrice {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "pf_scaled_high_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPfScaledHighPrice() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "pf_scaled_low_price" field.</summary>
    public const int PfScaledLowPriceFieldNumber = 6;
    private readonly static long PfScaledLowPriceDefaultValue = 0L;

    private long pfScaledLowPrice_;
    /// <summary>
    /// Low price (rounded to PF box).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PfScaledLowPrice {
      get { if ((_hasBits0 & 32) != 0) { return pfScaledLowPrice_; } else { return PfScaledLowPriceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        pfScaledLowPrice_ = value;
      }
    }
    /// <summary>Gets whether the "pf_scaled_low_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPfScaledLowPrice {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "pf_scaled_low_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPfScaledLowPrice() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "pf_scaled_close_price" field.</summary>
    public const int PfScaledClosePriceFieldNumber = 7;
    private readonly static long PfScaledClosePriceDefaultValue = 0L;

    private long pfScaledClosePrice_;
    /// <summary>
    /// Close price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PfScaledClosePrice {
      get { if ((_hasBits0 & 64) != 0) { return pfScaledClosePrice_; } else { return PfScaledClosePriceDefaultValue; } }
      set {
        _hasBits0 |= 64;
        pfScaledClosePrice_ = value;
      }
    }
    /// <summary>Gets whether the "pf_scaled_close_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPfScaledClosePrice {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "pf_scaled_close_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPfScaledClosePrice() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "scaled_high_price" field.</summary>
    public const int ScaledHighPriceFieldNumber = 8;
    private readonly static long ScaledHighPriceDefaultValue = 0L;

    private long scaledHighPrice_;
    /// <summary>
    /// High price (not rounded to PF box).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledHighPrice {
      get { if ((_hasBits0 & 128) != 0) { return scaledHighPrice_; } else { return ScaledHighPriceDefaultValue; } }
      set {
        _hasBits0 |= 128;
        scaledHighPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_high_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledHighPrice {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "scaled_high_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledHighPrice() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "scaled_low_price" field.</summary>
    public const int ScaledLowPriceFieldNumber = 9;
    private readonly static long ScaledLowPriceDefaultValue = 0L;

    private long scaledLowPrice_;
    /// <summary>
    /// Low price (not rounded to PF box).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledLowPrice {
      get { if ((_hasBits0 & 256) != 0) { return scaledLowPrice_; } else { return ScaledLowPriceDefaultValue; } }
      set {
        _hasBits0 |= 256;
        scaledLowPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_low_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledLowPrice {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "scaled_low_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledLowPrice() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "scaled_volume" field.</summary>
    public const int ScaledVolumeFieldNumber = 10;
    private readonly static ulong ScaledVolumeDefaultValue = 0UL;

    private ulong scaledVolume_;
    /// <summary>
    /// Exchange volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScaledVolume {
      get { if ((_hasBits0 & 512) != 0) { return scaledVolume_; } else { return ScaledVolumeDefaultValue; } }
      set {
        _hasBits0 |= 512;
        scaledVolume_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledVolume {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "scaled_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledVolume() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "tick_volume" field.</summary>
    public const int TickVolumeFieldNumber = 11;
    private readonly static ulong TickVolumeDefaultValue = 0UL;

    private ulong tickVolume_;
    /// <summary>
    /// Tick volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TickVolume {
      get { if ((_hasBits0 & 1024) != 0) { return tickVolume_; } else { return TickVolumeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        tickVolume_ = value;
      }
    }
    /// <summary>Gets whether the "tick_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTickVolume {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "tick_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTickVolume() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "up" field.</summary>
    public const int UpFieldNumber = 12;
    private readonly static bool UpDefaultValue = false;

    private bool up_;
    /// <summary>
    /// True if the P&amp;F chart is plotting an X, False if the P&amp;F chart is plotting an O.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Up {
      get { if ((_hasBits0 & 2048) != 0) { return up_; } else { return UpDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        up_ = value;
      }
    }
    /// <summary>Gets whether the "up" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUp {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "up" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUp() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "continuation_segment" field.</summary>
    public const int ContinuationSegmentFieldNumber = 13;
    private global::Historical2.ContinuationSegment continuationSegment_;
    /// <summary>
    /// Continuation segment the bar belongs to, it is set only for the first bar
    /// and for each first bar from the next continuation segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.ContinuationSegment ContinuationSegment {
      get { return continuationSegment_; }
      set {
        continuationSegment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointAndFigureBar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointAndFigureBar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BarUtcTime != other.BarUtcTime) return false;
      if (Index != other.Index) return false;
      if (TradeDate != other.TradeDate) return false;
      if (PfScaledOpenPrice != other.PfScaledOpenPrice) return false;
      if (PfScaledHighPrice != other.PfScaledHighPrice) return false;
      if (PfScaledLowPrice != other.PfScaledLowPrice) return false;
      if (PfScaledClosePrice != other.PfScaledClosePrice) return false;
      if (ScaledHighPrice != other.ScaledHighPrice) return false;
      if (ScaledLowPrice != other.ScaledLowPrice) return false;
      if (ScaledVolume != other.ScaledVolume) return false;
      if (TickVolume != other.TickVolume) return false;
      if (Up != other.Up) return false;
      if (!object.Equals(ContinuationSegment, other.ContinuationSegment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBarUtcTime) hash ^= BarUtcTime.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasTradeDate) hash ^= TradeDate.GetHashCode();
      if (HasPfScaledOpenPrice) hash ^= PfScaledOpenPrice.GetHashCode();
      if (HasPfScaledHighPrice) hash ^= PfScaledHighPrice.GetHashCode();
      if (HasPfScaledLowPrice) hash ^= PfScaledLowPrice.GetHashCode();
      if (HasPfScaledClosePrice) hash ^= PfScaledClosePrice.GetHashCode();
      if (HasScaledHighPrice) hash ^= ScaledHighPrice.GetHashCode();
      if (HasScaledLowPrice) hash ^= ScaledLowPrice.GetHashCode();
      if (HasScaledVolume) hash ^= ScaledVolume.GetHashCode();
      if (HasTickVolume) hash ^= TickVolume.GetHashCode();
      if (HasUp) hash ^= Up.GetHashCode();
      if (continuationSegment_ != null) hash ^= ContinuationSegment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBarUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(BarUtcTime);
      }
      if (HasIndex) {
        output.WriteRawTag(16);
        output.WriteSInt32(Index);
      }
      if (HasTradeDate) {
        output.WriteRawTag(24);
        output.WriteSInt64(TradeDate);
      }
      if (HasPfScaledOpenPrice) {
        output.WriteRawTag(32);
        output.WriteSInt64(PfScaledOpenPrice);
      }
      if (HasPfScaledHighPrice) {
        output.WriteRawTag(40);
        output.WriteSInt64(PfScaledHighPrice);
      }
      if (HasPfScaledLowPrice) {
        output.WriteRawTag(48);
        output.WriteSInt64(PfScaledLowPrice);
      }
      if (HasPfScaledClosePrice) {
        output.WriteRawTag(56);
        output.WriteSInt64(PfScaledClosePrice);
      }
      if (HasScaledHighPrice) {
        output.WriteRawTag(64);
        output.WriteSInt64(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        output.WriteRawTag(72);
        output.WriteSInt64(ScaledLowPrice);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(80);
        output.WriteUInt64(ScaledVolume);
      }
      if (HasTickVolume) {
        output.WriteRawTag(88);
        output.WriteUInt64(TickVolume);
      }
      if (HasUp) {
        output.WriteRawTag(96);
        output.WriteBool(Up);
      }
      if (continuationSegment_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ContinuationSegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBarUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(BarUtcTime);
      }
      if (HasIndex) {
        output.WriteRawTag(16);
        output.WriteSInt32(Index);
      }
      if (HasTradeDate) {
        output.WriteRawTag(24);
        output.WriteSInt64(TradeDate);
      }
      if (HasPfScaledOpenPrice) {
        output.WriteRawTag(32);
        output.WriteSInt64(PfScaledOpenPrice);
      }
      if (HasPfScaledHighPrice) {
        output.WriteRawTag(40);
        output.WriteSInt64(PfScaledHighPrice);
      }
      if (HasPfScaledLowPrice) {
        output.WriteRawTag(48);
        output.WriteSInt64(PfScaledLowPrice);
      }
      if (HasPfScaledClosePrice) {
        output.WriteRawTag(56);
        output.WriteSInt64(PfScaledClosePrice);
      }
      if (HasScaledHighPrice) {
        output.WriteRawTag(64);
        output.WriteSInt64(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        output.WriteRawTag(72);
        output.WriteSInt64(ScaledLowPrice);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(80);
        output.WriteUInt64(ScaledVolume);
      }
      if (HasTickVolume) {
        output.WriteRawTag(88);
        output.WriteUInt64(TickVolume);
      }
      if (HasUp) {
        output.WriteRawTag(96);
        output.WriteBool(Up);
      }
      if (continuationSegment_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ContinuationSegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBarUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BarUtcTime);
      }
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (HasTradeDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TradeDate);
      }
      if (HasPfScaledOpenPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(PfScaledOpenPrice);
      }
      if (HasPfScaledHighPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(PfScaledHighPrice);
      }
      if (HasPfScaledLowPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(PfScaledLowPrice);
      }
      if (HasPfScaledClosePrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(PfScaledClosePrice);
      }
      if (HasScaledHighPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledLowPrice);
      }
      if (HasScaledVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScaledVolume);
      }
      if (HasTickVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TickVolume);
      }
      if (HasUp) {
        size += 1 + 1;
      }
      if (continuationSegment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContinuationSegment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointAndFigureBar other) {
      if (other == null) {
        return;
      }
      if (other.HasBarUtcTime) {
        BarUtcTime = other.BarUtcTime;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasTradeDate) {
        TradeDate = other.TradeDate;
      }
      if (other.HasPfScaledOpenPrice) {
        PfScaledOpenPrice = other.PfScaledOpenPrice;
      }
      if (other.HasPfScaledHighPrice) {
        PfScaledHighPrice = other.PfScaledHighPrice;
      }
      if (other.HasPfScaledLowPrice) {
        PfScaledLowPrice = other.PfScaledLowPrice;
      }
      if (other.HasPfScaledClosePrice) {
        PfScaledClosePrice = other.PfScaledClosePrice;
      }
      if (other.HasScaledHighPrice) {
        ScaledHighPrice = other.ScaledHighPrice;
      }
      if (other.HasScaledLowPrice) {
        ScaledLowPrice = other.ScaledLowPrice;
      }
      if (other.HasScaledVolume) {
        ScaledVolume = other.ScaledVolume;
      }
      if (other.HasTickVolume) {
        TickVolume = other.TickVolume;
      }
      if (other.HasUp) {
        Up = other.Up;
      }
      if (other.continuationSegment_ != null) {
        if (continuationSegment_ == null) {
          ContinuationSegment = new global::Historical2.ContinuationSegment();
        }
        ContinuationSegment.MergeFrom(other.ContinuationSegment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BarUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            Index = input.ReadSInt32();
            break;
          }
          case 24: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 32: {
            PfScaledOpenPrice = input.ReadSInt64();
            break;
          }
          case 40: {
            PfScaledHighPrice = input.ReadSInt64();
            break;
          }
          case 48: {
            PfScaledLowPrice = input.ReadSInt64();
            break;
          }
          case 56: {
            PfScaledClosePrice = input.ReadSInt64();
            break;
          }
          case 64: {
            ScaledHighPrice = input.ReadSInt64();
            break;
          }
          case 72: {
            ScaledLowPrice = input.ReadSInt64();
            break;
          }
          case 80: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
          case 88: {
            TickVolume = input.ReadUInt64();
            break;
          }
          case 96: {
            Up = input.ReadBool();
            break;
          }
          case 106: {
            if (continuationSegment_ == null) {
              ContinuationSegment = new global::Historical2.ContinuationSegment();
            }
            input.ReadMessage(ContinuationSegment);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BarUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            Index = input.ReadSInt32();
            break;
          }
          case 24: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 32: {
            PfScaledOpenPrice = input.ReadSInt64();
            break;
          }
          case 40: {
            PfScaledHighPrice = input.ReadSInt64();
            break;
          }
          case 48: {
            PfScaledLowPrice = input.ReadSInt64();
            break;
          }
          case 56: {
            PfScaledClosePrice = input.ReadSInt64();
            break;
          }
          case 64: {
            ScaledHighPrice = input.ReadSInt64();
            break;
          }
          case 72: {
            ScaledLowPrice = input.ReadSInt64();
            break;
          }
          case 80: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
          case 88: {
            TickVolume = input.ReadUInt64();
            break;
          }
          case 96: {
            Up = input.ReadBool();
            break;
          }
          case 106: {
            if (continuationSegment_ == null) {
              ContinuationSegment = new global::Historical2.ContinuationSegment();
            }
            input.ReadMessage(ContinuationSegment);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Renko bar.
  /// </summary>
  public sealed partial class RenkoBar : pb::IMessage<RenkoBar>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RenkoBar> _parser = new pb::MessageParser<RenkoBar>(() => new RenkoBar());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenkoBar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenkoBar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenkoBar(RenkoBar other) : this() {
      _hasBits0 = other._hasBits0;
      barUtcTime_ = other.barUtcTime_;
      index_ = other.index_;
      tradeDate_ = other.tradeDate_;
      scaledOpenPrice_ = other.scaledOpenPrice_;
      scaledHighPrice_ = other.scaledHighPrice_;
      scaledLowPrice_ = other.scaledLowPrice_;
      scaledClosePrice_ = other.scaledClosePrice_;
      scaledRenkoHighPrice_ = other.scaledRenkoHighPrice_;
      scaledRenkoLowPrice_ = other.scaledRenkoLowPrice_;
      up_ = other.up_;
      scaledVolume_ = other.scaledVolume_;
      tickVolume_ = other.tickVolume_;
      firstBarOfSession_ = other.firstBarOfSession_;
      continuationSegment_ = other.continuationSegment_ != null ? other.continuationSegment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenkoBar Clone() {
      return new RenkoBar(this);
    }

    /// <summary>Field number for the "bar_utc_time" field.</summary>
    public const int BarUtcTimeFieldNumber = 1;
    private readonly static long BarUtcTimeDefaultValue = 0L;

    private long barUtcTime_;
    /// <summary>
    /// Bar start time (UTC), it is set only for the first bar of the following bar start times.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BarUtcTime {
      get { if ((_hasBits0 & 1) != 0) { return barUtcTime_; } else { return BarUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        barUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "bar_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBarUtcTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bar_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBarUtcTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private readonly static int IndexDefaultValue = 0;

    private int index_;
    /// <summary>
    /// Bar index. Different bars with the same bar_utc_time always have different indexes.
    /// It is set only if non-zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { if ((_hasBits0 & 2) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 3;
    private readonly static long TradeDateDefaultValue = 0L;

    private long tradeDate_;
    /// <summary>
    /// Trade date (in time format), it is set only for the first bar of the following trade dates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TradeDate {
      get { if ((_hasBits0 & 4) != 0) { return tradeDate_; } else { return TradeDateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tradeDate_ = value;
      }
    }
    /// <summary>Gets whether the "trade_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTradeDate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "trade_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTradeDate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "scaled_open_price" field.</summary>
    public const int ScaledOpenPriceFieldNumber = 4;
    private readonly static long ScaledOpenPriceDefaultValue = 0L;

    private long scaledOpenPrice_;
    /// <summary>
    /// Open price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledOpenPrice {
      get { if ((_hasBits0 & 8) != 0) { return scaledOpenPrice_; } else { return ScaledOpenPriceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        scaledOpenPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_open_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledOpenPrice {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "scaled_open_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledOpenPrice() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "scaled_high_price" field.</summary>
    public const int ScaledHighPriceFieldNumber = 5;
    private readonly static long ScaledHighPriceDefaultValue = 0L;

    private long scaledHighPrice_;
    /// <summary>
    /// High price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledHighPrice {
      get { if ((_hasBits0 & 16) != 0) { return scaledHighPrice_; } else { return ScaledHighPriceDefaultValue; } }
      set {
        _hasBits0 |= 16;
        scaledHighPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_high_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledHighPrice {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "scaled_high_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledHighPrice() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "scaled_low_price" field.</summary>
    public const int ScaledLowPriceFieldNumber = 6;
    private readonly static long ScaledLowPriceDefaultValue = 0L;

    private long scaledLowPrice_;
    /// <summary>
    /// Low price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledLowPrice {
      get { if ((_hasBits0 & 32) != 0) { return scaledLowPrice_; } else { return ScaledLowPriceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        scaledLowPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_low_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledLowPrice {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "scaled_low_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledLowPrice() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "scaled_close_price" field.</summary>
    public const int ScaledClosePriceFieldNumber = 7;
    private readonly static long ScaledClosePriceDefaultValue = 0L;

    private long scaledClosePrice_;
    /// <summary>
    /// Close or last price (if the bar is not closed yet).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledClosePrice {
      get { if ((_hasBits0 & 64) != 0) { return scaledClosePrice_; } else { return ScaledClosePriceDefaultValue; } }
      set {
        _hasBits0 |= 64;
        scaledClosePrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_close_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledClosePrice {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "scaled_close_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledClosePrice() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "scaled_renko_high_price" field.</summary>
    public const int ScaledRenkoHighPriceFieldNumber = 8;
    private readonly static long ScaledRenkoHighPriceDefaultValue = 0L;

    private long scaledRenkoHighPrice_;
    /// <summary>
    /// Maximum of open and close prices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledRenkoHighPrice {
      get { if ((_hasBits0 & 128) != 0) { return scaledRenkoHighPrice_; } else { return ScaledRenkoHighPriceDefaultValue; } }
      set {
        _hasBits0 |= 128;
        scaledRenkoHighPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_renko_high_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledRenkoHighPrice {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "scaled_renko_high_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledRenkoHighPrice() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "scaled_renko_low_price" field.</summary>
    public const int ScaledRenkoLowPriceFieldNumber = 9;
    private readonly static long ScaledRenkoLowPriceDefaultValue = 0L;

    private long scaledRenkoLowPrice_;
    /// <summary>
    /// Minimum of open and close prices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledRenkoLowPrice {
      get { if ((_hasBits0 & 256) != 0) { return scaledRenkoLowPrice_; } else { return ScaledRenkoLowPriceDefaultValue; } }
      set {
        _hasBits0 |= 256;
        scaledRenkoLowPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_renko_low_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledRenkoLowPrice {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "scaled_renko_low_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledRenkoLowPrice() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "up" field.</summary>
    public const int UpFieldNumber = 10;
    private readonly static bool UpDefaultValue = false;

    private bool up_;
    /// <summary>
    /// Defines how renko bar is going to be closed (up or down).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Up {
      get { if ((_hasBits0 & 512) != 0) { return up_; } else { return UpDefaultValue; } }
      set {
        _hasBits0 |= 512;
        up_ = value;
      }
    }
    /// <summary>Gets whether the "up" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUp {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "up" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUp() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "scaled_volume" field.</summary>
    public const int ScaledVolumeFieldNumber = 11;
    private readonly static ulong ScaledVolumeDefaultValue = 0UL;

    private ulong scaledVolume_;
    /// <summary>
    /// Exchange volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScaledVolume {
      get { if ((_hasBits0 & 1024) != 0) { return scaledVolume_; } else { return ScaledVolumeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        scaledVolume_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledVolume {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "scaled_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledVolume() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "tick_volume" field.</summary>
    public const int TickVolumeFieldNumber = 12;
    private readonly static ulong TickVolumeDefaultValue = 0UL;

    private ulong tickVolume_;
    /// <summary>
    /// Tick volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TickVolume {
      get { if ((_hasBits0 & 2048) != 0) { return tickVolume_; } else { return TickVolumeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        tickVolume_ = value;
      }
    }
    /// <summary>Gets whether the "tick_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTickVolume {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "tick_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTickVolume() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "first_bar_of_session" field.</summary>
    public const int FirstBarOfSessionFieldNumber = 13;
    private readonly static bool FirstBarOfSessionDefaultValue = false;

    private bool firstBarOfSession_;
    /// <summary>
    /// If this bar is the first bar of a session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FirstBarOfSession {
      get { if ((_hasBits0 & 4096) != 0) { return firstBarOfSession_; } else { return FirstBarOfSessionDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        firstBarOfSession_ = value;
      }
    }
    /// <summary>Gets whether the "first_bar_of_session" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFirstBarOfSession {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "first_bar_of_session" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFirstBarOfSession() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "continuation_segment" field.</summary>
    public const int ContinuationSegmentFieldNumber = 14;
    private global::Historical2.ContinuationSegment continuationSegment_;
    /// <summary>
    /// Continuation segment the bar belongs to, it is set only for the first bar
    /// and for each first bar from the next continuation segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.ContinuationSegment ContinuationSegment {
      get { return continuationSegment_; }
      set {
        continuationSegment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenkoBar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenkoBar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BarUtcTime != other.BarUtcTime) return false;
      if (Index != other.Index) return false;
      if (TradeDate != other.TradeDate) return false;
      if (ScaledOpenPrice != other.ScaledOpenPrice) return false;
      if (ScaledHighPrice != other.ScaledHighPrice) return false;
      if (ScaledLowPrice != other.ScaledLowPrice) return false;
      if (ScaledClosePrice != other.ScaledClosePrice) return false;
      if (ScaledRenkoHighPrice != other.ScaledRenkoHighPrice) return false;
      if (ScaledRenkoLowPrice != other.ScaledRenkoLowPrice) return false;
      if (Up != other.Up) return false;
      if (ScaledVolume != other.ScaledVolume) return false;
      if (TickVolume != other.TickVolume) return false;
      if (FirstBarOfSession != other.FirstBarOfSession) return false;
      if (!object.Equals(ContinuationSegment, other.ContinuationSegment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBarUtcTime) hash ^= BarUtcTime.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasTradeDate) hash ^= TradeDate.GetHashCode();
      if (HasScaledOpenPrice) hash ^= ScaledOpenPrice.GetHashCode();
      if (HasScaledHighPrice) hash ^= ScaledHighPrice.GetHashCode();
      if (HasScaledLowPrice) hash ^= ScaledLowPrice.GetHashCode();
      if (HasScaledClosePrice) hash ^= ScaledClosePrice.GetHashCode();
      if (HasScaledRenkoHighPrice) hash ^= ScaledRenkoHighPrice.GetHashCode();
      if (HasScaledRenkoLowPrice) hash ^= ScaledRenkoLowPrice.GetHashCode();
      if (HasUp) hash ^= Up.GetHashCode();
      if (HasScaledVolume) hash ^= ScaledVolume.GetHashCode();
      if (HasTickVolume) hash ^= TickVolume.GetHashCode();
      if (HasFirstBarOfSession) hash ^= FirstBarOfSession.GetHashCode();
      if (continuationSegment_ != null) hash ^= ContinuationSegment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBarUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(BarUtcTime);
      }
      if (HasIndex) {
        output.WriteRawTag(16);
        output.WriteSInt32(Index);
      }
      if (HasTradeDate) {
        output.WriteRawTag(24);
        output.WriteSInt64(TradeDate);
      }
      if (HasScaledOpenPrice) {
        output.WriteRawTag(32);
        output.WriteSInt64(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        output.WriteRawTag(40);
        output.WriteSInt64(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        output.WriteRawTag(48);
        output.WriteSInt64(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        output.WriteRawTag(56);
        output.WriteSInt64(ScaledClosePrice);
      }
      if (HasScaledRenkoHighPrice) {
        output.WriteRawTag(64);
        output.WriteSInt64(ScaledRenkoHighPrice);
      }
      if (HasScaledRenkoLowPrice) {
        output.WriteRawTag(72);
        output.WriteSInt64(ScaledRenkoLowPrice);
      }
      if (HasUp) {
        output.WriteRawTag(80);
        output.WriteBool(Up);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(88);
        output.WriteUInt64(ScaledVolume);
      }
      if (HasTickVolume) {
        output.WriteRawTag(96);
        output.WriteUInt64(TickVolume);
      }
      if (HasFirstBarOfSession) {
        output.WriteRawTag(104);
        output.WriteBool(FirstBarOfSession);
      }
      if (continuationSegment_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ContinuationSegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBarUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(BarUtcTime);
      }
      if (HasIndex) {
        output.WriteRawTag(16);
        output.WriteSInt32(Index);
      }
      if (HasTradeDate) {
        output.WriteRawTag(24);
        output.WriteSInt64(TradeDate);
      }
      if (HasScaledOpenPrice) {
        output.WriteRawTag(32);
        output.WriteSInt64(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        output.WriteRawTag(40);
        output.WriteSInt64(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        output.WriteRawTag(48);
        output.WriteSInt64(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        output.WriteRawTag(56);
        output.WriteSInt64(ScaledClosePrice);
      }
      if (HasScaledRenkoHighPrice) {
        output.WriteRawTag(64);
        output.WriteSInt64(ScaledRenkoHighPrice);
      }
      if (HasScaledRenkoLowPrice) {
        output.WriteRawTag(72);
        output.WriteSInt64(ScaledRenkoLowPrice);
      }
      if (HasUp) {
        output.WriteRawTag(80);
        output.WriteBool(Up);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(88);
        output.WriteUInt64(ScaledVolume);
      }
      if (HasTickVolume) {
        output.WriteRawTag(96);
        output.WriteUInt64(TickVolume);
      }
      if (HasFirstBarOfSession) {
        output.WriteRawTag(104);
        output.WriteBool(FirstBarOfSession);
      }
      if (continuationSegment_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ContinuationSegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBarUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BarUtcTime);
      }
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (HasTradeDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TradeDate);
      }
      if (HasScaledOpenPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledClosePrice);
      }
      if (HasScaledRenkoHighPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledRenkoHighPrice);
      }
      if (HasScaledRenkoLowPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledRenkoLowPrice);
      }
      if (HasUp) {
        size += 1 + 1;
      }
      if (HasScaledVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScaledVolume);
      }
      if (HasTickVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TickVolume);
      }
      if (HasFirstBarOfSession) {
        size += 1 + 1;
      }
      if (continuationSegment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContinuationSegment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenkoBar other) {
      if (other == null) {
        return;
      }
      if (other.HasBarUtcTime) {
        BarUtcTime = other.BarUtcTime;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasTradeDate) {
        TradeDate = other.TradeDate;
      }
      if (other.HasScaledOpenPrice) {
        ScaledOpenPrice = other.ScaledOpenPrice;
      }
      if (other.HasScaledHighPrice) {
        ScaledHighPrice = other.ScaledHighPrice;
      }
      if (other.HasScaledLowPrice) {
        ScaledLowPrice = other.ScaledLowPrice;
      }
      if (other.HasScaledClosePrice) {
        ScaledClosePrice = other.ScaledClosePrice;
      }
      if (other.HasScaledRenkoHighPrice) {
        ScaledRenkoHighPrice = other.ScaledRenkoHighPrice;
      }
      if (other.HasScaledRenkoLowPrice) {
        ScaledRenkoLowPrice = other.ScaledRenkoLowPrice;
      }
      if (other.HasUp) {
        Up = other.Up;
      }
      if (other.HasScaledVolume) {
        ScaledVolume = other.ScaledVolume;
      }
      if (other.HasTickVolume) {
        TickVolume = other.TickVolume;
      }
      if (other.HasFirstBarOfSession) {
        FirstBarOfSession = other.FirstBarOfSession;
      }
      if (other.continuationSegment_ != null) {
        if (continuationSegment_ == null) {
          ContinuationSegment = new global::Historical2.ContinuationSegment();
        }
        ContinuationSegment.MergeFrom(other.ContinuationSegment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BarUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            Index = input.ReadSInt32();
            break;
          }
          case 24: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 32: {
            ScaledOpenPrice = input.ReadSInt64();
            break;
          }
          case 40: {
            ScaledHighPrice = input.ReadSInt64();
            break;
          }
          case 48: {
            ScaledLowPrice = input.ReadSInt64();
            break;
          }
          case 56: {
            ScaledClosePrice = input.ReadSInt64();
            break;
          }
          case 64: {
            ScaledRenkoHighPrice = input.ReadSInt64();
            break;
          }
          case 72: {
            ScaledRenkoLowPrice = input.ReadSInt64();
            break;
          }
          case 80: {
            Up = input.ReadBool();
            break;
          }
          case 88: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
          case 96: {
            TickVolume = input.ReadUInt64();
            break;
          }
          case 104: {
            FirstBarOfSession = input.ReadBool();
            break;
          }
          case 114: {
            if (continuationSegment_ == null) {
              ContinuationSegment = new global::Historical2.ContinuationSegment();
            }
            input.ReadMessage(ContinuationSegment);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BarUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            Index = input.ReadSInt32();
            break;
          }
          case 24: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 32: {
            ScaledOpenPrice = input.ReadSInt64();
            break;
          }
          case 40: {
            ScaledHighPrice = input.ReadSInt64();
            break;
          }
          case 48: {
            ScaledLowPrice = input.ReadSInt64();
            break;
          }
          case 56: {
            ScaledClosePrice = input.ReadSInt64();
            break;
          }
          case 64: {
            ScaledRenkoHighPrice = input.ReadSInt64();
            break;
          }
          case 72: {
            ScaledRenkoLowPrice = input.ReadSInt64();
            break;
          }
          case 80: {
            Up = input.ReadBool();
            break;
          }
          case 88: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
          case 96: {
            TickVolume = input.ReadUInt64();
            break;
          }
          case 104: {
            FirstBarOfSession = input.ReadBool();
            break;
          }
          case 114: {
            if (continuationSegment_ == null) {
              ContinuationSegment = new global::Historical2.ContinuationSegment();
            }
            input.ReadMessage(ContinuationSegment);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Range bar.
  /// </summary>
  public sealed partial class RangeBar : pb::IMessage<RangeBar>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RangeBar> _parser = new pb::MessageParser<RangeBar>(() => new RangeBar());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeBar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeBar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeBar(RangeBar other) : this() {
      _hasBits0 = other._hasBits0;
      barUtcTime_ = other.barUtcTime_;
      index_ = other.index_;
      tradeDate_ = other.tradeDate_;
      scaledOpenPrice_ = other.scaledOpenPrice_;
      scaledHighPrice_ = other.scaledHighPrice_;
      scaledLowPrice_ = other.scaledLowPrice_;
      scaledClosePrice_ = other.scaledClosePrice_;
      scaledVolume_ = other.scaledVolume_;
      tickVolume_ = other.tickVolume_;
      continuationSegment_ = other.continuationSegment_ != null ? other.continuationSegment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeBar Clone() {
      return new RangeBar(this);
    }

    /// <summary>Field number for the "bar_utc_time" field.</summary>
    public const int BarUtcTimeFieldNumber = 1;
    private readonly static long BarUtcTimeDefaultValue = 0L;

    private long barUtcTime_;
    /// <summary>
    /// Bar start time (UTC), it is set only for the first bar of the following bar start times.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BarUtcTime {
      get { if ((_hasBits0 & 1) != 0) { return barUtcTime_; } else { return BarUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        barUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "bar_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBarUtcTime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bar_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBarUtcTime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private readonly static int IndexDefaultValue = 0;

    private int index_;
    /// <summary>
    /// Bar index. Different bars with the same bar_utc_time always have different indexes.
    /// It is set only if non-zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { if ((_hasBits0 & 2) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 3;
    private readonly static long TradeDateDefaultValue = 0L;

    private long tradeDate_;
    /// <summary>
    /// Trade date (in time format), it is set only for the first bar of the following trade dates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TradeDate {
      get { if ((_hasBits0 & 4) != 0) { return tradeDate_; } else { return TradeDateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tradeDate_ = value;
      }
    }
    /// <summary>Gets whether the "trade_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTradeDate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "trade_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTradeDate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "scaled_open_price" field.</summary>
    public const int ScaledOpenPriceFieldNumber = 4;
    private readonly static long ScaledOpenPriceDefaultValue = 0L;

    private long scaledOpenPrice_;
    /// <summary>
    /// Open price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledOpenPrice {
      get { if ((_hasBits0 & 8) != 0) { return scaledOpenPrice_; } else { return ScaledOpenPriceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        scaledOpenPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_open_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledOpenPrice {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "scaled_open_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledOpenPrice() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "scaled_high_price" field.</summary>
    public const int ScaledHighPriceFieldNumber = 5;
    private readonly static long ScaledHighPriceDefaultValue = 0L;

    private long scaledHighPrice_;
    /// <summary>
    /// High price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledHighPrice {
      get { if ((_hasBits0 & 16) != 0) { return scaledHighPrice_; } else { return ScaledHighPriceDefaultValue; } }
      set {
        _hasBits0 |= 16;
        scaledHighPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_high_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledHighPrice {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "scaled_high_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledHighPrice() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "scaled_low_price" field.</summary>
    public const int ScaledLowPriceFieldNumber = 6;
    private readonly static long ScaledLowPriceDefaultValue = 0L;

    private long scaledLowPrice_;
    /// <summary>
    /// Low price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledLowPrice {
      get { if ((_hasBits0 & 32) != 0) { return scaledLowPrice_; } else { return ScaledLowPriceDefaultValue; } }
      set {
        _hasBits0 |= 32;
        scaledLowPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_low_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledLowPrice {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "scaled_low_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledLowPrice() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "scaled_close_price" field.</summary>
    public const int ScaledClosePriceFieldNumber = 7;
    private readonly static long ScaledClosePriceDefaultValue = 0L;

    private long scaledClosePrice_;
    /// <summary>
    /// Close or last price (if the bar is not closed yet).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScaledClosePrice {
      get { if ((_hasBits0 & 64) != 0) { return scaledClosePrice_; } else { return ScaledClosePriceDefaultValue; } }
      set {
        _hasBits0 |= 64;
        scaledClosePrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_close_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledClosePrice {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "scaled_close_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledClosePrice() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "scaled_volume" field.</summary>
    public const int ScaledVolumeFieldNumber = 8;
    private readonly static ulong ScaledVolumeDefaultValue = 0UL;

    private ulong scaledVolume_;
    /// <summary>
    /// Exchange volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScaledVolume {
      get { if ((_hasBits0 & 128) != 0) { return scaledVolume_; } else { return ScaledVolumeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        scaledVolume_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledVolume {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "scaled_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledVolume() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "tick_volume" field.</summary>
    public const int TickVolumeFieldNumber = 9;
    private readonly static ulong TickVolumeDefaultValue = 0UL;

    private ulong tickVolume_;
    /// <summary>
    /// Tick volume.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TickVolume {
      get { if ((_hasBits0 & 256) != 0) { return tickVolume_; } else { return TickVolumeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        tickVolume_ = value;
      }
    }
    /// <summary>Gets whether the "tick_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTickVolume {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "tick_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTickVolume() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "continuation_segment" field.</summary>
    public const int ContinuationSegmentFieldNumber = 10;
    private global::Historical2.ContinuationSegment continuationSegment_;
    /// <summary>
    /// Continuation segment the bar belongs to, it is set only for the first bar
    /// and for each first bar from the next continuation segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.ContinuationSegment ContinuationSegment {
      get { return continuationSegment_; }
      set {
        continuationSegment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeBar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeBar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BarUtcTime != other.BarUtcTime) return false;
      if (Index != other.Index) return false;
      if (TradeDate != other.TradeDate) return false;
      if (ScaledOpenPrice != other.ScaledOpenPrice) return false;
      if (ScaledHighPrice != other.ScaledHighPrice) return false;
      if (ScaledLowPrice != other.ScaledLowPrice) return false;
      if (ScaledClosePrice != other.ScaledClosePrice) return false;
      if (ScaledVolume != other.ScaledVolume) return false;
      if (TickVolume != other.TickVolume) return false;
      if (!object.Equals(ContinuationSegment, other.ContinuationSegment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBarUtcTime) hash ^= BarUtcTime.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasTradeDate) hash ^= TradeDate.GetHashCode();
      if (HasScaledOpenPrice) hash ^= ScaledOpenPrice.GetHashCode();
      if (HasScaledHighPrice) hash ^= ScaledHighPrice.GetHashCode();
      if (HasScaledLowPrice) hash ^= ScaledLowPrice.GetHashCode();
      if (HasScaledClosePrice) hash ^= ScaledClosePrice.GetHashCode();
      if (HasScaledVolume) hash ^= ScaledVolume.GetHashCode();
      if (HasTickVolume) hash ^= TickVolume.GetHashCode();
      if (continuationSegment_ != null) hash ^= ContinuationSegment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasBarUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(BarUtcTime);
      }
      if (HasIndex) {
        output.WriteRawTag(16);
        output.WriteSInt32(Index);
      }
      if (HasTradeDate) {
        output.WriteRawTag(24);
        output.WriteSInt64(TradeDate);
      }
      if (HasScaledOpenPrice) {
        output.WriteRawTag(32);
        output.WriteSInt64(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        output.WriteRawTag(40);
        output.WriteSInt64(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        output.WriteRawTag(48);
        output.WriteSInt64(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        output.WriteRawTag(56);
        output.WriteSInt64(ScaledClosePrice);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(64);
        output.WriteUInt64(ScaledVolume);
      }
      if (HasTickVolume) {
        output.WriteRawTag(72);
        output.WriteUInt64(TickVolume);
      }
      if (continuationSegment_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ContinuationSegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasBarUtcTime) {
        output.WriteRawTag(8);
        output.WriteSInt64(BarUtcTime);
      }
      if (HasIndex) {
        output.WriteRawTag(16);
        output.WriteSInt32(Index);
      }
      if (HasTradeDate) {
        output.WriteRawTag(24);
        output.WriteSInt64(TradeDate);
      }
      if (HasScaledOpenPrice) {
        output.WriteRawTag(32);
        output.WriteSInt64(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        output.WriteRawTag(40);
        output.WriteSInt64(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        output.WriteRawTag(48);
        output.WriteSInt64(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        output.WriteRawTag(56);
        output.WriteSInt64(ScaledClosePrice);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(64);
        output.WriteUInt64(ScaledVolume);
      }
      if (HasTickVolume) {
        output.WriteRawTag(72);
        output.WriteUInt64(TickVolume);
      }
      if (continuationSegment_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ContinuationSegment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBarUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BarUtcTime);
      }
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
      }
      if (HasTradeDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TradeDate);
      }
      if (HasScaledOpenPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledOpenPrice);
      }
      if (HasScaledHighPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledHighPrice);
      }
      if (HasScaledLowPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledLowPrice);
      }
      if (HasScaledClosePrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScaledClosePrice);
      }
      if (HasScaledVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScaledVolume);
      }
      if (HasTickVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TickVolume);
      }
      if (continuationSegment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContinuationSegment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeBar other) {
      if (other == null) {
        return;
      }
      if (other.HasBarUtcTime) {
        BarUtcTime = other.BarUtcTime;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasTradeDate) {
        TradeDate = other.TradeDate;
      }
      if (other.HasScaledOpenPrice) {
        ScaledOpenPrice = other.ScaledOpenPrice;
      }
      if (other.HasScaledHighPrice) {
        ScaledHighPrice = other.ScaledHighPrice;
      }
      if (other.HasScaledLowPrice) {
        ScaledLowPrice = other.ScaledLowPrice;
      }
      if (other.HasScaledClosePrice) {
        ScaledClosePrice = other.ScaledClosePrice;
      }
      if (other.HasScaledVolume) {
        ScaledVolume = other.ScaledVolume;
      }
      if (other.HasTickVolume) {
        TickVolume = other.TickVolume;
      }
      if (other.continuationSegment_ != null) {
        if (continuationSegment_ == null) {
          ContinuationSegment = new global::Historical2.ContinuationSegment();
        }
        ContinuationSegment.MergeFrom(other.ContinuationSegment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BarUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            Index = input.ReadSInt32();
            break;
          }
          case 24: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 32: {
            ScaledOpenPrice = input.ReadSInt64();
            break;
          }
          case 40: {
            ScaledHighPrice = input.ReadSInt64();
            break;
          }
          case 48: {
            ScaledLowPrice = input.ReadSInt64();
            break;
          }
          case 56: {
            ScaledClosePrice = input.ReadSInt64();
            break;
          }
          case 64: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
          case 72: {
            TickVolume = input.ReadUInt64();
            break;
          }
          case 82: {
            if (continuationSegment_ == null) {
              ContinuationSegment = new global::Historical2.ContinuationSegment();
            }
            input.ReadMessage(ContinuationSegment);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BarUtcTime = input.ReadSInt64();
            break;
          }
          case 16: {
            Index = input.ReadSInt32();
            break;
          }
          case 24: {
            TradeDate = input.ReadSInt64();
            break;
          }
          case 32: {
            ScaledOpenPrice = input.ReadSInt64();
            break;
          }
          case 40: {
            ScaledHighPrice = input.ReadSInt64();
            break;
          }
          case 48: {
            ScaledLowPrice = input.ReadSInt64();
            break;
          }
          case 56: {
            ScaledClosePrice = input.ReadSInt64();
            break;
          }
          case 64: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
          case 72: {
            TickVolume = input.ReadUInt64();
            break;
          }
          case 82: {
            if (continuationSegment_ == null) {
              ContinuationSegment = new global::Historical2.ContinuationSegment();
            }
            input.ReadMessage(ContinuationSegment);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// VolumeProfile request, 3 month history limit.
  /// </summary>
  public sealed partial class VolumeProfileRequest : pb::IMessage<VolumeProfileRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VolumeProfileRequest> _parser = new pb::MessageParser<VolumeProfileRequest>(() => new VolumeProfileRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolumeProfileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileRequest(VolumeProfileRequest other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      volumeProfileParameters_ = other.volumeProfileParameters_ != null ? other.volumeProfileParameters_.Clone() : null;
      requestType_ = other.requestType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileRequest Clone() {
      return new VolumeProfileRequest(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static uint RequestIdDefaultValue = 0;

    private uint requestId_;
    /// <summary>
    /// request ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "volume_profile_parameters" field.</summary>
    public const int VolumeProfileParametersFieldNumber = 2;
    private global::Historical2.VolumeProfileParameters volumeProfileParameters_;
    /// <summary>
    /// Request parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.VolumeProfileParameters VolumeProfileParameters {
      get { return volumeProfileParameters_; }
      set {
        volumeProfileParameters_ = value;
      }
    }

    /// <summary>Field number for the "request_type" field.</summary>
    public const int RequestTypeFieldNumber = 3;
    private readonly static uint RequestTypeDefaultValue = 0;

    private uint requestType_;
    /// <summary>
    /// This field is associated with RequestType enum type.
    /// REQUEST_TYPE_GET operation is processed by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestType {
      get { if ((_hasBits0 & 2) != 0) { return requestType_; } else { return RequestTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        requestType_ = value;
      }
    }
    /// <summary>Gets whether the "request_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "request_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestType() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolumeProfileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolumeProfileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (!object.Equals(VolumeProfileParameters, other.VolumeProfileParameters)) return false;
      if (RequestType != other.RequestType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (volumeProfileParameters_ != null) hash ^= VolumeProfileParameters.GetHashCode();
      if (HasRequestType) hash ^= RequestType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (volumeProfileParameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VolumeProfileParameters);
      }
      if (HasRequestType) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequestType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (volumeProfileParameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VolumeProfileParameters);
      }
      if (HasRequestType) {
        output.WriteRawTag(24);
        output.WriteUInt32(RequestType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (volumeProfileParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VolumeProfileParameters);
      }
      if (HasRequestType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolumeProfileRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.volumeProfileParameters_ != null) {
        if (volumeProfileParameters_ == null) {
          VolumeProfileParameters = new global::Historical2.VolumeProfileParameters();
        }
        VolumeProfileParameters.MergeFrom(other.VolumeProfileParameters);
      }
      if (other.HasRequestType) {
        RequestType = other.RequestType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (volumeProfileParameters_ == null) {
              VolumeProfileParameters = new global::Historical2.VolumeProfileParameters();
            }
            input.ReadMessage(VolumeProfileParameters);
            break;
          }
          case 24: {
            RequestType = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (volumeProfileParameters_ == null) {
              VolumeProfileParameters = new global::Historical2.VolumeProfileParameters();
            }
            input.ReadMessage(VolumeProfileParameters);
            break;
          }
          case 24: {
            RequestType = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the VolumeProfileRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type of request action.
      /// </summary>
      public enum RequestType {
        /// <summary>
        /// Request data.
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE_GET")] Get = 1,
        /// <summary>
        /// Cancel a previously issued request.
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE_DROP")] Drop = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Parameters of a Volume Profile request.
  /// </summary>
  public sealed partial class VolumeProfileParameters : pb::IMessage<VolumeProfileParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VolumeProfileParameters> _parser = new pb::MessageParser<VolumeProfileParameters>(() => new VolumeProfileParameters());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolumeProfileParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileParameters(VolumeProfileParameters other) : this() {
      _hasBits0 = other._hasBits0;
      contractId_ = other.contractId_;
      startUtcTime_ = other.startUtcTime_;
      endUtcTime_ = other.endUtcTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileParameters Clone() {
      return new VolumeProfileParameters(this);
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 1;
    private readonly static uint ContractIdDefaultValue = 0;

    private uint contractId_;
    /// <summary>
    /// Contract id for the volume profile request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContractId {
      get { if ((_hasBits0 & 1) != 0) { return contractId_; } else { return ContractIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        contractId_ = value;
      }
    }
    /// <summary>Gets whether the "contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContractId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContractId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "start_utc_time" field.</summary>
    public const int StartUtcTimeFieldNumber = 2;
    private readonly static long StartUtcTimeDefaultValue = 0L;

    private long startUtcTime_;
    /// <summary>
    /// Both of the next two fields have to be set, otherwise the request will return a failure
    /// Start of the time range for volume profile to be calculated for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartUtcTime {
      get { if ((_hasBits0 & 2) != 0) { return startUtcTime_; } else { return StartUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        startUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "start_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartUtcTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "start_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartUtcTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "end_utc_time" field.</summary>
    public const int EndUtcTimeFieldNumber = 3;
    private readonly static long EndUtcTimeDefaultValue = 0L;

    private long endUtcTime_;
    /// <summary>
    /// Exclusive end of the time range for volume profile to be calculated for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return endUtcTime_; } else { return EndUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        endUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "end_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "end_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndUtcTime() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolumeProfileParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolumeProfileParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContractId != other.ContractId) return false;
      if (StartUtcTime != other.StartUtcTime) return false;
      if (EndUtcTime != other.EndUtcTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasContractId) hash ^= ContractId.GetHashCode();
      if (HasStartUtcTime) hash ^= StartUtcTime.GetHashCode();
      if (HasEndUtcTime) hash ^= EndUtcTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (HasStartUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(StartUtcTime);
      }
      if (HasEndUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(EndUtcTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(ContractId);
      }
      if (HasStartUtcTime) {
        output.WriteRawTag(16);
        output.WriteSInt64(StartUtcTime);
      }
      if (HasEndUtcTime) {
        output.WriteRawTag(24);
        output.WriteSInt64(EndUtcTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContractId);
      }
      if (HasStartUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StartUtcTime);
      }
      if (HasEndUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndUtcTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolumeProfileParameters other) {
      if (other == null) {
        return;
      }
      if (other.HasContractId) {
        ContractId = other.ContractId;
      }
      if (other.HasStartUtcTime) {
        StartUtcTime = other.StartUtcTime;
      }
      if (other.HasEndUtcTime) {
        EndUtcTime = other.EndUtcTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 16: {
            StartUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            EndUtcTime = input.ReadSInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ContractId = input.ReadUInt32();
            break;
          }
          case 16: {
            StartUtcTime = input.ReadSInt64();
            break;
          }
          case 24: {
            EndUtcTime = input.ReadSInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// VolumeProfile snapshot response.
  /// </summary>
  public sealed partial class VolumeProfileReport : pb::IMessage<VolumeProfileReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VolumeProfileReport> _parser = new pb::MessageParser<VolumeProfileReport>(() => new VolumeProfileReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolumeProfileReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileReport(VolumeProfileReport other) : this() {
      _hasBits0 = other._hasBits0;
      requestId_ = other.requestId_;
      resultCode_ = other.resultCode_;
      volumeProfileItems_ = other.volumeProfileItems_.Clone();
      lastQuotesCumulativeStatistics_ = other.lastQuotesCumulativeStatistics_ != null ? other.lastQuotesCumulativeStatistics_.Clone() : null;
      upToUtcTime_ = other.upToUtcTime_;
      textMessage_ = other.textMessage_;
      truncated_ = other.truncated_;
      isReportComplete_ = other.isReportComplete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileReport Clone() {
      return new VolumeProfileReport(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private readonly static uint RequestIdDefaultValue = 0;

    private uint requestId_;
    /// <summary>
    /// ID of the volume profile request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { if ((_hasBits0 & 1) != 0) { return requestId_; } else { return RequestIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        requestId_ = value;
      }
    }
    /// <summary>Gets whether the "request_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequestId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "request_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private readonly static uint ResultCodeDefaultValue = 0;

    private uint resultCode_;
    /// <summary>
    /// This field is associated with ResultCode enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultCode {
      get { if ((_hasBits0 & 2) != 0) { return resultCode_; } else { return ResultCodeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        resultCode_ = value;
      }
    }
    /// <summary>Gets whether the "result_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasResultCode {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "result_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResultCode() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "volume_profile_items" field.</summary>
    public const int VolumeProfileItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Historical2.VolumeProfileItem> _repeated_volumeProfileItems_codec
        = pb::FieldCodec.ForMessage(26, global::Historical2.VolumeProfileItem.Parser);
    private readonly pbc::RepeatedField<global::Historical2.VolumeProfileItem> volumeProfileItems_ = new pbc::RepeatedField<global::Historical2.VolumeProfileItem>();
    /// <summary>
    /// Volume profile snapshot items.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.VolumeProfileItem> VolumeProfileItems {
      get { return volumeProfileItems_; }
    }

    /// <summary>Field number for the "last_quotes_cumulative_statistics" field.</summary>
    public const int LastQuotesCumulativeStatisticsFieldNumber = 8;
    private global::Historical2.VolumeProfileLastQuotesCumulativeStatistics lastQuotesCumulativeStatistics_;
    /// <summary>
    /// Volume profile cumulative statistics for the last quotes.
    /// This field is filled only for the first chunk of the report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Historical2.VolumeProfileLastQuotesCumulativeStatistics LastQuotesCumulativeStatistics {
      get { return lastQuotesCumulativeStatistics_; }
      set {
        lastQuotesCumulativeStatistics_ = value;
      }
    }

    /// <summary>Field number for the "up_to_utc_time" field.</summary>
    public const int UpToUtcTimeFieldNumber = 4;
    private readonly static long UpToUtcTimeDefaultValue = 0L;

    private long upToUtcTime_;
    /// <summary>
    /// Time up to which the quotes were included into this report,
    /// if there were several with the same time-stamp equal to this time
    /// then all are included into the report (UTC).
    /// This time is set only for requests with time range
    /// that includes the current time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpToUtcTime {
      get { if ((_hasBits0 & 4) != 0) { return upToUtcTime_; } else { return UpToUtcTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        upToUtcTime_ = value;
      }
    }
    /// <summary>Gets whether the "up_to_utc_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUpToUtcTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "up_to_utc_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpToUtcTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "text_message" field.</summary>
    public const int TextMessageFieldNumber = 5;
    private readonly static string TextMessageDefaultValue = "";

    private string textMessage_;
    /// <summary>
    /// Optional failure details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextMessage {
      get { return textMessage_ ?? TextMessageDefaultValue; }
      set {
        textMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text_message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTextMessage {
      get { return textMessage_ != null; }
    }
    /// <summary>Clears the value of the "text_message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTextMessage() {
      textMessage_ = null;
    }

    /// <summary>Field number for the "truncated" field.</summary>
    public const int TruncatedFieldNumber = 6;
    private readonly static bool TruncatedDefaultValue = false;

    private bool truncated_;
    /// <summary>
    /// Request contains dates partially outside of allowed historical data depth.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Truncated {
      get { if ((_hasBits0 & 8) != 0) { return truncated_; } else { return TruncatedDefaultValue; } }
      set {
        _hasBits0 |= 8;
        truncated_ = value;
      }
    }
    /// <summary>Gets whether the "truncated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTruncated {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "truncated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTruncated() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "is_report_complete" field.</summary>
    public const int IsReportCompleteFieldNumber = 7;
    private readonly static bool IsReportCompleteDefaultValue = true;

    private bool isReportComplete_;
    /// <summary>
    /// True means that requested data is complete at the moment, false means more report messages are expected for completeness.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReportComplete {
      get { if ((_hasBits0 & 16) != 0) { return isReportComplete_; } else { return IsReportCompleteDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isReportComplete_ = value;
      }
    }
    /// <summary>Gets whether the "is_report_complete" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsReportComplete {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "is_report_complete" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsReportComplete() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolumeProfileReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolumeProfileReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (ResultCode != other.ResultCode) return false;
      if(!volumeProfileItems_.Equals(other.volumeProfileItems_)) return false;
      if (!object.Equals(LastQuotesCumulativeStatistics, other.LastQuotesCumulativeStatistics)) return false;
      if (UpToUtcTime != other.UpToUtcTime) return false;
      if (TextMessage != other.TextMessage) return false;
      if (Truncated != other.Truncated) return false;
      if (IsReportComplete != other.IsReportComplete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequestId) hash ^= RequestId.GetHashCode();
      if (HasResultCode) hash ^= ResultCode.GetHashCode();
      hash ^= volumeProfileItems_.GetHashCode();
      if (lastQuotesCumulativeStatistics_ != null) hash ^= LastQuotesCumulativeStatistics.GetHashCode();
      if (HasUpToUtcTime) hash ^= UpToUtcTime.GetHashCode();
      if (HasTextMessage) hash ^= TextMessage.GetHashCode();
      if (HasTruncated) hash ^= Truncated.GetHashCode();
      if (HasIsReportComplete) hash ^= IsReportComplete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasResultCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      volumeProfileItems_.WriteTo(output, _repeated_volumeProfileItems_codec);
      if (HasUpToUtcTime) {
        output.WriteRawTag(32);
        output.WriteInt64(UpToUtcTime);
      }
      if (HasTextMessage) {
        output.WriteRawTag(42);
        output.WriteString(TextMessage);
      }
      if (HasTruncated) {
        output.WriteRawTag(48);
        output.WriteBool(Truncated);
      }
      if (HasIsReportComplete) {
        output.WriteRawTag(56);
        output.WriteBool(IsReportComplete);
      }
      if (lastQuotesCumulativeStatistics_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LastQuotesCumulativeStatistics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequestId) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (HasResultCode) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResultCode);
      }
      volumeProfileItems_.WriteTo(ref output, _repeated_volumeProfileItems_codec);
      if (HasUpToUtcTime) {
        output.WriteRawTag(32);
        output.WriteInt64(UpToUtcTime);
      }
      if (HasTextMessage) {
        output.WriteRawTag(42);
        output.WriteString(TextMessage);
      }
      if (HasTruncated) {
        output.WriteRawTag(48);
        output.WriteBool(Truncated);
      }
      if (HasIsReportComplete) {
        output.WriteRawTag(56);
        output.WriteBool(IsReportComplete);
      }
      if (lastQuotesCumulativeStatistics_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LastQuotesCumulativeStatistics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequestId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (HasResultCode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultCode);
      }
      size += volumeProfileItems_.CalculateSize(_repeated_volumeProfileItems_codec);
      if (lastQuotesCumulativeStatistics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastQuotesCumulativeStatistics);
      }
      if (HasUpToUtcTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpToUtcTime);
      }
      if (HasTextMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextMessage);
      }
      if (HasTruncated) {
        size += 1 + 1;
      }
      if (HasIsReportComplete) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolumeProfileReport other) {
      if (other == null) {
        return;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasResultCode) {
        ResultCode = other.ResultCode;
      }
      volumeProfileItems_.Add(other.volumeProfileItems_);
      if (other.lastQuotesCumulativeStatistics_ != null) {
        if (lastQuotesCumulativeStatistics_ == null) {
          LastQuotesCumulativeStatistics = new global::Historical2.VolumeProfileLastQuotesCumulativeStatistics();
        }
        LastQuotesCumulativeStatistics.MergeFrom(other.LastQuotesCumulativeStatistics);
      }
      if (other.HasUpToUtcTime) {
        UpToUtcTime = other.UpToUtcTime;
      }
      if (other.HasTextMessage) {
        TextMessage = other.TextMessage;
      }
      if (other.HasTruncated) {
        Truncated = other.Truncated;
      }
      if (other.HasIsReportComplete) {
        IsReportComplete = other.IsReportComplete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 26: {
            volumeProfileItems_.AddEntriesFrom(input, _repeated_volumeProfileItems_codec);
            break;
          }
          case 32: {
            UpToUtcTime = input.ReadInt64();
            break;
          }
          case 42: {
            TextMessage = input.ReadString();
            break;
          }
          case 48: {
            Truncated = input.ReadBool();
            break;
          }
          case 56: {
            IsReportComplete = input.ReadBool();
            break;
          }
          case 66: {
            if (lastQuotesCumulativeStatistics_ == null) {
              LastQuotesCumulativeStatistics = new global::Historical2.VolumeProfileLastQuotesCumulativeStatistics();
            }
            input.ReadMessage(LastQuotesCumulativeStatistics);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            ResultCode = input.ReadUInt32();
            break;
          }
          case 26: {
            volumeProfileItems_.AddEntriesFrom(ref input, _repeated_volumeProfileItems_codec);
            break;
          }
          case 32: {
            UpToUtcTime = input.ReadInt64();
            break;
          }
          case 42: {
            TextMessage = input.ReadString();
            break;
          }
          case 48: {
            Truncated = input.ReadBool();
            break;
          }
          case 56: {
            IsReportComplete = input.ReadBool();
            break;
          }
          case 66: {
            if (lastQuotesCumulativeStatistics_ == null) {
              LastQuotesCumulativeStatistics = new global::Historical2.VolumeProfileLastQuotesCumulativeStatistics();
            }
            input.ReadMessage(LastQuotesCumulativeStatistics);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the VolumeProfileReport message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ResultCode {
        /// <summary>
        //// success codes  (0 - 99)
        /// Request is processed successfully.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_SUCCESS")] Success = 0,
        /// <summary>
        /// Delayed request is dropped by a client.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_DROPPED")] Dropped = 2,
        /// <summary>
        /// Request processing status that indicates that currently
        /// processing is impossible because of communication issues.
        /// NOTE: Clients should not resend requests in this case,
        /// the server will restore processing with sending RESULT_CODE_SUCCESS status
        /// once communication issues are resolved. If client is not interested
        /// in this request any longer it should send REQUEST_TYPE_DROP request.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_DISCONNECTED")] Disconnected = 4,
        /// <summary>
        //// failure codes (100+)
        /// General failure.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_FAILURE")] Failure = 101,
        /// <summary>
        /// The user is not allowed to access this instrument data.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_ACCESS_DENIED")] AccessDenied = 103,
        /// <summary>
        /// Requested information is not found.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_NOT_FOUND")] NotFound = 104,
        /// <summary>
        /// Requested data is outside of allowed range.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_OUTSIDE_ALLOWED_RANGE")] OutsideAllowedRange = 105,
        /// <summary>
        /// The limit of the active historical requests has been violated.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION")] ActiveRequestsLimitViolation = 106,
        /// <summary>
        /// VolumeProfile request is not supported for specified contract.
        /// </summary>
        [pbr::OriginalName("RESULT_CODE_NOT_SUPPORTED")] NotSupported = 110,
      }

    }
    #endregion

  }

  /// <summary>
  /// Volume profile cumulative statistics for the last quotes.
  /// </summary>
  public sealed partial class VolumeProfileLastQuotesCumulativeStatistics : pb::IMessage<VolumeProfileLastQuotesCumulativeStatistics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VolumeProfileLastQuotesCumulativeStatistics> _parser = new pb::MessageParser<VolumeProfileLastQuotesCumulativeStatistics>(() => new VolumeProfileLastQuotesCumulativeStatistics());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolumeProfileLastQuotesCumulativeStatistics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileLastQuotesCumulativeStatistics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileLastQuotesCumulativeStatistics(VolumeProfileLastQuotesCumulativeStatistics other) : this() {
      _hasBits0 = other._hasBits0;
      scaledLastAskPrice_ = other.scaledLastAskPrice_;
      scaledLastBidPrice_ = other.scaledLastBidPrice_;
      scaledAskTradeVolume_ = other.scaledAskTradeVolume_;
      scaledBidTradeVolume_ = other.scaledBidTradeVolume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileLastQuotesCumulativeStatistics Clone() {
      return new VolumeProfileLastQuotesCumulativeStatistics(this);
    }

    /// <summary>Field number for the "scaled_last_ask_price" field.</summary>
    public const int ScaledLastAskPriceFieldNumber = 1;
    private readonly static int ScaledLastAskPriceDefaultValue = 0;

    private int scaledLastAskPrice_;
    /// <summary>
    /// Price of the last best ask quote within Volume Profile range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScaledLastAskPrice {
      get { if ((_hasBits0 & 1) != 0) { return scaledLastAskPrice_; } else { return ScaledLastAskPriceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        scaledLastAskPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_last_ask_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledLastAskPrice {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "scaled_last_ask_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledLastAskPrice() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "scaled_last_bid_price" field.</summary>
    public const int ScaledLastBidPriceFieldNumber = 2;
    private readonly static int ScaledLastBidPriceDefaultValue = 0;

    private int scaledLastBidPrice_;
    /// <summary>
    /// Price of the last best bid quote within Volume Profile range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScaledLastBidPrice {
      get { if ((_hasBits0 & 2) != 0) { return scaledLastBidPrice_; } else { return ScaledLastBidPriceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        scaledLastBidPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_last_bid_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledLastBidPrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "scaled_last_bid_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledLastBidPrice() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "scaled_ask_trade_volume" field.</summary>
    public const int ScaledAskTradeVolumeFieldNumber = 3;
    private readonly static double ScaledAskTradeVolumeDefaultValue = 0D;

    private double scaledAskTradeVolume_;
    /// <summary>
    /// Cumulative sum of trade volumes on ask side since the last best bid or best ask price update within Volume Profile range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ScaledAskTradeVolume {
      get { if ((_hasBits0 & 4) != 0) { return scaledAskTradeVolume_; } else { return ScaledAskTradeVolumeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        scaledAskTradeVolume_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_ask_trade_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledAskTradeVolume {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "scaled_ask_trade_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledAskTradeVolume() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "scaled_bid_trade_volume" field.</summary>
    public const int ScaledBidTradeVolumeFieldNumber = 4;
    private readonly static double ScaledBidTradeVolumeDefaultValue = 0D;

    private double scaledBidTradeVolume_;
    /// <summary>
    /// Cumulative sum of trade volumes on bid side since the last best bid or best ask price update within Volume Profile range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ScaledBidTradeVolume {
      get { if ((_hasBits0 & 8) != 0) { return scaledBidTradeVolume_; } else { return ScaledBidTradeVolumeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        scaledBidTradeVolume_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_bid_trade_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledBidTradeVolume {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "scaled_bid_trade_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledBidTradeVolume() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolumeProfileLastQuotesCumulativeStatistics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolumeProfileLastQuotesCumulativeStatistics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScaledLastAskPrice != other.ScaledLastAskPrice) return false;
      if (ScaledLastBidPrice != other.ScaledLastBidPrice) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ScaledAskTradeVolume, other.ScaledAskTradeVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ScaledBidTradeVolume, other.ScaledBidTradeVolume)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasScaledLastAskPrice) hash ^= ScaledLastAskPrice.GetHashCode();
      if (HasScaledLastBidPrice) hash ^= ScaledLastBidPrice.GetHashCode();
      if (HasScaledAskTradeVolume) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ScaledAskTradeVolume);
      if (HasScaledBidTradeVolume) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ScaledBidTradeVolume);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasScaledLastAskPrice) {
        output.WriteRawTag(8);
        output.WriteSInt32(ScaledLastAskPrice);
      }
      if (HasScaledLastBidPrice) {
        output.WriteRawTag(16);
        output.WriteSInt32(ScaledLastBidPrice);
      }
      if (HasScaledAskTradeVolume) {
        output.WriteRawTag(25);
        output.WriteDouble(ScaledAskTradeVolume);
      }
      if (HasScaledBidTradeVolume) {
        output.WriteRawTag(33);
        output.WriteDouble(ScaledBidTradeVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasScaledLastAskPrice) {
        output.WriteRawTag(8);
        output.WriteSInt32(ScaledLastAskPrice);
      }
      if (HasScaledLastBidPrice) {
        output.WriteRawTag(16);
        output.WriteSInt32(ScaledLastBidPrice);
      }
      if (HasScaledAskTradeVolume) {
        output.WriteRawTag(25);
        output.WriteDouble(ScaledAskTradeVolume);
      }
      if (HasScaledBidTradeVolume) {
        output.WriteRawTag(33);
        output.WriteDouble(ScaledBidTradeVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasScaledLastAskPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ScaledLastAskPrice);
      }
      if (HasScaledLastBidPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ScaledLastBidPrice);
      }
      if (HasScaledAskTradeVolume) {
        size += 1 + 8;
      }
      if (HasScaledBidTradeVolume) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolumeProfileLastQuotesCumulativeStatistics other) {
      if (other == null) {
        return;
      }
      if (other.HasScaledLastAskPrice) {
        ScaledLastAskPrice = other.ScaledLastAskPrice;
      }
      if (other.HasScaledLastBidPrice) {
        ScaledLastBidPrice = other.ScaledLastBidPrice;
      }
      if (other.HasScaledAskTradeVolume) {
        ScaledAskTradeVolume = other.ScaledAskTradeVolume;
      }
      if (other.HasScaledBidTradeVolume) {
        ScaledBidTradeVolume = other.ScaledBidTradeVolume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ScaledLastAskPrice = input.ReadSInt32();
            break;
          }
          case 16: {
            ScaledLastBidPrice = input.ReadSInt32();
            break;
          }
          case 25: {
            ScaledAskTradeVolume = input.ReadDouble();
            break;
          }
          case 33: {
            ScaledBidTradeVolume = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ScaledLastAskPrice = input.ReadSInt32();
            break;
          }
          case 16: {
            ScaledLastBidPrice = input.ReadSInt32();
            break;
          }
          case 25: {
            ScaledAskTradeVolume = input.ReadDouble();
            break;
          }
          case 33: {
            ScaledBidTradeVolume = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Volume profile snapshot item.
  /// </summary>
  public sealed partial class VolumeProfileItem : pb::IMessage<VolumeProfileItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VolumeProfileItem> _parser = new pb::MessageParser<VolumeProfileItem>(() => new VolumeProfileItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolumeProfileItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Historical2.Historical2Reflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileItem(VolumeProfileItem other) : this() {
      _hasBits0 = other._hasBits0;
      scaledPrice_ = other.scaledPrice_;
      scaledVolume_ = other.scaledVolume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeProfileItem Clone() {
      return new VolumeProfileItem(this);
    }

    /// <summary>Field number for the "scaled_price" field.</summary>
    public const int ScaledPriceFieldNumber = 1;
    private readonly static int ScaledPriceDefaultValue = 0;

    private int scaledPrice_;
    /// <summary>
    /// Price (unique for each volume profile snapshot reported).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScaledPrice {
      get { if ((_hasBits0 & 1) != 0) { return scaledPrice_; } else { return ScaledPriceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        scaledPrice_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_price" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledPrice {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "scaled_price" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledPrice() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "scaled_volume" field.</summary>
    public const int ScaledVolumeFieldNumber = 2;
    private readonly static ulong ScaledVolumeDefaultValue = 0UL;

    private ulong scaledVolume_;
    /// <summary>
    /// Total volume of all trades with this price for the time range asked.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScaledVolume {
      get { if ((_hasBits0 & 2) != 0) { return scaledVolume_; } else { return ScaledVolumeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        scaledVolume_ = value;
      }
    }
    /// <summary>Gets whether the "scaled_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScaledVolume {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "scaled_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaledVolume() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolumeProfileItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolumeProfileItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScaledPrice != other.ScaledPrice) return false;
      if (ScaledVolume != other.ScaledVolume) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasScaledPrice) hash ^= ScaledPrice.GetHashCode();
      if (HasScaledVolume) hash ^= ScaledVolume.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasScaledPrice) {
        output.WriteRawTag(8);
        output.WriteSInt32(ScaledPrice);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(16);
        output.WriteUInt64(ScaledVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasScaledPrice) {
        output.WriteRawTag(8);
        output.WriteSInt32(ScaledPrice);
      }
      if (HasScaledVolume) {
        output.WriteRawTag(16);
        output.WriteUInt64(ScaledVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasScaledPrice) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ScaledPrice);
      }
      if (HasScaledVolume) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScaledVolume);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolumeProfileItem other) {
      if (other == null) {
        return;
      }
      if (other.HasScaledPrice) {
        ScaledPrice = other.ScaledPrice;
      }
      if (other.HasScaledVolume) {
        ScaledVolume = other.ScaledVolume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ScaledPrice = input.ReadSInt32();
            break;
          }
          case 16: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ScaledPrice = input.ReadSInt32();
            break;
          }
          case 16: {
            ScaledVolume = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
