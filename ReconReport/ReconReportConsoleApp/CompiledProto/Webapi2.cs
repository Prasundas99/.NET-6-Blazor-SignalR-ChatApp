// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WebAPI/webapi_2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WebAPI2 {

  /// <summary>Holder for reflection information generated from WebAPI/webapi_2.proto</summary>
  public static partial class Webapi2Reflection {

    #region Descriptor
    /// <summary>File descriptor for WebAPI/webapi_2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Webapi2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVXZWJBUEkvd2ViYXBpXzIucHJvdG8SCFdlYkFQSV8yGhVjb21tb24vc2hh",
            "cmVkXzEucHJvdG8aJFdlYkFQSS9hY2NvdW50X2F1dGhvcml6YXRpb25fMi5w",
            "cm90bxoZV2ViQVBJL2hpc3RvcmljYWxfMi5wcm90bxoXV2ViQVBJL21ldGFk",
            "YXRhXzIucHJvdG8aHVdlYkFQSS9tZXRhZGF0YV9hZG1pbl8yLnByb3RvGhpX",
            "ZWJBUEkvbWFya2V0X2RhdGFfMi5wcm90bxoUV2ViQVBJL29yZGVyXzIucHJv",
            "dG8aEldlYkFQSS9vdGNfMS5wcm90bxoUV2ViQVBJL3J1bGVzXzEucHJvdG8a",
            "F1dlYkFQSS9zdHJhdGVneV8yLnByb3RvGh5XZWJBUEkvc3ltYm9sX2Jyb3dz",
            "aW5nXzIucHJvdG8aHFdlYkFQSS90cmFkZV9yb3V0aW5nXzIucHJvdG8aHldl",
            "YkFQSS90cmFkaW5nX3Nlc3Npb25fMi5wcm90bxoeV2ViQVBJL3RyYWRpbmdf",
            "YWNjb3VudF8yLnByb3RvGh1XZWJBUEkvdXNlcl9hdHRyaWJ1dGVfMi5wcm90",
            "bxobV2ViQVBJL3VzZXJfc2Vzc2lvbl8yLnByb3RvIsgOCglDbGllbnRNc2cS",
            "JAoFbG9nb24YZCABKAsyFS51c2VyX3Nlc3Npb25fMi5Mb2dvbhJFChdyZXN0",
            "b3JlX29yX2pvaW5fc2Vzc2lvbhhlIAEoCzIkLnVzZXJfc2Vzc2lvbl8yLlJl",
            "c3RvcmVPckpvaW5TZXNzaW9uEiYKBmxvZ29mZhhmIAEoCzIWLnVzZXJfc2Vz",
            "c2lvbl8yLkxvZ29mZhI3Cg9wYXNzd29yZF9jaGFuZ2UYZyABKAsyHi51c2Vy",
            "X3Nlc3Npb25fMi5QYXNzd29yZENoYW5nZRJGChdvYnRhaW5fZGVtb19jcmVk",
            "ZW50aWFscxhoIAEoCzIlLnVzZXJfc2Vzc2lvbl8yLk9idGFpbkRlbW9DcmVk",
            "ZW50aWFscxJLChp1c2VyX3Nlc3Npb25fc3RhdGVfcmVxdWVzdBhpIAEoCzIn",
            "LnVzZXJfc2Vzc2lvbl8yLlVzZXJTZXNzaW9uU3RhdGVSZXF1ZXN0EiIKBHBp",
            "bmcYayABKAsyFC51c2VyX3Nlc3Npb25fMi5QaW5nEiIKBHBvbmcYbCABKAsy",
            "FC51c2VyX3Nlc3Npb25fMi5Qb25nEkAKFGxvZ29uX3JvdXRpbmVfY2xpZW50",
            "GG0gASgLMiIudXNlcl9zZXNzaW9uXzIuTG9nb25Sb3V0aW5lQ2xpZW50ElMK",
            "HnBhc3N3b3JkX2NoYW5nZV9yb3V0aW5lX2NsaWVudBhuIAEoCzIrLnVzZXJf",
            "c2Vzc2lvbl8yLlBhc3N3b3JkQ2hhbmdlUm91dGluZUNsaWVudBJPChxzZXRf",
            "Y29sbGFwc2luZ19sZXZlbF9yZXF1ZXN0GG8gASgLMikudXNlcl9zZXNzaW9u",
            "XzIuU2V0Q29sbGFwc2luZ0xldmVsUmVxdWVzdBI6ChRpbmZvcm1hdGlvbl9y",
            "ZXF1ZXN0cxgBIAMoCzIcLldlYkFQSV8yLkluZm9ybWF0aW9uUmVxdWVzdBI/",
            "ChN0cmFkZV9zdWJzY3JpcHRpb25zGAIgAygLMiIudHJhZGVfcm91dGluZ18y",
            "LlRyYWRlU3Vic2NyaXB0aW9uEi0KDm9yZGVyX3JlcXVlc3RzGAMgAygLMhUu",
            "b3JkZXJfMi5PcmRlclJlcXVlc3QSSAoZbWFya2V0X2RhdGFfc3Vic2NyaXB0",
            "aW9ucxgEIAMoCzIlLm1hcmtldF9kYXRhXzIuTWFya2V0RGF0YVN1YnNjcmlw",
            "dGlvbhJQChxyZWFkX3VzZXJfYXR0cmlidXRlX3JlcXVlc3RzGAUgAygLMiou",
            "dXNlcl9hdHRyaWJ1dGVfMi5SZWFkVXNlckF0dHJpYnV0ZVJlcXVlc3QSVAoe",
            "bW9kaWZ5X3VzZXJfYXR0cmlidXRlX3JlcXVlc3RzGAYgAygLMiwudXNlcl9h",
            "dHRyaWJ1dGVfMi5Nb2RpZnlVc2VyQXR0cmlidXRlUmVxdWVzdBJCChd0aW1l",
            "X2FuZF9zYWxlc19yZXF1ZXN0cxgHIAMoCzIhLmhpc3RvcmljYWxfMi5UaW1l",
            "QW5kU2FsZXNSZXF1ZXN0EjcKEXRpbWVfYmFyX3JlcXVlc3RzGAggAygLMhwu",
            "aGlzdG9yaWNhbF8yLlRpbWVCYXJSZXF1ZXN0EkMKF3ZvbHVtZV9wcm9maWxl",
            "X3JlcXVlc3RzGAkgAygLMiIuaGlzdG9yaWNhbF8yLlZvbHVtZVByb2ZpbGVS",
            "ZXF1ZXN0EkAKFm5vbl90aW1lZF9iYXJfcmVxdWVzdHMYDiADKAsyIC5oaXN0",
            "b3JpY2FsXzIuTm9uVGltZWRCYXJSZXF1ZXN0EisKDXJ1bGVfcmVxdWVzdHMY",
            "CiADKAsyFC5ydWxlc18xLlJ1bGVSZXF1ZXN0EkUKFmFjY291bnRfbG9nb25f",
            "cmVxdWVzdHMYCyADKAsyJS5hY2NvdW50X2F1dGhvcml6YXRpb25fMi5BY2Nv",
            "dW50TG9nb24SWAogYWNjb3VudF9wYXNzd29yZF9jaGFuZ2VfcmVxdWVzdHMY",
            "DCADKAsyLi5hY2NvdW50X2F1dGhvcml6YXRpb25fMi5BY2NvdW50UGFzc3dv",
            "cmRDaGFuZ2USRwoXYWNjb3VudF9sb2dvZmZfcmVxdWVzdHMYDSADKAsyJi5h",
            "Y2NvdW50X2F1dGhvcml6YXRpb25fMi5BY2NvdW50TG9nb2ZmEkcKF21ldGFk",
            "YXRhX2FkbWluX3JlcXVlc3RzGA8gAygLMiYubWV0YWRhdGFfYWRtaW5fMi5N",
            "ZXRhZGF0YUFkbWluUmVxdWVzdBInCgxvdGNfcmVxdWVzdHMYECADKAsyES5v",
            "dGNfMS5PdGNSZXF1ZXN0Ei8KDHJmcV9yZXF1ZXN0cxgRIAMoCzIZLm1hcmtl",
            "dF9kYXRhXzIuUkZRUmVxdWVzdBJMChtvcHRpb25fY2FsY3VsYXRpb25fcmVx",
            "dWVzdHMYEiADKAsyJy5tYXJrZXRfZGF0YV8yLk9wdGlvbkNhbGN1bGF0aW9u",
            "UmVxdWVzdCLmEgoJU2VydmVyTXNnEjEKDGxvZ29uX3Jlc3VsdBhkIAEoCzIb",
            "LnVzZXJfc2Vzc2lvbl8yLkxvZ29uUmVzdWx0ElIKHnJlc3RvcmVfb3Jfam9p",
            "bl9zZXNzaW9uX3Jlc3VsdBhlIAEoCzIqLnVzZXJfc2Vzc2lvbl8yLlJlc3Rv",
            "cmVPckpvaW5TZXNzaW9uUmVzdWx0ElQKImNvbmN1cnJlbnRfY29ubmVjdGlv",
            "bl9qb2luX3Jlc3VsdHMYbyADKAsyKC51c2VyX3Nlc3Npb25fMi5Db25jdXJy",
            "ZW50Q29ubmVjdGlvbkpvaW4SLQoKbG9nZ2VkX29mZhhmIAEoCzIZLnVzZXJf",
            "c2Vzc2lvbl8yLkxvZ2dlZE9mZhJEChZwYXNzd29yZF9jaGFuZ2VfcmVzdWx0",
            "GGcgASgLMiQudXNlcl9zZXNzaW9uXzIuUGFzc3dvcmRDaGFuZ2VSZXN1bHQS",
            "MgoNdXNlcl9tZXNzYWdlcxhoIAMoCzIbLnVzZXJfc2Vzc2lvbl8yLlVzZXJN",
            "ZXNzYWdlElQKH29idGFpbl9kZW1vX2NyZWRlbnRpYWxzX3Jlc3VsdHMYaSAD",
            "KAsyKy51c2VyX3Nlc3Npb25fMi5PYnRhaW5EZW1vQ3JlZGVudGlhbHNSZXN1",
            "bHQSSgoadXNlcl9zZXNzaW9uX3N0YXRlX3Jlc3VsdHMYaiADKAsyJi51c2Vy",
            "X3Nlc3Npb25fMi5Vc2VyU2Vzc2lvblN0YXRlUmVzdWx0EiIKBHBpbmcYayAB",
            "KAsyFC51c2VyX3Nlc3Npb25fMi5QaW5nEiIKBHBvbmcYbCABKAsyFC51c2Vy",
            "X3Nlc3Npb25fMi5Qb25nEkAKFGxvZ29uX3JvdXRpbmVfc2VydmVyGG0gASgL",
            "MiIudXNlcl9zZXNzaW9uXzIuTG9nb25Sb3V0aW5lU2VydmVyElMKHnBhc3N3",
            "b3JkX2NoYW5nZV9yb3V0aW5lX3NlcnZlchhuIAEoCzIrLnVzZXJfc2Vzc2lv",
            "bl8yLlBhc3N3b3JkQ2hhbmdlUm91dGluZVNlcnZlchJOChxzZXRfY29sbGFw",
            "c2luZ19sZXZlbF9yZXN1bHRzGHAgAygLMigudXNlcl9zZXNzaW9uXzIuU2V0",
            "Q29sbGFwc2luZ0xldmVsUmVzdWx0EjgKE2luZm9ybWF0aW9uX3JlcG9ydHMY",
            "ASADKAsyGy5XZWJBUElfMi5JbmZvcm1hdGlvblJlcG9ydBI6ChVvcmRlcl9y",
            "ZXF1ZXN0X3JlamVjdHMYAiADKAsyGy5vcmRlcl8yLk9yZGVyUmVxdWVzdFJl",
            "amVjdBJNCht0cmFkZV9zdWJzY3JpcHRpb25fc3RhdHVzZXMYAyADKAsyKC50",
            "cmFkZV9yb3V0aW5nXzIuVHJhZGVTdWJzY3JpcHRpb25TdGF0dXMSTAoadHJh",
            "ZGVfc25hcHNob3RfY29tcGxldGlvbnMYBCADKAsyKC50cmFkZV9yb3V0aW5n",
            "XzIuVHJhZGVTbmFwc2hvdENvbXBsZXRpb24SLAoOb3JkZXJfc3RhdHVzZXMY",
            "BSADKAsyFC5vcmRlcl8yLk9yZGVyU3RhdHVzEjoKEXBvc2l0aW9uX3N0YXR1",
            "c2VzGAYgAygLMh8udHJhZGVfcm91dGluZ18yLlBvc2l0aW9uU3RhdHVzEj4K",
            "E2NvbGxhdGVyYWxfc3RhdHVzZXMYByADKAsyIS50cmFkZV9yb3V0aW5nXzIu",
            "Q29sbGF0ZXJhbFN0YXR1cxJWCiFtYXJrZXRfZGF0YV9zdWJzY3JpcHRpb25f",
            "c3RhdHVzZXMYCCADKAsyKy5tYXJrZXRfZGF0YV8yLk1hcmtldERhdGFTdWJz",
            "Y3JpcHRpb25TdGF0dXMSQAoVcmVhbF90aW1lX21hcmtldF9kYXRhGAkgAygL",
            "MiEubWFya2V0X2RhdGFfMi5SZWFsVGltZU1hcmtldERhdGESTgobcmVhZF91",
            "c2VyX2F0dHJpYnV0ZV9yZXN1bHRzGAogAygLMikudXNlcl9hdHRyaWJ1dGVf",
            "Mi5SZWFkVXNlckF0dHJpYnV0ZVJlc3VsdBJSCh1tb2RpZnlfdXNlcl9hdHRy",
            "aWJ1dGVfcmVzdWx0cxgLIAMoCzIrLnVzZXJfYXR0cmlidXRlXzIuTW9kaWZ5",
            "VXNlckF0dHJpYnV0ZVJlc3VsdBJAChZ0aW1lX2FuZF9zYWxlc19yZXBvcnRz",
            "GAwgAygLMiAuaGlzdG9yaWNhbF8yLlRpbWVBbmRTYWxlc1JlcG9ydBI1ChB0",
            "aW1lX2Jhcl9yZXBvcnRzGA0gAygLMhsuaGlzdG9yaWNhbF8yLlRpbWVCYXJS",
            "ZXBvcnQSQQoWdm9sdW1lX3Byb2ZpbGVfcmVwb3J0cxgOIAMoCzIhLmhpc3Rv",
            "cmljYWxfMi5Wb2x1bWVQcm9maWxlUmVwb3J0Ej4KFW5vbl90aW1lZF9iYXJf",
            "cmVwb3J0cxgTIAMoCzIfLmhpc3RvcmljYWxfMi5Ob25UaW1lZEJhclJlcG9y",
            "dBIpCgxydWxlX3Jlc3VsdHMYDyADKAsyEy5ydWxlc18xLlJ1bGVSZXN1bHQS",
            "SgoVYWNjb3VudF9sb2dvbl9yZXN1bHRzGBAgAygLMisuYWNjb3VudF9hdXRo",
            "b3JpemF0aW9uXzIuQWNjb3VudExvZ29uUmVzdWx0El0KH2FjY291bnRfcGFz",
            "c3dvcmRfY2hhbmdlX3Jlc3VsdHMYESADKAsyNC5hY2NvdW50X2F1dGhvcml6",
            "YXRpb25fMi5BY2NvdW50UGFzc3dvcmRDaGFuZ2VSZXN1bHQSTAoWYWNjb3Vu",
            "dF9sb2dvZmZfcmVzdWx0cxgSIAMoCzIsLmFjY291bnRfYXV0aG9yaXphdGlv",
            "bl8yLkFjY291bnRMb2dvZmZSZXN1bHQSRQoWbWV0YWRhdGFfYWRtaW5fcmVz",
            "dWx0cxgUIAMoCzIlLm1ldGFkYXRhX2FkbWluXzIuTWV0YWRhdGFBZG1pblJl",
            "c3VsdBIlCgtvdGNfcmVwb3J0cxgVIAMoCzIQLm90Y18xLk90Y1JlcG9ydBIt",
            "CgtyZnFfcmVwb3J0cxgWIAMoCzIYLm1hcmtldF9kYXRhXzIuUkZRUmVwb3J0",
            "EkoKGm9wdGlvbl9jYWxjdWxhdGlvbl9yZXBvcnRzGBcgAygLMiYubWFya2V0",
            "X2RhdGFfMi5PcHRpb25DYWxjdWxhdGlvblJlcG9ydCLBCwoSSW5mb3JtYXRp",
            "b25SZXF1ZXN0EgoKAmlkGAEgAigNEhEKCXN1YnNjcmliZRgCIAEoCBI8ChBh",
            "Y2NvdW50c19yZXF1ZXN0GAMgASgLMiIudHJhZGluZ19hY2NvdW50XzIuQWNj",
            "b3VudHNSZXF1ZXN0EkYKGXN5bWJvbF9yZXNvbHV0aW9uX3JlcXVlc3QYBCAB",
            "KAsyIy5tZXRhZGF0YV8yLlN5bWJvbFJlc29sdXRpb25SZXF1ZXN0ElgKH2xh",
            "c3Rfc3RhdGVtZW50X2JhbGFuY2VzX3JlcXVlc3QYBSABKAsyLy50cmFkaW5n",
            "X2FjY291bnRfMi5MYXN0U3RhdGVtZW50QmFsYW5jZXNSZXF1ZXN0EkcKFmN1",
            "cnJlbmN5X3JhdGVzX3JlcXVlc3QYBiABKAsyJy50cmFkaW5nX2FjY291bnRf",
            "Mi5DdXJyZW5jeVJhdGVzUmVxdWVzdBJRChtzZXNzaW9uX2luZm9ybWF0aW9u",
            "X3JlcXVlc3QYByABKAsyLC50cmFkaW5nX3Nlc3Npb25fMi5TZXNzaW9uSW5m",
            "b3JtYXRpb25SZXF1ZXN0EksKGWhpc3RvcmljYWxfb3JkZXJzX3JlcXVlc3QY",
            "DSABKAsyKC50cmFkZV9yb3V0aW5nXzIuSGlzdG9yaWNhbE9yZGVyc1JlcXVl",
            "c3QSVAodc3ltYm9sc19ieV91bmRlcmx5aW5nX3JlcXVlc3QYDiABKAsyLS5z",
            "eW1ib2xfYnJvd3NpbmdfMi5TeW1ib2xzQnlVbmRlcmx5aW5nUmVxdWVzdBJF",
            "ChVjaGlsZF9zeW1ib2xzX3JlcXVlc3QYDyABKAsyJi5zeW1ib2xfYnJvd3Np",
            "bmdfMi5DaGlsZFN5bWJvbHNSZXF1ZXN0EksKG2F0X3RoZV9tb25leV9zdHJp",
            "a2VfcmVxdWVzdBgQIAEoCzImLm1hcmtldF9kYXRhXzIuQXRUaGVNb25leVN0",
            "cmlrZVJlcXVlc3QSSgobc3RyYXRlZ3lfZGVmaW5pdGlvbl9yZXF1ZXN0GBEg",
            "ASgLMiUuc3RyYXRlZ3lfMi5TdHJhdGVneURlZmluaXRpb25SZXF1ZXN0Ek0K",
            "GXNlc3Npb25fdGltZXJhbmdlX3JlcXVlc3QYEiABKAsyKi50cmFkaW5nX3Nl",
            "c3Npb25fMi5TZXNzaW9uVGltZVJhbmdlUmVxdWVzdBJUCh10cmFkaW5nX2Rh",
            "eV90aW1lcmFuZ2VfcmVxdWVzdBgTIAEoCzItLnRyYWRpbmdfc2Vzc2lvbl8y",
            "LlRyYWRpbmdEYXlUaW1lUmFuZ2VSZXF1ZXN0EkMKGW9yZGVyX2VudGl0bGVt",
            "ZW50X3JlcXVlc3QYFCABKAsyIC5vcmRlcl8yLk9yZGVyRW50aXRsZW1lbnRS",
            "ZXF1ZXN0ElIKHHN5bWJvbF9jYXRlZ29yeV9saXN0X3JlcXVlc3QYFSABKAsy",
            "LC5zeW1ib2xfYnJvd3NpbmdfMi5TeW1ib2xDYXRlZ29yeUxpc3RSZXF1ZXN0",
            "EkkKF3N5bWJvbF9jYXRlZ29yeV9yZXF1ZXN0GBsgASgLMiguc3ltYm9sX2Jy",
            "b3dzaW5nXzIuU3ltYm9sQ2F0ZWdvcnlSZXF1ZXN0EkEKE3N5bWJvbF9saXN0",
            "X3JlcXVlc3QYFiABKAsyJC5zeW1ib2xfYnJvd3NpbmdfMi5TeW1ib2xMaXN0",
            "UmVxdWVzdBI4Cg5zeW1ib2xfcmVxdWVzdBgXIAEoCzIgLnN5bWJvbF9icm93",
            "c2luZ18yLlN5bWJvbFJlcXVlc3QSOQoTZW50aXRsZW1lbnRfcmVxdWVzdBgY",
            "IAEoCzIcLnNoYXJlZF8xLkVudGl0bGVtZW50UmVxdWVzdBJGChljb250cmFj",
            "dF9tZXRhZGF0YV9yZXF1ZXN0GBkgASgLMiMubWV0YWRhdGFfMi5Db250cmFj",
            "dE1ldGFkYXRhUmVxdWVzdCoECBoQGyKoDgoRSW5mb3JtYXRpb25SZXBvcnQS",
            "CgoCaWQYASACKA0SIAoSaXNfcmVwb3J0X2NvbXBsZXRlGAIgASgIOgR0cnVl",
            "EhMKC3N0YXR1c19jb2RlGAMgAigNEhQKDHRleHRfbWVzc2FnZRgEIAEoCRI6",
            "Cg9hY2NvdW50c19yZXBvcnQYBSABKAsyIS50cmFkaW5nX2FjY291bnRfMi5B",
            "Y2NvdW50c1JlcG9ydBJEChhzeW1ib2xfcmVzb2x1dGlvbl9yZXBvcnQYBiAB",
            "KAsyIi5tZXRhZGF0YV8yLlN5bWJvbFJlc29sdXRpb25SZXBvcnQSVgoebGFz",
            "dF9zdGF0ZW1lbnRfYmFsYW5jZXNfcmVwb3J0GAcgASgLMi4udHJhZGluZ19h",
            "Y2NvdW50XzIuTGFzdFN0YXRlbWVudEJhbGFuY2VzUmVwb3J0EkUKFWN1cnJl",
            "bmN5X3JhdGVzX3JlcG9ydBgIIAEoCzImLnRyYWRpbmdfYWNjb3VudF8yLkN1",
            "cnJlbmN5UmF0ZXNSZXBvcnQSTwoac2Vzc2lvbl9pbmZvcm1hdGlvbl9yZXBv",
            "cnQYCSABKAsyKy50cmFkaW5nX3Nlc3Npb25fMi5TZXNzaW9uSW5mb3JtYXRp",
            "b25SZXBvcnQSSQoYaGlzdG9yaWNhbF9vcmRlcnNfcmVwb3J0GA8gASgLMicu",
            "dHJhZGVfcm91dGluZ18yLkhpc3RvcmljYWxPcmRlcnNSZXBvcnQSUgocc3lt",
            "Ym9sc19ieV91bmRlcmx5aW5nX3JlcG9ydBgQIAEoCzIsLnN5bWJvbF9icm93",
            "c2luZ18yLlN5bWJvbHNCeVVuZGVybHlpbmdSZXBvcnQSQwoUY2hpbGRfc3lt",
            "Ym9sc19yZXBvcnQYESABKAsyJS5zeW1ib2xfYnJvd3NpbmdfMi5DaGlsZFN5",
            "bWJvbHNSZXBvcnQSSQoaYXRfdGhlX21vbmV5X3N0cmlrZV9yZXBvcnQYEiAB",
            "KAsyJS5tYXJrZXRfZGF0YV8yLkF0VGhlTW9uZXlTdHJpa2VSZXBvcnQSSAoa",
            "c3RyYXRlZ3lfZGVmaW5pdGlvbl9yZXBvcnQYEyABKAsyJC5zdHJhdGVneV8y",
            "LlN0cmF0ZWd5RGVmaW5pdGlvblJlcG9ydBJLChhzZXNzaW9uX3RpbWVyYW5n",
            "ZV9yZXBvcnQYFCABKAsyKS50cmFkaW5nX3Nlc3Npb25fMi5TZXNzaW9uVGlt",
            "ZVJhbmdlUmVwb3J0ElIKHHRyYWRpbmdfZGF5X3RpbWVyYW5nZV9yZXBvcnQY",
            "FSABKAsyLC50cmFkaW5nX3Nlc3Npb25fMi5UcmFkaW5nRGF5VGltZVJhbmdl",
            "UmVwb3J0EkEKGG9yZGVyX2VudGl0bGVtZW50X3JlcG9ydBgWIAEoCzIfLm9y",
            "ZGVyXzIuT3JkZXJFbnRpdGxlbWVudFJlcG9ydBJQChtzeW1ib2xfY2F0ZWdv",
            "cnlfbGlzdF9yZXBvcnQYFyABKAsyKy5zeW1ib2xfYnJvd3NpbmdfMi5TeW1i",
            "b2xDYXRlZ29yeUxpc3RSZXBvcnQSRwoWc3ltYm9sX2NhdGVnb3J5X3JlcG9y",
            "dBgdIAEoCzInLnN5bWJvbF9icm93c2luZ18yLlN5bWJvbENhdGVnb3J5UmVw",
            "b3J0Ej8KEnN5bWJvbF9saXN0X3JlcG9ydBgYIAEoCzIjLnN5bWJvbF9icm93",
            "c2luZ18yLlN5bWJvbExpc3RSZXBvcnQSNgoNc3ltYm9sX3JlcG9ydBgZIAEo",
            "CzIfLnN5bWJvbF9icm93c2luZ18yLlN5bWJvbFJlcG9ydBI3ChJlbnRpdGxl",
            "bWVudF9yZXBvcnQYGiABKAsyGy5zaGFyZWRfMS5FbnRpdGxlbWVudFJlcG9y",
            "dBJEChhjb250cmFjdF9tZXRhZGF0YV9yZXBvcnQYGyABKAsyIi5tZXRhZGF0",
            "YV8yLkNvbnRyYWN0TWV0YWRhdGFSZXBvcnQi0QIKClN0YXR1c0NvZGUSFwoT",
            "U1RBVFVTX0NPREVfU1VDQ0VTUxAAEhoKFlNUQVRVU19DT0RFX1NVQlNDUklC",
            "RUQQARIXChNTVEFUVVNfQ09ERV9EUk9QUEVEEAISFgoSU1RBVFVTX0NPREVf",
            "VVBEQVRFEAMSHAoYU1RBVFVTX0NPREVfRElTQ09OTkVDVEVEEAQSFwoTU1RB",
            "VFVTX0NPREVfRkFJTFVSRRBlEhkKFVNUQVRVU19DT0RFX05PVF9GT1VORBBo",
            "EiwKKFNUQVRVU19DT0RFX1JFUVVFU1RfUkFURV9MSU1JVF9WSU9MQVRJT04Q",
            "aRIsCihTVEFUVVNfQ09ERV9TVUJTQ1JJUFRJT05fTElNSVRfVklPTEFUSU9O",
            "EGoSLworU1RBVFVTX0NPREVfQUNUSVZFX1JFUVVFU1RTX0xJTUlUX1ZJT0xB",
            "VElPThBrKgQIHBAdKjIKFFByb3RvY29sVmVyc2lvbk1ham9yEhoKFlBST1RP",
            "Q09MX1ZFUlNJT05fTUFKT1IQAioyChRQcm90b2NvbFZlcnNpb25NaW5vchIa",
            "ChZQUk9UT0NPTF9WRVJTSU9OX01JTk9SEAE="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Shared1.Shared1Reflection.Descriptor, global::AccountAuthorization2.AccountAuthorization2Reflection.Descriptor, global::Historical2.Historical2Reflection.Descriptor, global::Metadata2.Metadata2Reflection.Descriptor, global::MetadataAdmin2.MetadataAdmin2Reflection.Descriptor, global::MarketData2.MarketData2Reflection.Descriptor, global::Order2.Order2Reflection.Descriptor, global::Otc1.Otc1Reflection.Descriptor, global::Rules1.Rules1Reflection.Descriptor, global::Strategy2.Strategy2Reflection.Descriptor, global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor, global::TradeRouting2.TradeRouting2Reflection.Descriptor, global::TradingSession2.TradingSession2Reflection.Descriptor, global::TradingAccount2.TradingAccount2Reflection.Descriptor, global::UserAttribute2.UserAttribute2Reflection.Descriptor, global::UserSession2.UserSession2Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::WebAPI2.ProtocolVersionMajor), typeof(global::WebAPI2.ProtocolVersionMinor), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WebAPI2.ClientMsg), global::WebAPI2.ClientMsg.Parser, new[]{ "Logon", "RestoreOrJoinSession", "Logoff", "PasswordChange", "ObtainDemoCredentials", "UserSessionStateRequest", "Ping", "Pong", "LogonRoutineClient", "PasswordChangeRoutineClient", "SetCollapsingLevelRequest", "InformationRequests", "TradeSubscriptions", "OrderRequests", "MarketDataSubscriptions", "ReadUserAttributeRequests", "ModifyUserAttributeRequests", "TimeAndSalesRequests", "TimeBarRequests", "VolumeProfileRequests", "NonTimedBarRequests", "RuleRequests", "AccountLogonRequests", "AccountPasswordChangeRequests", "AccountLogoffRequests", "MetadataAdminRequests", "OtcRequests", "RfqRequests", "OptionCalculationRequests" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WebAPI2.ServerMsg), global::WebAPI2.ServerMsg.Parser, new[]{ "LogonResult", "RestoreOrJoinSessionResult", "ConcurrentConnectionJoinResults", "LoggedOff", "PasswordChangeResult", "UserMessages", "ObtainDemoCredentialsResults", "UserSessionStateResults", "Ping", "Pong", "LogonRoutineServer", "PasswordChangeRoutineServer", "SetCollapsingLevelResults", "InformationReports", "OrderRequestRejects", "TradeSubscriptionStatuses", "TradeSnapshotCompletions", "OrderStatuses", "PositionStatuses", "CollateralStatuses", "MarketDataSubscriptionStatuses", "RealTimeMarketData", "ReadUserAttributeResults", "ModifyUserAttributeResults", "TimeAndSalesReports", "TimeBarReports", "VolumeProfileReports", "NonTimedBarReports", "RuleResults", "AccountLogonResults", "AccountPasswordChangeResults", "AccountLogoffResults", "MetadataAdminResults", "OtcReports", "RfqReports", "OptionCalculationReports" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WebAPI2.InformationRequest), global::WebAPI2.InformationRequest.Parser, new[]{ "Id", "Subscribe", "AccountsRequest", "SymbolResolutionRequest", "LastStatementBalancesRequest", "CurrencyRatesRequest", "SessionInformationRequest", "HistoricalOrdersRequest", "SymbolsByUnderlyingRequest", "ChildSymbolsRequest", "AtTheMoneyStrikeRequest", "StrategyDefinitionRequest", "SessionTimerangeRequest", "TradingDayTimerangeRequest", "OrderEntitlementRequest", "SymbolCategoryListRequest", "SymbolCategoryRequest", "SymbolListRequest", "SymbolRequest", "EntitlementRequest", "ContractMetadataRequest" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WebAPI2.InformationReport), global::WebAPI2.InformationReport.Parser, new[]{ "Id", "IsReportComplete", "StatusCode", "TextMessage", "AccountsReport", "SymbolResolutionReport", "LastStatementBalancesReport", "CurrencyRatesReport", "SessionInformationReport", "HistoricalOrdersReport", "SymbolsByUnderlyingReport", "ChildSymbolsReport", "AtTheMoneyStrikeReport", "StrategyDefinitionReport", "SessionTimerangeReport", "TradingDayTimerangeReport", "OrderEntitlementReport", "SymbolCategoryListReport", "SymbolCategoryReport", "SymbolListReport", "SymbolReport", "EntitlementReport", "ContractMetadataReport" }, null, new[]{ typeof(global::WebAPI2.InformationReport.Types.StatusCode) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ProtocolVersionMajor {
    /// <summary>
    /// Major number change is required in the next cases (new 'proto' file is necessary):
    /// 1) Protocol is not binary backward compatible with previous versions.
    /// 2) Protocol has lots of changes, which affect to clients' compilation.
    /// </summary>
    [pbr::OriginalName("PROTOCOL_VERSION_MAJOR")] ProtocolVersionMajor = 2,
  }

  public enum ProtocolVersionMinor {
    /// <summary>
    /// Minor number is increased for binary backward compatible protocol versions when new messages and/ or fields are
    /// added without removing/ changing any existing messages and fields (new 'proto' file is not created)
    /// </summary>
    [pbr::OriginalName("PROTOCOL_VERSION_MINOR")] ProtocolVersionMinor = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Client to Server message, must include at least one field.
  /// Logon, LogonRoutineClient, RestoreOrJoinSession or ObtainDemoCredentials are required to be the first and the only message after connection.
  /// Client messages rate is limited, 1000 messages per 10 seconds by default.
  /// If this rate is exceeded then a user message is sent with details and the connection is closed.
  /// NOTE: This and other limits mentioned in this protocol are not guaranteed, they are given for reference only
  /// and are subject to change without prior notice.
  /// </summary>
  public sealed partial class ClientMsg : pb::IMessage<ClientMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientMsg> _parser = new pb::MessageParser<ClientMsg>(() => new ClientMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WebAPI2.Webapi2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMsg(ClientMsg other) : this() {
      logon_ = other.logon_ != null ? other.logon_.Clone() : null;
      restoreOrJoinSession_ = other.restoreOrJoinSession_ != null ? other.restoreOrJoinSession_.Clone() : null;
      logoff_ = other.logoff_ != null ? other.logoff_.Clone() : null;
      passwordChange_ = other.passwordChange_ != null ? other.passwordChange_.Clone() : null;
      obtainDemoCredentials_ = other.obtainDemoCredentials_ != null ? other.obtainDemoCredentials_.Clone() : null;
      userSessionStateRequest_ = other.userSessionStateRequest_ != null ? other.userSessionStateRequest_.Clone() : null;
      ping_ = other.ping_ != null ? other.ping_.Clone() : null;
      pong_ = other.pong_ != null ? other.pong_.Clone() : null;
      logonRoutineClient_ = other.logonRoutineClient_ != null ? other.logonRoutineClient_.Clone() : null;
      passwordChangeRoutineClient_ = other.passwordChangeRoutineClient_ != null ? other.passwordChangeRoutineClient_.Clone() : null;
      setCollapsingLevelRequest_ = other.setCollapsingLevelRequest_ != null ? other.setCollapsingLevelRequest_.Clone() : null;
      informationRequests_ = other.informationRequests_.Clone();
      tradeSubscriptions_ = other.tradeSubscriptions_.Clone();
      orderRequests_ = other.orderRequests_.Clone();
      marketDataSubscriptions_ = other.marketDataSubscriptions_.Clone();
      readUserAttributeRequests_ = other.readUserAttributeRequests_.Clone();
      modifyUserAttributeRequests_ = other.modifyUserAttributeRequests_.Clone();
      timeAndSalesRequests_ = other.timeAndSalesRequests_.Clone();
      timeBarRequests_ = other.timeBarRequests_.Clone();
      volumeProfileRequests_ = other.volumeProfileRequests_.Clone();
      nonTimedBarRequests_ = other.nonTimedBarRequests_.Clone();
      ruleRequests_ = other.ruleRequests_.Clone();
      accountLogonRequests_ = other.accountLogonRequests_.Clone();
      accountPasswordChangeRequests_ = other.accountPasswordChangeRequests_.Clone();
      accountLogoffRequests_ = other.accountLogoffRequests_.Clone();
      metadataAdminRequests_ = other.metadataAdminRequests_.Clone();
      otcRequests_ = other.otcRequests_.Clone();
      rfqRequests_ = other.rfqRequests_.Clone();
      optionCalculationRequests_ = other.optionCalculationRequests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMsg Clone() {
      return new ClientMsg(this);
    }

    /// <summary>Field number for the "logon" field.</summary>
    public const int LogonFieldNumber = 100;
    private global::UserSession2.Logon logon_;
    /// <summary>
    /// Session level messages from client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.Logon Logon {
      get { return logon_; }
      set {
        logon_ = value;
      }
    }

    /// <summary>Field number for the "restore_or_join_session" field.</summary>
    public const int RestoreOrJoinSessionFieldNumber = 101;
    private global::UserSession2.RestoreOrJoinSession restoreOrJoinSession_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.RestoreOrJoinSession RestoreOrJoinSession {
      get { return restoreOrJoinSession_; }
      set {
        restoreOrJoinSession_ = value;
      }
    }

    /// <summary>Field number for the "logoff" field.</summary>
    public const int LogoffFieldNumber = 102;
    private global::UserSession2.Logoff logoff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.Logoff Logoff {
      get { return logoff_; }
      set {
        logoff_ = value;
      }
    }

    /// <summary>Field number for the "password_change" field.</summary>
    public const int PasswordChangeFieldNumber = 103;
    private global::UserSession2.PasswordChange passwordChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.PasswordChange PasswordChange {
      get { return passwordChange_; }
      set {
        passwordChange_ = value;
      }
    }

    /// <summary>Field number for the "obtain_demo_credentials" field.</summary>
    public const int ObtainDemoCredentialsFieldNumber = 104;
    private global::UserSession2.ObtainDemoCredentials obtainDemoCredentials_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.ObtainDemoCredentials ObtainDemoCredentials {
      get { return obtainDemoCredentials_; }
      set {
        obtainDemoCredentials_ = value;
      }
    }

    /// <summary>Field number for the "user_session_state_request" field.</summary>
    public const int UserSessionStateRequestFieldNumber = 105;
    private global::UserSession2.UserSessionStateRequest userSessionStateRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.UserSessionStateRequest UserSessionStateRequest {
      get { return userSessionStateRequest_; }
      set {
        userSessionStateRequest_ = value;
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 107;
    private global::UserSession2.Ping ping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.Ping Ping {
      get { return ping_; }
      set {
        ping_ = value;
      }
    }

    /// <summary>Field number for the "pong" field.</summary>
    public const int PongFieldNumber = 108;
    private global::UserSession2.Pong pong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.Pong Pong {
      get { return pong_; }
      set {
        pong_ = value;
      }
    }

    /// <summary>Field number for the "logon_routine_client" field.</summary>
    public const int LogonRoutineClientFieldNumber = 109;
    private global::UserSession2.LogonRoutineClient logonRoutineClient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.LogonRoutineClient LogonRoutineClient {
      get { return logonRoutineClient_; }
      set {
        logonRoutineClient_ = value;
      }
    }

    /// <summary>Field number for the "password_change_routine_client" field.</summary>
    public const int PasswordChangeRoutineClientFieldNumber = 110;
    private global::UserSession2.PasswordChangeRoutineClient passwordChangeRoutineClient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.PasswordChangeRoutineClient PasswordChangeRoutineClient {
      get { return passwordChangeRoutineClient_; }
      set {
        passwordChangeRoutineClient_ = value;
      }
    }

    /// <summary>Field number for the "set_collapsing_level_request" field.</summary>
    public const int SetCollapsingLevelRequestFieldNumber = 111;
    private global::UserSession2.SetCollapsingLevelRequest setCollapsingLevelRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.SetCollapsingLevelRequest SetCollapsingLevelRequest {
      get { return setCollapsingLevelRequest_; }
      set {
        setCollapsingLevelRequest_ = value;
      }
    }

    /// <summary>Field number for the "information_requests" field.</summary>
    public const int InformationRequestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::WebAPI2.InformationRequest> _repeated_informationRequests_codec
        = pb::FieldCodec.ForMessage(10, global::WebAPI2.InformationRequest.Parser);
    private readonly pbc::RepeatedField<global::WebAPI2.InformationRequest> informationRequests_ = new pbc::RepeatedField<global::WebAPI2.InformationRequest>();
    /// <summary>
    /// Requests for different information with optional subscription for updates.
    /// There are the following limits for information requests:
    /// 1) Information requests rate is limited, 1000 requests per 100 seconds by default.
    /// 2) Number of simultaneous information subscriptions is limited, a separate limit per information request type is used.
    /// 3) Number of overall information requests per session is limited, a separate limit per information request type is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WebAPI2.InformationRequest> InformationRequests {
      get { return informationRequests_; }
    }

    /// <summary>Field number for the "trade_subscriptions" field.</summary>
    public const int TradeSubscriptionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TradeRouting2.TradeSubscription> _repeated_tradeSubscriptions_codec
        = pb::FieldCodec.ForMessage(18, global::TradeRouting2.TradeSubscription.Parser);
    private readonly pbc::RepeatedField<global::TradeRouting2.TradeSubscription> tradeSubscriptions_ = new pbc::RepeatedField<global::TradeRouting2.TradeSubscription>();
    /// <summary>
    /// Trade routing subscriptions from client.
    /// There are the following limits for trade routing subscriptions:
    /// 1) Number of simultaneous subscriptions is limited, 200 by default.
    /// 2) Total number of either explicitly or implicitly subscribed accounts is limited, 5000 by default.
    ///    Any subscription that leads to exceeding this limit is failed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TradeRouting2.TradeSubscription> TradeSubscriptions {
      get { return tradeSubscriptions_; }
    }

    /// <summary>Field number for the "order_requests" field.</summary>
    public const int OrderRequestsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Order2.OrderRequest> _repeated_orderRequests_codec
        = pb::FieldCodec.ForMessage(26, global::Order2.OrderRequest.Parser);
    private readonly pbc::RepeatedField<global::Order2.OrderRequest> orderRequests_ = new pbc::RepeatedField<global::Order2.OrderRequest>();
    /// <summary>
    /// Order requests.
    /// Requests rate is limited, 300 orders per 10 seconds by default. 
    /// This is total limit for order actions amount all accounts within the session. 
    /// There is also per account limit which is 10 order requests per second by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Order2.OrderRequest> OrderRequests {
      get { return orderRequests_; }
    }

    /// <summary>Field number for the "market_data_subscriptions" field.</summary>
    public const int MarketDataSubscriptionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::MarketData2.MarketDataSubscription> _repeated_marketDataSubscriptions_codec
        = pb::FieldCodec.ForMessage(34, global::MarketData2.MarketDataSubscription.Parser);
    private readonly pbc::RepeatedField<global::MarketData2.MarketDataSubscription> marketDataSubscriptions_ = new pbc::RepeatedField<global::MarketData2.MarketDataSubscription>();
    /// <summary>
    /// Market data subscriptions from client.
    /// Subscriptions number is limited, 200 simultaneous subscriptions by default.
    /// Subscriptions on options strikes (puts and calls) of the same option maturity are considered as a single subscription within the limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MarketData2.MarketDataSubscription> MarketDataSubscriptions {
      get { return marketDataSubscriptions_; }
    }

    /// <summary>Field number for the "read_user_attribute_requests" field.</summary>
    public const int ReadUserAttributeRequestsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::UserAttribute2.ReadUserAttributeRequest> _repeated_readUserAttributeRequests_codec
        = pb::FieldCodec.ForMessage(42, global::UserAttribute2.ReadUserAttributeRequest.Parser);
    private readonly pbc::RepeatedField<global::UserAttribute2.ReadUserAttributeRequest> readUserAttributeRequests_ = new pbc::RepeatedField<global::UserAttribute2.ReadUserAttributeRequest>();
    /// <summary>
    /// Requests for manipulations with user attributes (linked to the user and client_app_id).
    /// There are the following limits for user attributes:
    ///  1) storage space is limited, 100 KB by default for a user/client_app_id pair;
    ///  2) requests rate is limited, 10 requests per 100 seconds by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserAttribute2.ReadUserAttributeRequest> ReadUserAttributeRequests {
      get { return readUserAttributeRequests_; }
    }

    /// <summary>Field number for the "modify_user_attribute_requests" field.</summary>
    public const int ModifyUserAttributeRequestsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::UserAttribute2.ModifyUserAttributeRequest> _repeated_modifyUserAttributeRequests_codec
        = pb::FieldCodec.ForMessage(50, global::UserAttribute2.ModifyUserAttributeRequest.Parser);
    private readonly pbc::RepeatedField<global::UserAttribute2.ModifyUserAttributeRequest> modifyUserAttributeRequests_ = new pbc::RepeatedField<global::UserAttribute2.ModifyUserAttributeRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserAttribute2.ModifyUserAttributeRequest> ModifyUserAttributeRequests {
      get { return modifyUserAttributeRequests_; }
    }

    /// <summary>Field number for the "time_and_sales_requests" field.</summary>
    public const int TimeAndSalesRequestsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Historical2.TimeAndSalesRequest> _repeated_timeAndSalesRequests_codec
        = pb::FieldCodec.ForMessage(58, global::Historical2.TimeAndSalesRequest.Parser);
    private readonly pbc::RepeatedField<global::Historical2.TimeAndSalesRequest> timeAndSalesRequests_ = new pbc::RepeatedField<global::Historical2.TimeAndSalesRequest>();
    /// <summary>
    /// Historical data requests.
    /// Number of simultaneous historical requests in processing is limited, 10 by default (all types of historical requests together).
    /// Number of simultaneous historical requests with subscription for updates is limited, 50 by default (all types of historical requests together).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.TimeAndSalesRequest> TimeAndSalesRequests {
      get { return timeAndSalesRequests_; }
    }

    /// <summary>Field number for the "time_bar_requests" field.</summary>
    public const int TimeBarRequestsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Historical2.TimeBarRequest> _repeated_timeBarRequests_codec
        = pb::FieldCodec.ForMessage(66, global::Historical2.TimeBarRequest.Parser);
    private readonly pbc::RepeatedField<global::Historical2.TimeBarRequest> timeBarRequests_ = new pbc::RepeatedField<global::Historical2.TimeBarRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.TimeBarRequest> TimeBarRequests {
      get { return timeBarRequests_; }
    }

    /// <summary>Field number for the "volume_profile_requests" field.</summary>
    public const int VolumeProfileRequestsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Historical2.VolumeProfileRequest> _repeated_volumeProfileRequests_codec
        = pb::FieldCodec.ForMessage(74, global::Historical2.VolumeProfileRequest.Parser);
    private readonly pbc::RepeatedField<global::Historical2.VolumeProfileRequest> volumeProfileRequests_ = new pbc::RepeatedField<global::Historical2.VolumeProfileRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.VolumeProfileRequest> VolumeProfileRequests {
      get { return volumeProfileRequests_; }
    }

    /// <summary>Field number for the "non_timed_bar_requests" field.</summary>
    public const int NonTimedBarRequestsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Historical2.NonTimedBarRequest> _repeated_nonTimedBarRequests_codec
        = pb::FieldCodec.ForMessage(114, global::Historical2.NonTimedBarRequest.Parser);
    private readonly pbc::RepeatedField<global::Historical2.NonTimedBarRequest> nonTimedBarRequests_ = new pbc::RepeatedField<global::Historical2.NonTimedBarRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.NonTimedBarRequest> NonTimedBarRequests {
      get { return nonTimedBarRequests_; }
    }

    /// <summary>Field number for the "rule_requests" field.</summary>
    public const int RuleRequestsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Rules1.RuleRequest> _repeated_ruleRequests_codec
        = pb::FieldCodec.ForMessage(82, global::Rules1.RuleRequest.Parser);
    private readonly pbc::RepeatedField<global::Rules1.RuleRequest> ruleRequests_ = new pbc::RepeatedField<global::Rules1.RuleRequest>();
    /// <summary>
    /// Rules requests.
    /// Number of simultaneous defined rules is limited, 100 by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rules1.RuleRequest> RuleRequests {
      get { return ruleRequests_; }
    }

    /// <summary>Field number for the "account_logon_requests" field.</summary>
    public const int AccountLogonRequestsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::AccountAuthorization2.AccountLogon> _repeated_accountLogonRequests_codec
        = pb::FieldCodec.ForMessage(90, global::AccountAuthorization2.AccountLogon.Parser);
    private readonly pbc::RepeatedField<global::AccountAuthorization2.AccountLogon> accountLogonRequests_ = new pbc::RepeatedField<global::AccountAuthorization2.AccountLogon>();
    /// <summary>
    /// Messages for accounts that require separate authorization process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AccountAuthorization2.AccountLogon> AccountLogonRequests {
      get { return accountLogonRequests_; }
    }

    /// <summary>Field number for the "account_password_change_requests" field.</summary>
    public const int AccountPasswordChangeRequestsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::AccountAuthorization2.AccountPasswordChange> _repeated_accountPasswordChangeRequests_codec
        = pb::FieldCodec.ForMessage(98, global::AccountAuthorization2.AccountPasswordChange.Parser);
    private readonly pbc::RepeatedField<global::AccountAuthorization2.AccountPasswordChange> accountPasswordChangeRequests_ = new pbc::RepeatedField<global::AccountAuthorization2.AccountPasswordChange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AccountAuthorization2.AccountPasswordChange> AccountPasswordChangeRequests {
      get { return accountPasswordChangeRequests_; }
    }

    /// <summary>Field number for the "account_logoff_requests" field.</summary>
    public const int AccountLogoffRequestsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::AccountAuthorization2.AccountLogoff> _repeated_accountLogoffRequests_codec
        = pb::FieldCodec.ForMessage(106, global::AccountAuthorization2.AccountLogoff.Parser);
    private readonly pbc::RepeatedField<global::AccountAuthorization2.AccountLogoff> accountLogoffRequests_ = new pbc::RepeatedField<global::AccountAuthorization2.AccountLogoff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AccountAuthorization2.AccountLogoff> AccountLogoffRequests {
      get { return accountLogoffRequests_; }
    }

    /// <summary>Field number for the "metadata_admin_requests" field.</summary>
    public const int MetadataAdminRequestsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::MetadataAdmin2.MetadataAdminRequest> _repeated_metadataAdminRequests_codec
        = pb::FieldCodec.ForMessage(122, global::MetadataAdmin2.MetadataAdminRequest.Parser);
    private readonly pbc::RepeatedField<global::MetadataAdmin2.MetadataAdminRequest> metadataAdminRequests_ = new pbc::RepeatedField<global::MetadataAdmin2.MetadataAdminRequest>();
    /// <summary>
    /// Meta-data related request is an administrative message to manipulate
    /// Security and instrument settings.
    /// It requires a special permission.
    /// Requests rate is limited, 100 requests per 100 seconds by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MetadataAdmin2.MetadataAdminRequest> MetadataAdminRequests {
      get { return metadataAdminRequests_; }
    }

    /// <summary>Field number for the "otc_requests" field.</summary>
    public const int OtcRequestsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Otc1.OtcRequest> _repeated_otcRequests_codec
        = pb::FieldCodec.ForMessage(130, global::Otc1.OtcRequest.Parser);
    private readonly pbc::RepeatedField<global::Otc1.OtcRequest> otcRequests_ = new pbc::RepeatedField<global::Otc1.OtcRequest>();
    /// <summary>
    /// OTC related request.
    /// Used to receive data from OTC and manipulate OTC instances.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Otc1.OtcRequest> OtcRequests {
      get { return otcRequests_; }
    }

    /// <summary>Field number for the "rfq_requests" field.</summary>
    public const int RfqRequestsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::MarketData2.RFQRequest> _repeated_rfqRequests_codec
        = pb::FieldCodec.ForMessage(138, global::MarketData2.RFQRequest.Parser);
    private readonly pbc::RepeatedField<global::MarketData2.RFQRequest> rfqRequests_ = new pbc::RepeatedField<global::MarketData2.RFQRequest>();
    /// <summary>
    /// RFQ request(s).
    /// Requests rate is limited, 10 requests per second per account by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MarketData2.RFQRequest> RfqRequests {
      get { return rfqRequests_; }
    }

    /// <summary>Field number for the "option_calculation_requests" field.</summary>
    public const int OptionCalculationRequestsFieldNumber = 18;
    private static readonly pb::FieldCodec<global::MarketData2.OptionCalculationRequest> _repeated_optionCalculationRequests_codec
        = pb::FieldCodec.ForMessage(146, global::MarketData2.OptionCalculationRequest.Parser);
    private readonly pbc::RepeatedField<global::MarketData2.OptionCalculationRequest> optionCalculationRequests_ = new pbc::RepeatedField<global::MarketData2.OptionCalculationRequest>();
    /// <summary>
    /// Option calculation request.
    /// Number of simultaneous option calculation requests with subscription for updates is limited, 10 by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MarketData2.OptionCalculationRequest> OptionCalculationRequests {
      get { return optionCalculationRequests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Logon, other.Logon)) return false;
      if (!object.Equals(RestoreOrJoinSession, other.RestoreOrJoinSession)) return false;
      if (!object.Equals(Logoff, other.Logoff)) return false;
      if (!object.Equals(PasswordChange, other.PasswordChange)) return false;
      if (!object.Equals(ObtainDemoCredentials, other.ObtainDemoCredentials)) return false;
      if (!object.Equals(UserSessionStateRequest, other.UserSessionStateRequest)) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(Pong, other.Pong)) return false;
      if (!object.Equals(LogonRoutineClient, other.LogonRoutineClient)) return false;
      if (!object.Equals(PasswordChangeRoutineClient, other.PasswordChangeRoutineClient)) return false;
      if (!object.Equals(SetCollapsingLevelRequest, other.SetCollapsingLevelRequest)) return false;
      if(!informationRequests_.Equals(other.informationRequests_)) return false;
      if(!tradeSubscriptions_.Equals(other.tradeSubscriptions_)) return false;
      if(!orderRequests_.Equals(other.orderRequests_)) return false;
      if(!marketDataSubscriptions_.Equals(other.marketDataSubscriptions_)) return false;
      if(!readUserAttributeRequests_.Equals(other.readUserAttributeRequests_)) return false;
      if(!modifyUserAttributeRequests_.Equals(other.modifyUserAttributeRequests_)) return false;
      if(!timeAndSalesRequests_.Equals(other.timeAndSalesRequests_)) return false;
      if(!timeBarRequests_.Equals(other.timeBarRequests_)) return false;
      if(!volumeProfileRequests_.Equals(other.volumeProfileRequests_)) return false;
      if(!nonTimedBarRequests_.Equals(other.nonTimedBarRequests_)) return false;
      if(!ruleRequests_.Equals(other.ruleRequests_)) return false;
      if(!accountLogonRequests_.Equals(other.accountLogonRequests_)) return false;
      if(!accountPasswordChangeRequests_.Equals(other.accountPasswordChangeRequests_)) return false;
      if(!accountLogoffRequests_.Equals(other.accountLogoffRequests_)) return false;
      if(!metadataAdminRequests_.Equals(other.metadataAdminRequests_)) return false;
      if(!otcRequests_.Equals(other.otcRequests_)) return false;
      if(!rfqRequests_.Equals(other.rfqRequests_)) return false;
      if(!optionCalculationRequests_.Equals(other.optionCalculationRequests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (logon_ != null) hash ^= Logon.GetHashCode();
      if (restoreOrJoinSession_ != null) hash ^= RestoreOrJoinSession.GetHashCode();
      if (logoff_ != null) hash ^= Logoff.GetHashCode();
      if (passwordChange_ != null) hash ^= PasswordChange.GetHashCode();
      if (obtainDemoCredentials_ != null) hash ^= ObtainDemoCredentials.GetHashCode();
      if (userSessionStateRequest_ != null) hash ^= UserSessionStateRequest.GetHashCode();
      if (ping_ != null) hash ^= Ping.GetHashCode();
      if (pong_ != null) hash ^= Pong.GetHashCode();
      if (logonRoutineClient_ != null) hash ^= LogonRoutineClient.GetHashCode();
      if (passwordChangeRoutineClient_ != null) hash ^= PasswordChangeRoutineClient.GetHashCode();
      if (setCollapsingLevelRequest_ != null) hash ^= SetCollapsingLevelRequest.GetHashCode();
      hash ^= informationRequests_.GetHashCode();
      hash ^= tradeSubscriptions_.GetHashCode();
      hash ^= orderRequests_.GetHashCode();
      hash ^= marketDataSubscriptions_.GetHashCode();
      hash ^= readUserAttributeRequests_.GetHashCode();
      hash ^= modifyUserAttributeRequests_.GetHashCode();
      hash ^= timeAndSalesRequests_.GetHashCode();
      hash ^= timeBarRequests_.GetHashCode();
      hash ^= volumeProfileRequests_.GetHashCode();
      hash ^= nonTimedBarRequests_.GetHashCode();
      hash ^= ruleRequests_.GetHashCode();
      hash ^= accountLogonRequests_.GetHashCode();
      hash ^= accountPasswordChangeRequests_.GetHashCode();
      hash ^= accountLogoffRequests_.GetHashCode();
      hash ^= metadataAdminRequests_.GetHashCode();
      hash ^= otcRequests_.GetHashCode();
      hash ^= rfqRequests_.GetHashCode();
      hash ^= optionCalculationRequests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      informationRequests_.WriteTo(output, _repeated_informationRequests_codec);
      tradeSubscriptions_.WriteTo(output, _repeated_tradeSubscriptions_codec);
      orderRequests_.WriteTo(output, _repeated_orderRequests_codec);
      marketDataSubscriptions_.WriteTo(output, _repeated_marketDataSubscriptions_codec);
      readUserAttributeRequests_.WriteTo(output, _repeated_readUserAttributeRequests_codec);
      modifyUserAttributeRequests_.WriteTo(output, _repeated_modifyUserAttributeRequests_codec);
      timeAndSalesRequests_.WriteTo(output, _repeated_timeAndSalesRequests_codec);
      timeBarRequests_.WriteTo(output, _repeated_timeBarRequests_codec);
      volumeProfileRequests_.WriteTo(output, _repeated_volumeProfileRequests_codec);
      ruleRequests_.WriteTo(output, _repeated_ruleRequests_codec);
      accountLogonRequests_.WriteTo(output, _repeated_accountLogonRequests_codec);
      accountPasswordChangeRequests_.WriteTo(output, _repeated_accountPasswordChangeRequests_codec);
      accountLogoffRequests_.WriteTo(output, _repeated_accountLogoffRequests_codec);
      nonTimedBarRequests_.WriteTo(output, _repeated_nonTimedBarRequests_codec);
      metadataAdminRequests_.WriteTo(output, _repeated_metadataAdminRequests_codec);
      otcRequests_.WriteTo(output, _repeated_otcRequests_codec);
      rfqRequests_.WriteTo(output, _repeated_rfqRequests_codec);
      optionCalculationRequests_.WriteTo(output, _repeated_optionCalculationRequests_codec);
      if (logon_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Logon);
      }
      if (restoreOrJoinSession_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(RestoreOrJoinSession);
      }
      if (logoff_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(Logoff);
      }
      if (passwordChange_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(PasswordChange);
      }
      if (obtainDemoCredentials_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(ObtainDemoCredentials);
      }
      if (userSessionStateRequest_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(UserSessionStateRequest);
      }
      if (ping_ != null) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(Ping);
      }
      if (pong_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(Pong);
      }
      if (logonRoutineClient_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(LogonRoutineClient);
      }
      if (passwordChangeRoutineClient_ != null) {
        output.WriteRawTag(242, 6);
        output.WriteMessage(PasswordChangeRoutineClient);
      }
      if (setCollapsingLevelRequest_ != null) {
        output.WriteRawTag(250, 6);
        output.WriteMessage(SetCollapsingLevelRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      informationRequests_.WriteTo(ref output, _repeated_informationRequests_codec);
      tradeSubscriptions_.WriteTo(ref output, _repeated_tradeSubscriptions_codec);
      orderRequests_.WriteTo(ref output, _repeated_orderRequests_codec);
      marketDataSubscriptions_.WriteTo(ref output, _repeated_marketDataSubscriptions_codec);
      readUserAttributeRequests_.WriteTo(ref output, _repeated_readUserAttributeRequests_codec);
      modifyUserAttributeRequests_.WriteTo(ref output, _repeated_modifyUserAttributeRequests_codec);
      timeAndSalesRequests_.WriteTo(ref output, _repeated_timeAndSalesRequests_codec);
      timeBarRequests_.WriteTo(ref output, _repeated_timeBarRequests_codec);
      volumeProfileRequests_.WriteTo(ref output, _repeated_volumeProfileRequests_codec);
      ruleRequests_.WriteTo(ref output, _repeated_ruleRequests_codec);
      accountLogonRequests_.WriteTo(ref output, _repeated_accountLogonRequests_codec);
      accountPasswordChangeRequests_.WriteTo(ref output, _repeated_accountPasswordChangeRequests_codec);
      accountLogoffRequests_.WriteTo(ref output, _repeated_accountLogoffRequests_codec);
      nonTimedBarRequests_.WriteTo(ref output, _repeated_nonTimedBarRequests_codec);
      metadataAdminRequests_.WriteTo(ref output, _repeated_metadataAdminRequests_codec);
      otcRequests_.WriteTo(ref output, _repeated_otcRequests_codec);
      rfqRequests_.WriteTo(ref output, _repeated_rfqRequests_codec);
      optionCalculationRequests_.WriteTo(ref output, _repeated_optionCalculationRequests_codec);
      if (logon_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Logon);
      }
      if (restoreOrJoinSession_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(RestoreOrJoinSession);
      }
      if (logoff_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(Logoff);
      }
      if (passwordChange_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(PasswordChange);
      }
      if (obtainDemoCredentials_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(ObtainDemoCredentials);
      }
      if (userSessionStateRequest_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(UserSessionStateRequest);
      }
      if (ping_ != null) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(Ping);
      }
      if (pong_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(Pong);
      }
      if (logonRoutineClient_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(LogonRoutineClient);
      }
      if (passwordChangeRoutineClient_ != null) {
        output.WriteRawTag(242, 6);
        output.WriteMessage(PasswordChangeRoutineClient);
      }
      if (setCollapsingLevelRequest_ != null) {
        output.WriteRawTag(250, 6);
        output.WriteMessage(SetCollapsingLevelRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (logon_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Logon);
      }
      if (restoreOrJoinSession_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RestoreOrJoinSession);
      }
      if (logoff_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Logoff);
      }
      if (passwordChange_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PasswordChange);
      }
      if (obtainDemoCredentials_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ObtainDemoCredentials);
      }
      if (userSessionStateRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserSessionStateRequest);
      }
      if (ping_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (pong_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pong);
      }
      if (logonRoutineClient_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LogonRoutineClient);
      }
      if (passwordChangeRoutineClient_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PasswordChangeRoutineClient);
      }
      if (setCollapsingLevelRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetCollapsingLevelRequest);
      }
      size += informationRequests_.CalculateSize(_repeated_informationRequests_codec);
      size += tradeSubscriptions_.CalculateSize(_repeated_tradeSubscriptions_codec);
      size += orderRequests_.CalculateSize(_repeated_orderRequests_codec);
      size += marketDataSubscriptions_.CalculateSize(_repeated_marketDataSubscriptions_codec);
      size += readUserAttributeRequests_.CalculateSize(_repeated_readUserAttributeRequests_codec);
      size += modifyUserAttributeRequests_.CalculateSize(_repeated_modifyUserAttributeRequests_codec);
      size += timeAndSalesRequests_.CalculateSize(_repeated_timeAndSalesRequests_codec);
      size += timeBarRequests_.CalculateSize(_repeated_timeBarRequests_codec);
      size += volumeProfileRequests_.CalculateSize(_repeated_volumeProfileRequests_codec);
      size += nonTimedBarRequests_.CalculateSize(_repeated_nonTimedBarRequests_codec);
      size += ruleRequests_.CalculateSize(_repeated_ruleRequests_codec);
      size += accountLogonRequests_.CalculateSize(_repeated_accountLogonRequests_codec);
      size += accountPasswordChangeRequests_.CalculateSize(_repeated_accountPasswordChangeRequests_codec);
      size += accountLogoffRequests_.CalculateSize(_repeated_accountLogoffRequests_codec);
      size += metadataAdminRequests_.CalculateSize(_repeated_metadataAdminRequests_codec);
      size += otcRequests_.CalculateSize(_repeated_otcRequests_codec);
      size += rfqRequests_.CalculateSize(_repeated_rfqRequests_codec);
      size += optionCalculationRequests_.CalculateSize(_repeated_optionCalculationRequests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientMsg other) {
      if (other == null) {
        return;
      }
      if (other.logon_ != null) {
        if (logon_ == null) {
          Logon = new global::UserSession2.Logon();
        }
        Logon.MergeFrom(other.Logon);
      }
      if (other.restoreOrJoinSession_ != null) {
        if (restoreOrJoinSession_ == null) {
          RestoreOrJoinSession = new global::UserSession2.RestoreOrJoinSession();
        }
        RestoreOrJoinSession.MergeFrom(other.RestoreOrJoinSession);
      }
      if (other.logoff_ != null) {
        if (logoff_ == null) {
          Logoff = new global::UserSession2.Logoff();
        }
        Logoff.MergeFrom(other.Logoff);
      }
      if (other.passwordChange_ != null) {
        if (passwordChange_ == null) {
          PasswordChange = new global::UserSession2.PasswordChange();
        }
        PasswordChange.MergeFrom(other.PasswordChange);
      }
      if (other.obtainDemoCredentials_ != null) {
        if (obtainDemoCredentials_ == null) {
          ObtainDemoCredentials = new global::UserSession2.ObtainDemoCredentials();
        }
        ObtainDemoCredentials.MergeFrom(other.ObtainDemoCredentials);
      }
      if (other.userSessionStateRequest_ != null) {
        if (userSessionStateRequest_ == null) {
          UserSessionStateRequest = new global::UserSession2.UserSessionStateRequest();
        }
        UserSessionStateRequest.MergeFrom(other.UserSessionStateRequest);
      }
      if (other.ping_ != null) {
        if (ping_ == null) {
          Ping = new global::UserSession2.Ping();
        }
        Ping.MergeFrom(other.Ping);
      }
      if (other.pong_ != null) {
        if (pong_ == null) {
          Pong = new global::UserSession2.Pong();
        }
        Pong.MergeFrom(other.Pong);
      }
      if (other.logonRoutineClient_ != null) {
        if (logonRoutineClient_ == null) {
          LogonRoutineClient = new global::UserSession2.LogonRoutineClient();
        }
        LogonRoutineClient.MergeFrom(other.LogonRoutineClient);
      }
      if (other.passwordChangeRoutineClient_ != null) {
        if (passwordChangeRoutineClient_ == null) {
          PasswordChangeRoutineClient = new global::UserSession2.PasswordChangeRoutineClient();
        }
        PasswordChangeRoutineClient.MergeFrom(other.PasswordChangeRoutineClient);
      }
      if (other.setCollapsingLevelRequest_ != null) {
        if (setCollapsingLevelRequest_ == null) {
          SetCollapsingLevelRequest = new global::UserSession2.SetCollapsingLevelRequest();
        }
        SetCollapsingLevelRequest.MergeFrom(other.SetCollapsingLevelRequest);
      }
      informationRequests_.Add(other.informationRequests_);
      tradeSubscriptions_.Add(other.tradeSubscriptions_);
      orderRequests_.Add(other.orderRequests_);
      marketDataSubscriptions_.Add(other.marketDataSubscriptions_);
      readUserAttributeRequests_.Add(other.readUserAttributeRequests_);
      modifyUserAttributeRequests_.Add(other.modifyUserAttributeRequests_);
      timeAndSalesRequests_.Add(other.timeAndSalesRequests_);
      timeBarRequests_.Add(other.timeBarRequests_);
      volumeProfileRequests_.Add(other.volumeProfileRequests_);
      nonTimedBarRequests_.Add(other.nonTimedBarRequests_);
      ruleRequests_.Add(other.ruleRequests_);
      accountLogonRequests_.Add(other.accountLogonRequests_);
      accountPasswordChangeRequests_.Add(other.accountPasswordChangeRequests_);
      accountLogoffRequests_.Add(other.accountLogoffRequests_);
      metadataAdminRequests_.Add(other.metadataAdminRequests_);
      otcRequests_.Add(other.otcRequests_);
      rfqRequests_.Add(other.rfqRequests_);
      optionCalculationRequests_.Add(other.optionCalculationRequests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            informationRequests_.AddEntriesFrom(input, _repeated_informationRequests_codec);
            break;
          }
          case 18: {
            tradeSubscriptions_.AddEntriesFrom(input, _repeated_tradeSubscriptions_codec);
            break;
          }
          case 26: {
            orderRequests_.AddEntriesFrom(input, _repeated_orderRequests_codec);
            break;
          }
          case 34: {
            marketDataSubscriptions_.AddEntriesFrom(input, _repeated_marketDataSubscriptions_codec);
            break;
          }
          case 42: {
            readUserAttributeRequests_.AddEntriesFrom(input, _repeated_readUserAttributeRequests_codec);
            break;
          }
          case 50: {
            modifyUserAttributeRequests_.AddEntriesFrom(input, _repeated_modifyUserAttributeRequests_codec);
            break;
          }
          case 58: {
            timeAndSalesRequests_.AddEntriesFrom(input, _repeated_timeAndSalesRequests_codec);
            break;
          }
          case 66: {
            timeBarRequests_.AddEntriesFrom(input, _repeated_timeBarRequests_codec);
            break;
          }
          case 74: {
            volumeProfileRequests_.AddEntriesFrom(input, _repeated_volumeProfileRequests_codec);
            break;
          }
          case 82: {
            ruleRequests_.AddEntriesFrom(input, _repeated_ruleRequests_codec);
            break;
          }
          case 90: {
            accountLogonRequests_.AddEntriesFrom(input, _repeated_accountLogonRequests_codec);
            break;
          }
          case 98: {
            accountPasswordChangeRequests_.AddEntriesFrom(input, _repeated_accountPasswordChangeRequests_codec);
            break;
          }
          case 106: {
            accountLogoffRequests_.AddEntriesFrom(input, _repeated_accountLogoffRequests_codec);
            break;
          }
          case 114: {
            nonTimedBarRequests_.AddEntriesFrom(input, _repeated_nonTimedBarRequests_codec);
            break;
          }
          case 122: {
            metadataAdminRequests_.AddEntriesFrom(input, _repeated_metadataAdminRequests_codec);
            break;
          }
          case 130: {
            otcRequests_.AddEntriesFrom(input, _repeated_otcRequests_codec);
            break;
          }
          case 138: {
            rfqRequests_.AddEntriesFrom(input, _repeated_rfqRequests_codec);
            break;
          }
          case 146: {
            optionCalculationRequests_.AddEntriesFrom(input, _repeated_optionCalculationRequests_codec);
            break;
          }
          case 802: {
            if (logon_ == null) {
              Logon = new global::UserSession2.Logon();
            }
            input.ReadMessage(Logon);
            break;
          }
          case 810: {
            if (restoreOrJoinSession_ == null) {
              RestoreOrJoinSession = new global::UserSession2.RestoreOrJoinSession();
            }
            input.ReadMessage(RestoreOrJoinSession);
            break;
          }
          case 818: {
            if (logoff_ == null) {
              Logoff = new global::UserSession2.Logoff();
            }
            input.ReadMessage(Logoff);
            break;
          }
          case 826: {
            if (passwordChange_ == null) {
              PasswordChange = new global::UserSession2.PasswordChange();
            }
            input.ReadMessage(PasswordChange);
            break;
          }
          case 834: {
            if (obtainDemoCredentials_ == null) {
              ObtainDemoCredentials = new global::UserSession2.ObtainDemoCredentials();
            }
            input.ReadMessage(ObtainDemoCredentials);
            break;
          }
          case 842: {
            if (userSessionStateRequest_ == null) {
              UserSessionStateRequest = new global::UserSession2.UserSessionStateRequest();
            }
            input.ReadMessage(UserSessionStateRequest);
            break;
          }
          case 858: {
            if (ping_ == null) {
              Ping = new global::UserSession2.Ping();
            }
            input.ReadMessage(Ping);
            break;
          }
          case 866: {
            if (pong_ == null) {
              Pong = new global::UserSession2.Pong();
            }
            input.ReadMessage(Pong);
            break;
          }
          case 874: {
            if (logonRoutineClient_ == null) {
              LogonRoutineClient = new global::UserSession2.LogonRoutineClient();
            }
            input.ReadMessage(LogonRoutineClient);
            break;
          }
          case 882: {
            if (passwordChangeRoutineClient_ == null) {
              PasswordChangeRoutineClient = new global::UserSession2.PasswordChangeRoutineClient();
            }
            input.ReadMessage(PasswordChangeRoutineClient);
            break;
          }
          case 890: {
            if (setCollapsingLevelRequest_ == null) {
              SetCollapsingLevelRequest = new global::UserSession2.SetCollapsingLevelRequest();
            }
            input.ReadMessage(SetCollapsingLevelRequest);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            informationRequests_.AddEntriesFrom(ref input, _repeated_informationRequests_codec);
            break;
          }
          case 18: {
            tradeSubscriptions_.AddEntriesFrom(ref input, _repeated_tradeSubscriptions_codec);
            break;
          }
          case 26: {
            orderRequests_.AddEntriesFrom(ref input, _repeated_orderRequests_codec);
            break;
          }
          case 34: {
            marketDataSubscriptions_.AddEntriesFrom(ref input, _repeated_marketDataSubscriptions_codec);
            break;
          }
          case 42: {
            readUserAttributeRequests_.AddEntriesFrom(ref input, _repeated_readUserAttributeRequests_codec);
            break;
          }
          case 50: {
            modifyUserAttributeRequests_.AddEntriesFrom(ref input, _repeated_modifyUserAttributeRequests_codec);
            break;
          }
          case 58: {
            timeAndSalesRequests_.AddEntriesFrom(ref input, _repeated_timeAndSalesRequests_codec);
            break;
          }
          case 66: {
            timeBarRequests_.AddEntriesFrom(ref input, _repeated_timeBarRequests_codec);
            break;
          }
          case 74: {
            volumeProfileRequests_.AddEntriesFrom(ref input, _repeated_volumeProfileRequests_codec);
            break;
          }
          case 82: {
            ruleRequests_.AddEntriesFrom(ref input, _repeated_ruleRequests_codec);
            break;
          }
          case 90: {
            accountLogonRequests_.AddEntriesFrom(ref input, _repeated_accountLogonRequests_codec);
            break;
          }
          case 98: {
            accountPasswordChangeRequests_.AddEntriesFrom(ref input, _repeated_accountPasswordChangeRequests_codec);
            break;
          }
          case 106: {
            accountLogoffRequests_.AddEntriesFrom(ref input, _repeated_accountLogoffRequests_codec);
            break;
          }
          case 114: {
            nonTimedBarRequests_.AddEntriesFrom(ref input, _repeated_nonTimedBarRequests_codec);
            break;
          }
          case 122: {
            metadataAdminRequests_.AddEntriesFrom(ref input, _repeated_metadataAdminRequests_codec);
            break;
          }
          case 130: {
            otcRequests_.AddEntriesFrom(ref input, _repeated_otcRequests_codec);
            break;
          }
          case 138: {
            rfqRequests_.AddEntriesFrom(ref input, _repeated_rfqRequests_codec);
            break;
          }
          case 146: {
            optionCalculationRequests_.AddEntriesFrom(ref input, _repeated_optionCalculationRequests_codec);
            break;
          }
          case 802: {
            if (logon_ == null) {
              Logon = new global::UserSession2.Logon();
            }
            input.ReadMessage(Logon);
            break;
          }
          case 810: {
            if (restoreOrJoinSession_ == null) {
              RestoreOrJoinSession = new global::UserSession2.RestoreOrJoinSession();
            }
            input.ReadMessage(RestoreOrJoinSession);
            break;
          }
          case 818: {
            if (logoff_ == null) {
              Logoff = new global::UserSession2.Logoff();
            }
            input.ReadMessage(Logoff);
            break;
          }
          case 826: {
            if (passwordChange_ == null) {
              PasswordChange = new global::UserSession2.PasswordChange();
            }
            input.ReadMessage(PasswordChange);
            break;
          }
          case 834: {
            if (obtainDemoCredentials_ == null) {
              ObtainDemoCredentials = new global::UserSession2.ObtainDemoCredentials();
            }
            input.ReadMessage(ObtainDemoCredentials);
            break;
          }
          case 842: {
            if (userSessionStateRequest_ == null) {
              UserSessionStateRequest = new global::UserSession2.UserSessionStateRequest();
            }
            input.ReadMessage(UserSessionStateRequest);
            break;
          }
          case 858: {
            if (ping_ == null) {
              Ping = new global::UserSession2.Ping();
            }
            input.ReadMessage(Ping);
            break;
          }
          case 866: {
            if (pong_ == null) {
              Pong = new global::UserSession2.Pong();
            }
            input.ReadMessage(Pong);
            break;
          }
          case 874: {
            if (logonRoutineClient_ == null) {
              LogonRoutineClient = new global::UserSession2.LogonRoutineClient();
            }
            input.ReadMessage(LogonRoutineClient);
            break;
          }
          case 882: {
            if (passwordChangeRoutineClient_ == null) {
              PasswordChangeRoutineClient = new global::UserSession2.PasswordChangeRoutineClient();
            }
            input.ReadMessage(PasswordChangeRoutineClient);
            break;
          }
          case 890: {
            if (setCollapsingLevelRequest_ == null) {
              SetCollapsingLevelRequest = new global::UserSession2.SetCollapsingLevelRequest();
            }
            input.ReadMessage(SetCollapsingLevelRequest);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Server to Client message, server can include different fields in a single message.
  /// </summary>
  public sealed partial class ServerMsg : pb::IMessage<ServerMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServerMsg> _parser = new pb::MessageParser<ServerMsg>(() => new ServerMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WebAPI2.Webapi2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMsg(ServerMsg other) : this() {
      logonResult_ = other.logonResult_ != null ? other.logonResult_.Clone() : null;
      restoreOrJoinSessionResult_ = other.restoreOrJoinSessionResult_ != null ? other.restoreOrJoinSessionResult_.Clone() : null;
      concurrentConnectionJoinResults_ = other.concurrentConnectionJoinResults_.Clone();
      loggedOff_ = other.loggedOff_ != null ? other.loggedOff_.Clone() : null;
      passwordChangeResult_ = other.passwordChangeResult_ != null ? other.passwordChangeResult_.Clone() : null;
      userMessages_ = other.userMessages_.Clone();
      obtainDemoCredentialsResults_ = other.obtainDemoCredentialsResults_.Clone();
      userSessionStateResults_ = other.userSessionStateResults_.Clone();
      ping_ = other.ping_ != null ? other.ping_.Clone() : null;
      pong_ = other.pong_ != null ? other.pong_.Clone() : null;
      logonRoutineServer_ = other.logonRoutineServer_ != null ? other.logonRoutineServer_.Clone() : null;
      passwordChangeRoutineServer_ = other.passwordChangeRoutineServer_ != null ? other.passwordChangeRoutineServer_.Clone() : null;
      setCollapsingLevelResults_ = other.setCollapsingLevelResults_.Clone();
      informationReports_ = other.informationReports_.Clone();
      orderRequestRejects_ = other.orderRequestRejects_.Clone();
      tradeSubscriptionStatuses_ = other.tradeSubscriptionStatuses_.Clone();
      tradeSnapshotCompletions_ = other.tradeSnapshotCompletions_.Clone();
      orderStatuses_ = other.orderStatuses_.Clone();
      positionStatuses_ = other.positionStatuses_.Clone();
      collateralStatuses_ = other.collateralStatuses_.Clone();
      marketDataSubscriptionStatuses_ = other.marketDataSubscriptionStatuses_.Clone();
      realTimeMarketData_ = other.realTimeMarketData_.Clone();
      readUserAttributeResults_ = other.readUserAttributeResults_.Clone();
      modifyUserAttributeResults_ = other.modifyUserAttributeResults_.Clone();
      timeAndSalesReports_ = other.timeAndSalesReports_.Clone();
      timeBarReports_ = other.timeBarReports_.Clone();
      volumeProfileReports_ = other.volumeProfileReports_.Clone();
      nonTimedBarReports_ = other.nonTimedBarReports_.Clone();
      ruleResults_ = other.ruleResults_.Clone();
      accountLogonResults_ = other.accountLogonResults_.Clone();
      accountPasswordChangeResults_ = other.accountPasswordChangeResults_.Clone();
      accountLogoffResults_ = other.accountLogoffResults_.Clone();
      metadataAdminResults_ = other.metadataAdminResults_.Clone();
      otcReports_ = other.otcReports_.Clone();
      rfqReports_ = other.rfqReports_.Clone();
      optionCalculationReports_ = other.optionCalculationReports_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMsg Clone() {
      return new ServerMsg(this);
    }

    /// <summary>Field number for the "logon_result" field.</summary>
    public const int LogonResultFieldNumber = 100;
    private global::UserSession2.LogonResult logonResult_;
    /// <summary>
    /// Session level messages from server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.LogonResult LogonResult {
      get { return logonResult_; }
      set {
        logonResult_ = value;
      }
    }

    /// <summary>Field number for the "restore_or_join_session_result" field.</summary>
    public const int RestoreOrJoinSessionResultFieldNumber = 101;
    private global::UserSession2.RestoreOrJoinSessionResult restoreOrJoinSessionResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.RestoreOrJoinSessionResult RestoreOrJoinSessionResult {
      get { return restoreOrJoinSessionResult_; }
      set {
        restoreOrJoinSessionResult_ = value;
      }
    }

    /// <summary>Field number for the "concurrent_connection_join_results" field.</summary>
    public const int ConcurrentConnectionJoinResultsFieldNumber = 111;
    private static readonly pb::FieldCodec<global::UserSession2.ConcurrentConnectionJoin> _repeated_concurrentConnectionJoinResults_codec
        = pb::FieldCodec.ForMessage(890, global::UserSession2.ConcurrentConnectionJoin.Parser);
    private readonly pbc::RepeatedField<global::UserSession2.ConcurrentConnectionJoin> concurrentConnectionJoinResults_ = new pbc::RepeatedField<global::UserSession2.ConcurrentConnectionJoin>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserSession2.ConcurrentConnectionJoin> ConcurrentConnectionJoinResults {
      get { return concurrentConnectionJoinResults_; }
    }

    /// <summary>Field number for the "logged_off" field.</summary>
    public const int LoggedOffFieldNumber = 102;
    private global::UserSession2.LoggedOff loggedOff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.LoggedOff LoggedOff {
      get { return loggedOff_; }
      set {
        loggedOff_ = value;
      }
    }

    /// <summary>Field number for the "password_change_result" field.</summary>
    public const int PasswordChangeResultFieldNumber = 103;
    private global::UserSession2.PasswordChangeResult passwordChangeResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.PasswordChangeResult PasswordChangeResult {
      get { return passwordChangeResult_; }
      set {
        passwordChangeResult_ = value;
      }
    }

    /// <summary>Field number for the "user_messages" field.</summary>
    public const int UserMessagesFieldNumber = 104;
    private static readonly pb::FieldCodec<global::UserSession2.UserMessage> _repeated_userMessages_codec
        = pb::FieldCodec.ForMessage(834, global::UserSession2.UserMessage.Parser);
    private readonly pbc::RepeatedField<global::UserSession2.UserMessage> userMessages_ = new pbc::RepeatedField<global::UserSession2.UserMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserSession2.UserMessage> UserMessages {
      get { return userMessages_; }
    }

    /// <summary>Field number for the "obtain_demo_credentials_results" field.</summary>
    public const int ObtainDemoCredentialsResultsFieldNumber = 105;
    private static readonly pb::FieldCodec<global::UserSession2.ObtainDemoCredentialsResult> _repeated_obtainDemoCredentialsResults_codec
        = pb::FieldCodec.ForMessage(842, global::UserSession2.ObtainDemoCredentialsResult.Parser);
    private readonly pbc::RepeatedField<global::UserSession2.ObtainDemoCredentialsResult> obtainDemoCredentialsResults_ = new pbc::RepeatedField<global::UserSession2.ObtainDemoCredentialsResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserSession2.ObtainDemoCredentialsResult> ObtainDemoCredentialsResults {
      get { return obtainDemoCredentialsResults_; }
    }

    /// <summary>Field number for the "user_session_state_results" field.</summary>
    public const int UserSessionStateResultsFieldNumber = 106;
    private static readonly pb::FieldCodec<global::UserSession2.UserSessionStateResult> _repeated_userSessionStateResults_codec
        = pb::FieldCodec.ForMessage(850, global::UserSession2.UserSessionStateResult.Parser);
    private readonly pbc::RepeatedField<global::UserSession2.UserSessionStateResult> userSessionStateResults_ = new pbc::RepeatedField<global::UserSession2.UserSessionStateResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserSession2.UserSessionStateResult> UserSessionStateResults {
      get { return userSessionStateResults_; }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 107;
    private global::UserSession2.Ping ping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.Ping Ping {
      get { return ping_; }
      set {
        ping_ = value;
      }
    }

    /// <summary>Field number for the "pong" field.</summary>
    public const int PongFieldNumber = 108;
    private global::UserSession2.Pong pong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.Pong Pong {
      get { return pong_; }
      set {
        pong_ = value;
      }
    }

    /// <summary>Field number for the "logon_routine_server" field.</summary>
    public const int LogonRoutineServerFieldNumber = 109;
    private global::UserSession2.LogonRoutineServer logonRoutineServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.LogonRoutineServer LogonRoutineServer {
      get { return logonRoutineServer_; }
      set {
        logonRoutineServer_ = value;
      }
    }

    /// <summary>Field number for the "password_change_routine_server" field.</summary>
    public const int PasswordChangeRoutineServerFieldNumber = 110;
    private global::UserSession2.PasswordChangeRoutineServer passwordChangeRoutineServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserSession2.PasswordChangeRoutineServer PasswordChangeRoutineServer {
      get { return passwordChangeRoutineServer_; }
      set {
        passwordChangeRoutineServer_ = value;
      }
    }

    /// <summary>Field number for the "set_collapsing_level_results" field.</summary>
    public const int SetCollapsingLevelResultsFieldNumber = 112;
    private static readonly pb::FieldCodec<global::UserSession2.SetCollapsingLevelResult> _repeated_setCollapsingLevelResults_codec
        = pb::FieldCodec.ForMessage(898, global::UserSession2.SetCollapsingLevelResult.Parser);
    private readonly pbc::RepeatedField<global::UserSession2.SetCollapsingLevelResult> setCollapsingLevelResults_ = new pbc::RepeatedField<global::UserSession2.SetCollapsingLevelResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserSession2.SetCollapsingLevelResult> SetCollapsingLevelResults {
      get { return setCollapsingLevelResults_; }
    }

    /// <summary>Field number for the "information_reports" field.</summary>
    public const int InformationReportsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::WebAPI2.InformationReport> _repeated_informationReports_codec
        = pb::FieldCodec.ForMessage(10, global::WebAPI2.InformationReport.Parser);
    private readonly pbc::RepeatedField<global::WebAPI2.InformationReport> informationReports_ = new pbc::RepeatedField<global::WebAPI2.InformationReport>();
    /// <summary>
    /// Reports with requested information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WebAPI2.InformationReport> InformationReports {
      get { return informationReports_; }
    }

    /// <summary>Field number for the "order_request_rejects" field.</summary>
    public const int OrderRequestRejectsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Order2.OrderRequestReject> _repeated_orderRequestRejects_codec
        = pb::FieldCodec.ForMessage(18, global::Order2.OrderRequestReject.Parser);
    private readonly pbc::RepeatedField<global::Order2.OrderRequestReject> orderRequestRejects_ = new pbc::RepeatedField<global::Order2.OrderRequestReject>();
    /// <summary>
    /// Trade routing messages from server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Order2.OrderRequestReject> OrderRequestRejects {
      get { return orderRequestRejects_; }
    }

    /// <summary>Field number for the "trade_subscription_statuses" field.</summary>
    public const int TradeSubscriptionStatusesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::TradeRouting2.TradeSubscriptionStatus> _repeated_tradeSubscriptionStatuses_codec
        = pb::FieldCodec.ForMessage(26, global::TradeRouting2.TradeSubscriptionStatus.Parser);
    private readonly pbc::RepeatedField<global::TradeRouting2.TradeSubscriptionStatus> tradeSubscriptionStatuses_ = new pbc::RepeatedField<global::TradeRouting2.TradeSubscriptionStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TradeRouting2.TradeSubscriptionStatus> TradeSubscriptionStatuses {
      get { return tradeSubscriptionStatuses_; }
    }

    /// <summary>Field number for the "trade_snapshot_completions" field.</summary>
    public const int TradeSnapshotCompletionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::TradeRouting2.TradeSnapshotCompletion> _repeated_tradeSnapshotCompletions_codec
        = pb::FieldCodec.ForMessage(34, global::TradeRouting2.TradeSnapshotCompletion.Parser);
    private readonly pbc::RepeatedField<global::TradeRouting2.TradeSnapshotCompletion> tradeSnapshotCompletions_ = new pbc::RepeatedField<global::TradeRouting2.TradeSnapshotCompletion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TradeRouting2.TradeSnapshotCompletion> TradeSnapshotCompletions {
      get { return tradeSnapshotCompletions_; }
    }

    /// <summary>Field number for the "order_statuses" field.</summary>
    public const int OrderStatusesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Order2.OrderStatus> _repeated_orderStatuses_codec
        = pb::FieldCodec.ForMessage(42, global::Order2.OrderStatus.Parser);
    private readonly pbc::RepeatedField<global::Order2.OrderStatus> orderStatuses_ = new pbc::RepeatedField<global::Order2.OrderStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Order2.OrderStatus> OrderStatuses {
      get { return orderStatuses_; }
    }

    /// <summary>Field number for the "position_statuses" field.</summary>
    public const int PositionStatusesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::TradeRouting2.PositionStatus> _repeated_positionStatuses_codec
        = pb::FieldCodec.ForMessage(50, global::TradeRouting2.PositionStatus.Parser);
    private readonly pbc::RepeatedField<global::TradeRouting2.PositionStatus> positionStatuses_ = new pbc::RepeatedField<global::TradeRouting2.PositionStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TradeRouting2.PositionStatus> PositionStatuses {
      get { return positionStatuses_; }
    }

    /// <summary>Field number for the "collateral_statuses" field.</summary>
    public const int CollateralStatusesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::TradeRouting2.CollateralStatus> _repeated_collateralStatuses_codec
        = pb::FieldCodec.ForMessage(58, global::TradeRouting2.CollateralStatus.Parser);
    private readonly pbc::RepeatedField<global::TradeRouting2.CollateralStatus> collateralStatuses_ = new pbc::RepeatedField<global::TradeRouting2.CollateralStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TradeRouting2.CollateralStatus> CollateralStatuses {
      get { return collateralStatuses_; }
    }

    /// <summary>Field number for the "market_data_subscription_statuses" field.</summary>
    public const int MarketDataSubscriptionStatusesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::MarketData2.MarketDataSubscriptionStatus> _repeated_marketDataSubscriptionStatuses_codec
        = pb::FieldCodec.ForMessage(66, global::MarketData2.MarketDataSubscriptionStatus.Parser);
    private readonly pbc::RepeatedField<global::MarketData2.MarketDataSubscriptionStatus> marketDataSubscriptionStatuses_ = new pbc::RepeatedField<global::MarketData2.MarketDataSubscriptionStatus>();
    /// <summary>
    /// Market data messages from server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MarketData2.MarketDataSubscriptionStatus> MarketDataSubscriptionStatuses {
      get { return marketDataSubscriptionStatuses_; }
    }

    /// <summary>Field number for the "real_time_market_data" field.</summary>
    public const int RealTimeMarketDataFieldNumber = 9;
    private static readonly pb::FieldCodec<global::MarketData2.RealTimeMarketData> _repeated_realTimeMarketData_codec
        = pb::FieldCodec.ForMessage(74, global::MarketData2.RealTimeMarketData.Parser);
    private readonly pbc::RepeatedField<global::MarketData2.RealTimeMarketData> realTimeMarketData_ = new pbc::RepeatedField<global::MarketData2.RealTimeMarketData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MarketData2.RealTimeMarketData> RealTimeMarketData {
      get { return realTimeMarketData_; }
    }

    /// <summary>Field number for the "read_user_attribute_results" field.</summary>
    public const int ReadUserAttributeResultsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::UserAttribute2.ReadUserAttributeResult> _repeated_readUserAttributeResults_codec
        = pb::FieldCodec.ForMessage(82, global::UserAttribute2.ReadUserAttributeResult.Parser);
    private readonly pbc::RepeatedField<global::UserAttribute2.ReadUserAttributeResult> readUserAttributeResults_ = new pbc::RepeatedField<global::UserAttribute2.ReadUserAttributeResult>();
    /// <summary>
    //// Results of user attributes operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserAttribute2.ReadUserAttributeResult> ReadUserAttributeResults {
      get { return readUserAttributeResults_; }
    }

    /// <summary>Field number for the "modify_user_attribute_results" field.</summary>
    public const int ModifyUserAttributeResultsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::UserAttribute2.ModifyUserAttributeResult> _repeated_modifyUserAttributeResults_codec
        = pb::FieldCodec.ForMessage(90, global::UserAttribute2.ModifyUserAttributeResult.Parser);
    private readonly pbc::RepeatedField<global::UserAttribute2.ModifyUserAttributeResult> modifyUserAttributeResults_ = new pbc::RepeatedField<global::UserAttribute2.ModifyUserAttributeResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::UserAttribute2.ModifyUserAttributeResult> ModifyUserAttributeResults {
      get { return modifyUserAttributeResults_; }
    }

    /// <summary>Field number for the "time_and_sales_reports" field.</summary>
    public const int TimeAndSalesReportsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Historical2.TimeAndSalesReport> _repeated_timeAndSalesReports_codec
        = pb::FieldCodec.ForMessage(98, global::Historical2.TimeAndSalesReport.Parser);
    private readonly pbc::RepeatedField<global::Historical2.TimeAndSalesReport> timeAndSalesReports_ = new pbc::RepeatedField<global::Historical2.TimeAndSalesReport>();
    /// <summary>
    //// Historical data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.TimeAndSalesReport> TimeAndSalesReports {
      get { return timeAndSalesReports_; }
    }

    /// <summary>Field number for the "time_bar_reports" field.</summary>
    public const int TimeBarReportsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Historical2.TimeBarReport> _repeated_timeBarReports_codec
        = pb::FieldCodec.ForMessage(106, global::Historical2.TimeBarReport.Parser);
    private readonly pbc::RepeatedField<global::Historical2.TimeBarReport> timeBarReports_ = new pbc::RepeatedField<global::Historical2.TimeBarReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.TimeBarReport> TimeBarReports {
      get { return timeBarReports_; }
    }

    /// <summary>Field number for the "volume_profile_reports" field.</summary>
    public const int VolumeProfileReportsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Historical2.VolumeProfileReport> _repeated_volumeProfileReports_codec
        = pb::FieldCodec.ForMessage(114, global::Historical2.VolumeProfileReport.Parser);
    private readonly pbc::RepeatedField<global::Historical2.VolumeProfileReport> volumeProfileReports_ = new pbc::RepeatedField<global::Historical2.VolumeProfileReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.VolumeProfileReport> VolumeProfileReports {
      get { return volumeProfileReports_; }
    }

    /// <summary>Field number for the "non_timed_bar_reports" field.</summary>
    public const int NonTimedBarReportsFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Historical2.NonTimedBarReport> _repeated_nonTimedBarReports_codec
        = pb::FieldCodec.ForMessage(154, global::Historical2.NonTimedBarReport.Parser);
    private readonly pbc::RepeatedField<global::Historical2.NonTimedBarReport> nonTimedBarReports_ = new pbc::RepeatedField<global::Historical2.NonTimedBarReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Historical2.NonTimedBarReport> NonTimedBarReports {
      get { return nonTimedBarReports_; }
    }

    /// <summary>Field number for the "rule_results" field.</summary>
    public const int RuleResultsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Rules1.RuleResult> _repeated_ruleResults_codec
        = pb::FieldCodec.ForMessage(122, global::Rules1.RuleResult.Parser);
    private readonly pbc::RepeatedField<global::Rules1.RuleResult> ruleResults_ = new pbc::RepeatedField<global::Rules1.RuleResult>();
    /// <summary>
    /// Results of rules requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rules1.RuleResult> RuleResults {
      get { return ruleResults_; }
    }

    /// <summary>Field number for the "account_logon_results" field.</summary>
    public const int AccountLogonResultsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::AccountAuthorization2.AccountLogonResult> _repeated_accountLogonResults_codec
        = pb::FieldCodec.ForMessage(130, global::AccountAuthorization2.AccountLogonResult.Parser);
    private readonly pbc::RepeatedField<global::AccountAuthorization2.AccountLogonResult> accountLogonResults_ = new pbc::RepeatedField<global::AccountAuthorization2.AccountLogonResult>();
    /// <summary>
    /// Result messages for accounts that require separate authorization process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AccountAuthorization2.AccountLogonResult> AccountLogonResults {
      get { return accountLogonResults_; }
    }

    /// <summary>Field number for the "account_password_change_results" field.</summary>
    public const int AccountPasswordChangeResultsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::AccountAuthorization2.AccountPasswordChangeResult> _repeated_accountPasswordChangeResults_codec
        = pb::FieldCodec.ForMessage(138, global::AccountAuthorization2.AccountPasswordChangeResult.Parser);
    private readonly pbc::RepeatedField<global::AccountAuthorization2.AccountPasswordChangeResult> accountPasswordChangeResults_ = new pbc::RepeatedField<global::AccountAuthorization2.AccountPasswordChangeResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AccountAuthorization2.AccountPasswordChangeResult> AccountPasswordChangeResults {
      get { return accountPasswordChangeResults_; }
    }

    /// <summary>Field number for the "account_logoff_results" field.</summary>
    public const int AccountLogoffResultsFieldNumber = 18;
    private static readonly pb::FieldCodec<global::AccountAuthorization2.AccountLogoffResult> _repeated_accountLogoffResults_codec
        = pb::FieldCodec.ForMessage(146, global::AccountAuthorization2.AccountLogoffResult.Parser);
    private readonly pbc::RepeatedField<global::AccountAuthorization2.AccountLogoffResult> accountLogoffResults_ = new pbc::RepeatedField<global::AccountAuthorization2.AccountLogoffResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AccountAuthorization2.AccountLogoffResult> AccountLogoffResults {
      get { return accountLogoffResults_; }
    }

    /// <summary>Field number for the "metadata_admin_results" field.</summary>
    public const int MetadataAdminResultsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::MetadataAdmin2.MetadataAdminResult> _repeated_metadataAdminResults_codec
        = pb::FieldCodec.ForMessage(162, global::MetadataAdmin2.MetadataAdminResult.Parser);
    private readonly pbc::RepeatedField<global::MetadataAdmin2.MetadataAdminResult> metadataAdminResults_ = new pbc::RepeatedField<global::MetadataAdmin2.MetadataAdminResult>();
    /// <summary>
    /// Result of Meta-data change request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MetadataAdmin2.MetadataAdminResult> MetadataAdminResults {
      get { return metadataAdminResults_; }
    }

    /// <summary>Field number for the "otc_reports" field.</summary>
    public const int OtcReportsFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Otc1.OtcReport> _repeated_otcReports_codec
        = pb::FieldCodec.ForMessage(170, global::Otc1.OtcReport.Parser);
    private readonly pbc::RepeatedField<global::Otc1.OtcReport> otcReports_ = new pbc::RepeatedField<global::Otc1.OtcReport>();
    /// <summary>
    /// Result of OTC request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Otc1.OtcReport> OtcReports {
      get { return otcReports_; }
    }

    /// <summary>Field number for the "rfq_reports" field.</summary>
    public const int RfqReportsFieldNumber = 22;
    private static readonly pb::FieldCodec<global::MarketData2.RFQReport> _repeated_rfqReports_codec
        = pb::FieldCodec.ForMessage(178, global::MarketData2.RFQReport.Parser);
    private readonly pbc::RepeatedField<global::MarketData2.RFQReport> rfqReports_ = new pbc::RepeatedField<global::MarketData2.RFQReport>();
    /// <summary>
    /// RFQ report(s).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MarketData2.RFQReport> RfqReports {
      get { return rfqReports_; }
    }

    /// <summary>Field number for the "option_calculation_reports" field.</summary>
    public const int OptionCalculationReportsFieldNumber = 23;
    private static readonly pb::FieldCodec<global::MarketData2.OptionCalculationReport> _repeated_optionCalculationReports_codec
        = pb::FieldCodec.ForMessage(186, global::MarketData2.OptionCalculationReport.Parser);
    private readonly pbc::RepeatedField<global::MarketData2.OptionCalculationReport> optionCalculationReports_ = new pbc::RepeatedField<global::MarketData2.OptionCalculationReport>();
    /// <summary>
    /// Result of option calculation request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MarketData2.OptionCalculationReport> OptionCalculationReports {
      get { return optionCalculationReports_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LogonResult, other.LogonResult)) return false;
      if (!object.Equals(RestoreOrJoinSessionResult, other.RestoreOrJoinSessionResult)) return false;
      if(!concurrentConnectionJoinResults_.Equals(other.concurrentConnectionJoinResults_)) return false;
      if (!object.Equals(LoggedOff, other.LoggedOff)) return false;
      if (!object.Equals(PasswordChangeResult, other.PasswordChangeResult)) return false;
      if(!userMessages_.Equals(other.userMessages_)) return false;
      if(!obtainDemoCredentialsResults_.Equals(other.obtainDemoCredentialsResults_)) return false;
      if(!userSessionStateResults_.Equals(other.userSessionStateResults_)) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(Pong, other.Pong)) return false;
      if (!object.Equals(LogonRoutineServer, other.LogonRoutineServer)) return false;
      if (!object.Equals(PasswordChangeRoutineServer, other.PasswordChangeRoutineServer)) return false;
      if(!setCollapsingLevelResults_.Equals(other.setCollapsingLevelResults_)) return false;
      if(!informationReports_.Equals(other.informationReports_)) return false;
      if(!orderRequestRejects_.Equals(other.orderRequestRejects_)) return false;
      if(!tradeSubscriptionStatuses_.Equals(other.tradeSubscriptionStatuses_)) return false;
      if(!tradeSnapshotCompletions_.Equals(other.tradeSnapshotCompletions_)) return false;
      if(!orderStatuses_.Equals(other.orderStatuses_)) return false;
      if(!positionStatuses_.Equals(other.positionStatuses_)) return false;
      if(!collateralStatuses_.Equals(other.collateralStatuses_)) return false;
      if(!marketDataSubscriptionStatuses_.Equals(other.marketDataSubscriptionStatuses_)) return false;
      if(!realTimeMarketData_.Equals(other.realTimeMarketData_)) return false;
      if(!readUserAttributeResults_.Equals(other.readUserAttributeResults_)) return false;
      if(!modifyUserAttributeResults_.Equals(other.modifyUserAttributeResults_)) return false;
      if(!timeAndSalesReports_.Equals(other.timeAndSalesReports_)) return false;
      if(!timeBarReports_.Equals(other.timeBarReports_)) return false;
      if(!volumeProfileReports_.Equals(other.volumeProfileReports_)) return false;
      if(!nonTimedBarReports_.Equals(other.nonTimedBarReports_)) return false;
      if(!ruleResults_.Equals(other.ruleResults_)) return false;
      if(!accountLogonResults_.Equals(other.accountLogonResults_)) return false;
      if(!accountPasswordChangeResults_.Equals(other.accountPasswordChangeResults_)) return false;
      if(!accountLogoffResults_.Equals(other.accountLogoffResults_)) return false;
      if(!metadataAdminResults_.Equals(other.metadataAdminResults_)) return false;
      if(!otcReports_.Equals(other.otcReports_)) return false;
      if(!rfqReports_.Equals(other.rfqReports_)) return false;
      if(!optionCalculationReports_.Equals(other.optionCalculationReports_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (logonResult_ != null) hash ^= LogonResult.GetHashCode();
      if (restoreOrJoinSessionResult_ != null) hash ^= RestoreOrJoinSessionResult.GetHashCode();
      hash ^= concurrentConnectionJoinResults_.GetHashCode();
      if (loggedOff_ != null) hash ^= LoggedOff.GetHashCode();
      if (passwordChangeResult_ != null) hash ^= PasswordChangeResult.GetHashCode();
      hash ^= userMessages_.GetHashCode();
      hash ^= obtainDemoCredentialsResults_.GetHashCode();
      hash ^= userSessionStateResults_.GetHashCode();
      if (ping_ != null) hash ^= Ping.GetHashCode();
      if (pong_ != null) hash ^= Pong.GetHashCode();
      if (logonRoutineServer_ != null) hash ^= LogonRoutineServer.GetHashCode();
      if (passwordChangeRoutineServer_ != null) hash ^= PasswordChangeRoutineServer.GetHashCode();
      hash ^= setCollapsingLevelResults_.GetHashCode();
      hash ^= informationReports_.GetHashCode();
      hash ^= orderRequestRejects_.GetHashCode();
      hash ^= tradeSubscriptionStatuses_.GetHashCode();
      hash ^= tradeSnapshotCompletions_.GetHashCode();
      hash ^= orderStatuses_.GetHashCode();
      hash ^= positionStatuses_.GetHashCode();
      hash ^= collateralStatuses_.GetHashCode();
      hash ^= marketDataSubscriptionStatuses_.GetHashCode();
      hash ^= realTimeMarketData_.GetHashCode();
      hash ^= readUserAttributeResults_.GetHashCode();
      hash ^= modifyUserAttributeResults_.GetHashCode();
      hash ^= timeAndSalesReports_.GetHashCode();
      hash ^= timeBarReports_.GetHashCode();
      hash ^= volumeProfileReports_.GetHashCode();
      hash ^= nonTimedBarReports_.GetHashCode();
      hash ^= ruleResults_.GetHashCode();
      hash ^= accountLogonResults_.GetHashCode();
      hash ^= accountPasswordChangeResults_.GetHashCode();
      hash ^= accountLogoffResults_.GetHashCode();
      hash ^= metadataAdminResults_.GetHashCode();
      hash ^= otcReports_.GetHashCode();
      hash ^= rfqReports_.GetHashCode();
      hash ^= optionCalculationReports_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      informationReports_.WriteTo(output, _repeated_informationReports_codec);
      orderRequestRejects_.WriteTo(output, _repeated_orderRequestRejects_codec);
      tradeSubscriptionStatuses_.WriteTo(output, _repeated_tradeSubscriptionStatuses_codec);
      tradeSnapshotCompletions_.WriteTo(output, _repeated_tradeSnapshotCompletions_codec);
      orderStatuses_.WriteTo(output, _repeated_orderStatuses_codec);
      positionStatuses_.WriteTo(output, _repeated_positionStatuses_codec);
      collateralStatuses_.WriteTo(output, _repeated_collateralStatuses_codec);
      marketDataSubscriptionStatuses_.WriteTo(output, _repeated_marketDataSubscriptionStatuses_codec);
      realTimeMarketData_.WriteTo(output, _repeated_realTimeMarketData_codec);
      readUserAttributeResults_.WriteTo(output, _repeated_readUserAttributeResults_codec);
      modifyUserAttributeResults_.WriteTo(output, _repeated_modifyUserAttributeResults_codec);
      timeAndSalesReports_.WriteTo(output, _repeated_timeAndSalesReports_codec);
      timeBarReports_.WriteTo(output, _repeated_timeBarReports_codec);
      volumeProfileReports_.WriteTo(output, _repeated_volumeProfileReports_codec);
      ruleResults_.WriteTo(output, _repeated_ruleResults_codec);
      accountLogonResults_.WriteTo(output, _repeated_accountLogonResults_codec);
      accountPasswordChangeResults_.WriteTo(output, _repeated_accountPasswordChangeResults_codec);
      accountLogoffResults_.WriteTo(output, _repeated_accountLogoffResults_codec);
      nonTimedBarReports_.WriteTo(output, _repeated_nonTimedBarReports_codec);
      metadataAdminResults_.WriteTo(output, _repeated_metadataAdminResults_codec);
      otcReports_.WriteTo(output, _repeated_otcReports_codec);
      rfqReports_.WriteTo(output, _repeated_rfqReports_codec);
      optionCalculationReports_.WriteTo(output, _repeated_optionCalculationReports_codec);
      if (logonResult_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(LogonResult);
      }
      if (restoreOrJoinSessionResult_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(RestoreOrJoinSessionResult);
      }
      if (loggedOff_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(LoggedOff);
      }
      if (passwordChangeResult_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(PasswordChangeResult);
      }
      userMessages_.WriteTo(output, _repeated_userMessages_codec);
      obtainDemoCredentialsResults_.WriteTo(output, _repeated_obtainDemoCredentialsResults_codec);
      userSessionStateResults_.WriteTo(output, _repeated_userSessionStateResults_codec);
      if (ping_ != null) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(Ping);
      }
      if (pong_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(Pong);
      }
      if (logonRoutineServer_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(LogonRoutineServer);
      }
      if (passwordChangeRoutineServer_ != null) {
        output.WriteRawTag(242, 6);
        output.WriteMessage(PasswordChangeRoutineServer);
      }
      concurrentConnectionJoinResults_.WriteTo(output, _repeated_concurrentConnectionJoinResults_codec);
      setCollapsingLevelResults_.WriteTo(output, _repeated_setCollapsingLevelResults_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      informationReports_.WriteTo(ref output, _repeated_informationReports_codec);
      orderRequestRejects_.WriteTo(ref output, _repeated_orderRequestRejects_codec);
      tradeSubscriptionStatuses_.WriteTo(ref output, _repeated_tradeSubscriptionStatuses_codec);
      tradeSnapshotCompletions_.WriteTo(ref output, _repeated_tradeSnapshotCompletions_codec);
      orderStatuses_.WriteTo(ref output, _repeated_orderStatuses_codec);
      positionStatuses_.WriteTo(ref output, _repeated_positionStatuses_codec);
      collateralStatuses_.WriteTo(ref output, _repeated_collateralStatuses_codec);
      marketDataSubscriptionStatuses_.WriteTo(ref output, _repeated_marketDataSubscriptionStatuses_codec);
      realTimeMarketData_.WriteTo(ref output, _repeated_realTimeMarketData_codec);
      readUserAttributeResults_.WriteTo(ref output, _repeated_readUserAttributeResults_codec);
      modifyUserAttributeResults_.WriteTo(ref output, _repeated_modifyUserAttributeResults_codec);
      timeAndSalesReports_.WriteTo(ref output, _repeated_timeAndSalesReports_codec);
      timeBarReports_.WriteTo(ref output, _repeated_timeBarReports_codec);
      volumeProfileReports_.WriteTo(ref output, _repeated_volumeProfileReports_codec);
      ruleResults_.WriteTo(ref output, _repeated_ruleResults_codec);
      accountLogonResults_.WriteTo(ref output, _repeated_accountLogonResults_codec);
      accountPasswordChangeResults_.WriteTo(ref output, _repeated_accountPasswordChangeResults_codec);
      accountLogoffResults_.WriteTo(ref output, _repeated_accountLogoffResults_codec);
      nonTimedBarReports_.WriteTo(ref output, _repeated_nonTimedBarReports_codec);
      metadataAdminResults_.WriteTo(ref output, _repeated_metadataAdminResults_codec);
      otcReports_.WriteTo(ref output, _repeated_otcReports_codec);
      rfqReports_.WriteTo(ref output, _repeated_rfqReports_codec);
      optionCalculationReports_.WriteTo(ref output, _repeated_optionCalculationReports_codec);
      if (logonResult_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(LogonResult);
      }
      if (restoreOrJoinSessionResult_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(RestoreOrJoinSessionResult);
      }
      if (loggedOff_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(LoggedOff);
      }
      if (passwordChangeResult_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(PasswordChangeResult);
      }
      userMessages_.WriteTo(ref output, _repeated_userMessages_codec);
      obtainDemoCredentialsResults_.WriteTo(ref output, _repeated_obtainDemoCredentialsResults_codec);
      userSessionStateResults_.WriteTo(ref output, _repeated_userSessionStateResults_codec);
      if (ping_ != null) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(Ping);
      }
      if (pong_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(Pong);
      }
      if (logonRoutineServer_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(LogonRoutineServer);
      }
      if (passwordChangeRoutineServer_ != null) {
        output.WriteRawTag(242, 6);
        output.WriteMessage(PasswordChangeRoutineServer);
      }
      concurrentConnectionJoinResults_.WriteTo(ref output, _repeated_concurrentConnectionJoinResults_codec);
      setCollapsingLevelResults_.WriteTo(ref output, _repeated_setCollapsingLevelResults_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (logonResult_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LogonResult);
      }
      if (restoreOrJoinSessionResult_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RestoreOrJoinSessionResult);
      }
      size += concurrentConnectionJoinResults_.CalculateSize(_repeated_concurrentConnectionJoinResults_codec);
      if (loggedOff_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LoggedOff);
      }
      if (passwordChangeResult_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PasswordChangeResult);
      }
      size += userMessages_.CalculateSize(_repeated_userMessages_codec);
      size += obtainDemoCredentialsResults_.CalculateSize(_repeated_obtainDemoCredentialsResults_codec);
      size += userSessionStateResults_.CalculateSize(_repeated_userSessionStateResults_codec);
      if (ping_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (pong_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pong);
      }
      if (logonRoutineServer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LogonRoutineServer);
      }
      if (passwordChangeRoutineServer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PasswordChangeRoutineServer);
      }
      size += setCollapsingLevelResults_.CalculateSize(_repeated_setCollapsingLevelResults_codec);
      size += informationReports_.CalculateSize(_repeated_informationReports_codec);
      size += orderRequestRejects_.CalculateSize(_repeated_orderRequestRejects_codec);
      size += tradeSubscriptionStatuses_.CalculateSize(_repeated_tradeSubscriptionStatuses_codec);
      size += tradeSnapshotCompletions_.CalculateSize(_repeated_tradeSnapshotCompletions_codec);
      size += orderStatuses_.CalculateSize(_repeated_orderStatuses_codec);
      size += positionStatuses_.CalculateSize(_repeated_positionStatuses_codec);
      size += collateralStatuses_.CalculateSize(_repeated_collateralStatuses_codec);
      size += marketDataSubscriptionStatuses_.CalculateSize(_repeated_marketDataSubscriptionStatuses_codec);
      size += realTimeMarketData_.CalculateSize(_repeated_realTimeMarketData_codec);
      size += readUserAttributeResults_.CalculateSize(_repeated_readUserAttributeResults_codec);
      size += modifyUserAttributeResults_.CalculateSize(_repeated_modifyUserAttributeResults_codec);
      size += timeAndSalesReports_.CalculateSize(_repeated_timeAndSalesReports_codec);
      size += timeBarReports_.CalculateSize(_repeated_timeBarReports_codec);
      size += volumeProfileReports_.CalculateSize(_repeated_volumeProfileReports_codec);
      size += nonTimedBarReports_.CalculateSize(_repeated_nonTimedBarReports_codec);
      size += ruleResults_.CalculateSize(_repeated_ruleResults_codec);
      size += accountLogonResults_.CalculateSize(_repeated_accountLogonResults_codec);
      size += accountPasswordChangeResults_.CalculateSize(_repeated_accountPasswordChangeResults_codec);
      size += accountLogoffResults_.CalculateSize(_repeated_accountLogoffResults_codec);
      size += metadataAdminResults_.CalculateSize(_repeated_metadataAdminResults_codec);
      size += otcReports_.CalculateSize(_repeated_otcReports_codec);
      size += rfqReports_.CalculateSize(_repeated_rfqReports_codec);
      size += optionCalculationReports_.CalculateSize(_repeated_optionCalculationReports_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerMsg other) {
      if (other == null) {
        return;
      }
      if (other.logonResult_ != null) {
        if (logonResult_ == null) {
          LogonResult = new global::UserSession2.LogonResult();
        }
        LogonResult.MergeFrom(other.LogonResult);
      }
      if (other.restoreOrJoinSessionResult_ != null) {
        if (restoreOrJoinSessionResult_ == null) {
          RestoreOrJoinSessionResult = new global::UserSession2.RestoreOrJoinSessionResult();
        }
        RestoreOrJoinSessionResult.MergeFrom(other.RestoreOrJoinSessionResult);
      }
      concurrentConnectionJoinResults_.Add(other.concurrentConnectionJoinResults_);
      if (other.loggedOff_ != null) {
        if (loggedOff_ == null) {
          LoggedOff = new global::UserSession2.LoggedOff();
        }
        LoggedOff.MergeFrom(other.LoggedOff);
      }
      if (other.passwordChangeResult_ != null) {
        if (passwordChangeResult_ == null) {
          PasswordChangeResult = new global::UserSession2.PasswordChangeResult();
        }
        PasswordChangeResult.MergeFrom(other.PasswordChangeResult);
      }
      userMessages_.Add(other.userMessages_);
      obtainDemoCredentialsResults_.Add(other.obtainDemoCredentialsResults_);
      userSessionStateResults_.Add(other.userSessionStateResults_);
      if (other.ping_ != null) {
        if (ping_ == null) {
          Ping = new global::UserSession2.Ping();
        }
        Ping.MergeFrom(other.Ping);
      }
      if (other.pong_ != null) {
        if (pong_ == null) {
          Pong = new global::UserSession2.Pong();
        }
        Pong.MergeFrom(other.Pong);
      }
      if (other.logonRoutineServer_ != null) {
        if (logonRoutineServer_ == null) {
          LogonRoutineServer = new global::UserSession2.LogonRoutineServer();
        }
        LogonRoutineServer.MergeFrom(other.LogonRoutineServer);
      }
      if (other.passwordChangeRoutineServer_ != null) {
        if (passwordChangeRoutineServer_ == null) {
          PasswordChangeRoutineServer = new global::UserSession2.PasswordChangeRoutineServer();
        }
        PasswordChangeRoutineServer.MergeFrom(other.PasswordChangeRoutineServer);
      }
      setCollapsingLevelResults_.Add(other.setCollapsingLevelResults_);
      informationReports_.Add(other.informationReports_);
      orderRequestRejects_.Add(other.orderRequestRejects_);
      tradeSubscriptionStatuses_.Add(other.tradeSubscriptionStatuses_);
      tradeSnapshotCompletions_.Add(other.tradeSnapshotCompletions_);
      orderStatuses_.Add(other.orderStatuses_);
      positionStatuses_.Add(other.positionStatuses_);
      collateralStatuses_.Add(other.collateralStatuses_);
      marketDataSubscriptionStatuses_.Add(other.marketDataSubscriptionStatuses_);
      realTimeMarketData_.Add(other.realTimeMarketData_);
      readUserAttributeResults_.Add(other.readUserAttributeResults_);
      modifyUserAttributeResults_.Add(other.modifyUserAttributeResults_);
      timeAndSalesReports_.Add(other.timeAndSalesReports_);
      timeBarReports_.Add(other.timeBarReports_);
      volumeProfileReports_.Add(other.volumeProfileReports_);
      nonTimedBarReports_.Add(other.nonTimedBarReports_);
      ruleResults_.Add(other.ruleResults_);
      accountLogonResults_.Add(other.accountLogonResults_);
      accountPasswordChangeResults_.Add(other.accountPasswordChangeResults_);
      accountLogoffResults_.Add(other.accountLogoffResults_);
      metadataAdminResults_.Add(other.metadataAdminResults_);
      otcReports_.Add(other.otcReports_);
      rfqReports_.Add(other.rfqReports_);
      optionCalculationReports_.Add(other.optionCalculationReports_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            informationReports_.AddEntriesFrom(input, _repeated_informationReports_codec);
            break;
          }
          case 18: {
            orderRequestRejects_.AddEntriesFrom(input, _repeated_orderRequestRejects_codec);
            break;
          }
          case 26: {
            tradeSubscriptionStatuses_.AddEntriesFrom(input, _repeated_tradeSubscriptionStatuses_codec);
            break;
          }
          case 34: {
            tradeSnapshotCompletions_.AddEntriesFrom(input, _repeated_tradeSnapshotCompletions_codec);
            break;
          }
          case 42: {
            orderStatuses_.AddEntriesFrom(input, _repeated_orderStatuses_codec);
            break;
          }
          case 50: {
            positionStatuses_.AddEntriesFrom(input, _repeated_positionStatuses_codec);
            break;
          }
          case 58: {
            collateralStatuses_.AddEntriesFrom(input, _repeated_collateralStatuses_codec);
            break;
          }
          case 66: {
            marketDataSubscriptionStatuses_.AddEntriesFrom(input, _repeated_marketDataSubscriptionStatuses_codec);
            break;
          }
          case 74: {
            realTimeMarketData_.AddEntriesFrom(input, _repeated_realTimeMarketData_codec);
            break;
          }
          case 82: {
            readUserAttributeResults_.AddEntriesFrom(input, _repeated_readUserAttributeResults_codec);
            break;
          }
          case 90: {
            modifyUserAttributeResults_.AddEntriesFrom(input, _repeated_modifyUserAttributeResults_codec);
            break;
          }
          case 98: {
            timeAndSalesReports_.AddEntriesFrom(input, _repeated_timeAndSalesReports_codec);
            break;
          }
          case 106: {
            timeBarReports_.AddEntriesFrom(input, _repeated_timeBarReports_codec);
            break;
          }
          case 114: {
            volumeProfileReports_.AddEntriesFrom(input, _repeated_volumeProfileReports_codec);
            break;
          }
          case 122: {
            ruleResults_.AddEntriesFrom(input, _repeated_ruleResults_codec);
            break;
          }
          case 130: {
            accountLogonResults_.AddEntriesFrom(input, _repeated_accountLogonResults_codec);
            break;
          }
          case 138: {
            accountPasswordChangeResults_.AddEntriesFrom(input, _repeated_accountPasswordChangeResults_codec);
            break;
          }
          case 146: {
            accountLogoffResults_.AddEntriesFrom(input, _repeated_accountLogoffResults_codec);
            break;
          }
          case 154: {
            nonTimedBarReports_.AddEntriesFrom(input, _repeated_nonTimedBarReports_codec);
            break;
          }
          case 162: {
            metadataAdminResults_.AddEntriesFrom(input, _repeated_metadataAdminResults_codec);
            break;
          }
          case 170: {
            otcReports_.AddEntriesFrom(input, _repeated_otcReports_codec);
            break;
          }
          case 178: {
            rfqReports_.AddEntriesFrom(input, _repeated_rfqReports_codec);
            break;
          }
          case 186: {
            optionCalculationReports_.AddEntriesFrom(input, _repeated_optionCalculationReports_codec);
            break;
          }
          case 802: {
            if (logonResult_ == null) {
              LogonResult = new global::UserSession2.LogonResult();
            }
            input.ReadMessage(LogonResult);
            break;
          }
          case 810: {
            if (restoreOrJoinSessionResult_ == null) {
              RestoreOrJoinSessionResult = new global::UserSession2.RestoreOrJoinSessionResult();
            }
            input.ReadMessage(RestoreOrJoinSessionResult);
            break;
          }
          case 818: {
            if (loggedOff_ == null) {
              LoggedOff = new global::UserSession2.LoggedOff();
            }
            input.ReadMessage(LoggedOff);
            break;
          }
          case 826: {
            if (passwordChangeResult_ == null) {
              PasswordChangeResult = new global::UserSession2.PasswordChangeResult();
            }
            input.ReadMessage(PasswordChangeResult);
            break;
          }
          case 834: {
            userMessages_.AddEntriesFrom(input, _repeated_userMessages_codec);
            break;
          }
          case 842: {
            obtainDemoCredentialsResults_.AddEntriesFrom(input, _repeated_obtainDemoCredentialsResults_codec);
            break;
          }
          case 850: {
            userSessionStateResults_.AddEntriesFrom(input, _repeated_userSessionStateResults_codec);
            break;
          }
          case 858: {
            if (ping_ == null) {
              Ping = new global::UserSession2.Ping();
            }
            input.ReadMessage(Ping);
            break;
          }
          case 866: {
            if (pong_ == null) {
              Pong = new global::UserSession2.Pong();
            }
            input.ReadMessage(Pong);
            break;
          }
          case 874: {
            if (logonRoutineServer_ == null) {
              LogonRoutineServer = new global::UserSession2.LogonRoutineServer();
            }
            input.ReadMessage(LogonRoutineServer);
            break;
          }
          case 882: {
            if (passwordChangeRoutineServer_ == null) {
              PasswordChangeRoutineServer = new global::UserSession2.PasswordChangeRoutineServer();
            }
            input.ReadMessage(PasswordChangeRoutineServer);
            break;
          }
          case 890: {
            concurrentConnectionJoinResults_.AddEntriesFrom(input, _repeated_concurrentConnectionJoinResults_codec);
            break;
          }
          case 898: {
            setCollapsingLevelResults_.AddEntriesFrom(input, _repeated_setCollapsingLevelResults_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            informationReports_.AddEntriesFrom(ref input, _repeated_informationReports_codec);
            break;
          }
          case 18: {
            orderRequestRejects_.AddEntriesFrom(ref input, _repeated_orderRequestRejects_codec);
            break;
          }
          case 26: {
            tradeSubscriptionStatuses_.AddEntriesFrom(ref input, _repeated_tradeSubscriptionStatuses_codec);
            break;
          }
          case 34: {
            tradeSnapshotCompletions_.AddEntriesFrom(ref input, _repeated_tradeSnapshotCompletions_codec);
            break;
          }
          case 42: {
            orderStatuses_.AddEntriesFrom(ref input, _repeated_orderStatuses_codec);
            break;
          }
          case 50: {
            positionStatuses_.AddEntriesFrom(ref input, _repeated_positionStatuses_codec);
            break;
          }
          case 58: {
            collateralStatuses_.AddEntriesFrom(ref input, _repeated_collateralStatuses_codec);
            break;
          }
          case 66: {
            marketDataSubscriptionStatuses_.AddEntriesFrom(ref input, _repeated_marketDataSubscriptionStatuses_codec);
            break;
          }
          case 74: {
            realTimeMarketData_.AddEntriesFrom(ref input, _repeated_realTimeMarketData_codec);
            break;
          }
          case 82: {
            readUserAttributeResults_.AddEntriesFrom(ref input, _repeated_readUserAttributeResults_codec);
            break;
          }
          case 90: {
            modifyUserAttributeResults_.AddEntriesFrom(ref input, _repeated_modifyUserAttributeResults_codec);
            break;
          }
          case 98: {
            timeAndSalesReports_.AddEntriesFrom(ref input, _repeated_timeAndSalesReports_codec);
            break;
          }
          case 106: {
            timeBarReports_.AddEntriesFrom(ref input, _repeated_timeBarReports_codec);
            break;
          }
          case 114: {
            volumeProfileReports_.AddEntriesFrom(ref input, _repeated_volumeProfileReports_codec);
            break;
          }
          case 122: {
            ruleResults_.AddEntriesFrom(ref input, _repeated_ruleResults_codec);
            break;
          }
          case 130: {
            accountLogonResults_.AddEntriesFrom(ref input, _repeated_accountLogonResults_codec);
            break;
          }
          case 138: {
            accountPasswordChangeResults_.AddEntriesFrom(ref input, _repeated_accountPasswordChangeResults_codec);
            break;
          }
          case 146: {
            accountLogoffResults_.AddEntriesFrom(ref input, _repeated_accountLogoffResults_codec);
            break;
          }
          case 154: {
            nonTimedBarReports_.AddEntriesFrom(ref input, _repeated_nonTimedBarReports_codec);
            break;
          }
          case 162: {
            metadataAdminResults_.AddEntriesFrom(ref input, _repeated_metadataAdminResults_codec);
            break;
          }
          case 170: {
            otcReports_.AddEntriesFrom(ref input, _repeated_otcReports_codec);
            break;
          }
          case 178: {
            rfqReports_.AddEntriesFrom(ref input, _repeated_rfqReports_codec);
            break;
          }
          case 186: {
            optionCalculationReports_.AddEntriesFrom(ref input, _repeated_optionCalculationReports_codec);
            break;
          }
          case 802: {
            if (logonResult_ == null) {
              LogonResult = new global::UserSession2.LogonResult();
            }
            input.ReadMessage(LogonResult);
            break;
          }
          case 810: {
            if (restoreOrJoinSessionResult_ == null) {
              RestoreOrJoinSessionResult = new global::UserSession2.RestoreOrJoinSessionResult();
            }
            input.ReadMessage(RestoreOrJoinSessionResult);
            break;
          }
          case 818: {
            if (loggedOff_ == null) {
              LoggedOff = new global::UserSession2.LoggedOff();
            }
            input.ReadMessage(LoggedOff);
            break;
          }
          case 826: {
            if (passwordChangeResult_ == null) {
              PasswordChangeResult = new global::UserSession2.PasswordChangeResult();
            }
            input.ReadMessage(PasswordChangeResult);
            break;
          }
          case 834: {
            userMessages_.AddEntriesFrom(ref input, _repeated_userMessages_codec);
            break;
          }
          case 842: {
            obtainDemoCredentialsResults_.AddEntriesFrom(ref input, _repeated_obtainDemoCredentialsResults_codec);
            break;
          }
          case 850: {
            userSessionStateResults_.AddEntriesFrom(ref input, _repeated_userSessionStateResults_codec);
            break;
          }
          case 858: {
            if (ping_ == null) {
              Ping = new global::UserSession2.Ping();
            }
            input.ReadMessage(Ping);
            break;
          }
          case 866: {
            if (pong_ == null) {
              Pong = new global::UserSession2.Pong();
            }
            input.ReadMessage(Pong);
            break;
          }
          case 874: {
            if (logonRoutineServer_ == null) {
              LogonRoutineServer = new global::UserSession2.LogonRoutineServer();
            }
            input.ReadMessage(LogonRoutineServer);
            break;
          }
          case 882: {
            if (passwordChangeRoutineServer_ == null) {
              PasswordChangeRoutineServer = new global::UserSession2.PasswordChangeRoutineServer();
            }
            input.ReadMessage(PasswordChangeRoutineServer);
            break;
          }
          case 890: {
            concurrentConnectionJoinResults_.AddEntriesFrom(ref input, _repeated_concurrentConnectionJoinResults_codec);
            break;
          }
          case 898: {
            setCollapsingLevelResults_.AddEntriesFrom(ref input, _repeated_setCollapsingLevelResults_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for information.
  /// There must be only one request type (e.g. accountsRequest and lastStatementBalancesRequest can not be sent at the same time).
  /// </summary>
  public sealed partial class InformationRequest : pb::IExtendableMessage<InformationRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InformationRequest> _parser = new pb::MessageParser<InformationRequest>(() => new InformationRequest());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<InformationRequest> _extensions;
    private pb::ExtensionSet<InformationRequest> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InformationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WebAPI2.Webapi2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformationRequest(InformationRequest other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      subscribe_ = other.subscribe_;
      accountsRequest_ = other.accountsRequest_ != null ? other.accountsRequest_.Clone() : null;
      symbolResolutionRequest_ = other.symbolResolutionRequest_ != null ? other.symbolResolutionRequest_.Clone() : null;
      lastStatementBalancesRequest_ = other.lastStatementBalancesRequest_ != null ? other.lastStatementBalancesRequest_.Clone() : null;
      currencyRatesRequest_ = other.currencyRatesRequest_ != null ? other.currencyRatesRequest_.Clone() : null;
      sessionInformationRequest_ = other.sessionInformationRequest_ != null ? other.sessionInformationRequest_.Clone() : null;
      historicalOrdersRequest_ = other.historicalOrdersRequest_ != null ? other.historicalOrdersRequest_.Clone() : null;
      symbolsByUnderlyingRequest_ = other.symbolsByUnderlyingRequest_ != null ? other.symbolsByUnderlyingRequest_.Clone() : null;
      childSymbolsRequest_ = other.childSymbolsRequest_ != null ? other.childSymbolsRequest_.Clone() : null;
      atTheMoneyStrikeRequest_ = other.atTheMoneyStrikeRequest_ != null ? other.atTheMoneyStrikeRequest_.Clone() : null;
      strategyDefinitionRequest_ = other.strategyDefinitionRequest_ != null ? other.strategyDefinitionRequest_.Clone() : null;
      sessionTimerangeRequest_ = other.sessionTimerangeRequest_ != null ? other.sessionTimerangeRequest_.Clone() : null;
      tradingDayTimerangeRequest_ = other.tradingDayTimerangeRequest_ != null ? other.tradingDayTimerangeRequest_.Clone() : null;
      orderEntitlementRequest_ = other.orderEntitlementRequest_ != null ? other.orderEntitlementRequest_.Clone() : null;
      symbolCategoryListRequest_ = other.symbolCategoryListRequest_ != null ? other.symbolCategoryListRequest_.Clone() : null;
      symbolCategoryRequest_ = other.symbolCategoryRequest_ != null ? other.symbolCategoryRequest_.Clone() : null;
      symbolListRequest_ = other.symbolListRequest_ != null ? other.symbolListRequest_.Clone() : null;
      symbolRequest_ = other.symbolRequest_ != null ? other.symbolRequest_.Clone() : null;
      entitlementRequest_ = other.entitlementRequest_ != null ? other.entitlementRequest_.Clone() : null;
      contractMetadataRequest_ = other.contractMetadataRequest_ != null ? other.contractMetadataRequest_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformationRequest Clone() {
      return new InformationRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    /// ID of a request and optional subscription that should be unique enough to match responses and updates with corresponding requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "subscribe" field.</summary>
    public const int SubscribeFieldNumber = 2;
    private readonly static bool SubscribeDefaultValue = false;

    private bool subscribe_;
    /// <summary>
    /// If set to true then corresponding reports are also sent when requested information is changed during the session.
    /// If set to false then subscription is dropped.
    /// If omitted then data is returned without changing subscription status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Subscribe {
      get { if ((_hasBits0 & 2) != 0) { return subscribe_; } else { return SubscribeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        subscribe_ = value;
      }
    }
    /// <summary>Gets whether the "subscribe" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscribe {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "subscribe" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscribe() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "accounts_request" field.</summary>
    public const int AccountsRequestFieldNumber = 3;
    private global::TradingAccount2.AccountsRequest accountsRequest_;
    /// <summary>
    /// Request for authorized accounts for trading.
    /// Only one subscription is possible.
    /// Requests rate is limited, 100 per 24 hours by default.
    /// Requests are accepted only if the user is not subscribed and there is no pending request for this information at the moment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingAccount2.AccountsRequest AccountsRequest {
      get { return accountsRequest_; }
      set {
        accountsRequest_ = value;
      }
    }

    /// <summary>Field number for the "symbol_resolution_request" field.</summary>
    public const int SymbolResolutionRequestFieldNumber = 4;
    private global::Metadata2.SymbolResolutionRequest symbolResolutionRequest_;
    /// <summary>
    /// Request symbol resolution with optional subscription.
    /// Requests rate is limited, 10000 per 24 hours by default.
    /// NOTE: subscription is essential to follow active contract switching.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Metadata2.SymbolResolutionRequest SymbolResolutionRequest {
      get { return symbolResolutionRequest_; }
      set {
        symbolResolutionRequest_ = value;
      }
    }

    /// <summary>Field number for the "last_statement_balances_request" field.</summary>
    public const int LastStatementBalancesRequestFieldNumber = 5;
    private global::TradingAccount2.LastStatementBalancesRequest lastStatementBalancesRequest_;
    /// <summary>
    /// Request for balances from the last statement for all authorized accounts.
    /// Only one subscription is possible.
    /// Requests rate is limited, 100 per 24 hours by default.
    /// Requests are accepted only if the user is not subscribed and there is no pending request for this information at the moment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingAccount2.LastStatementBalancesRequest LastStatementBalancesRequest {
      get { return lastStatementBalancesRequest_; }
      set {
        lastStatementBalancesRequest_ = value;
      }
    }

    /// <summary>Field number for the "currency_rates_request" field.</summary>
    public const int CurrencyRatesRequestFieldNumber = 6;
    private global::TradingAccount2.CurrencyRatesRequest currencyRatesRequest_;
    /// <summary>
    /// Request for currency rates for all brokerages user's accounts belong to.
    /// Only one subscription is possible.
    /// Requests rate is limited, 100 per 24 hours by default.
    /// Requests are accepted only if the user is not subscribed and there is no pending request for this information at the moment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingAccount2.CurrencyRatesRequest CurrencyRatesRequest {
      get { return currencyRatesRequest_; }
      set {
        currencyRatesRequest_ = value;
      }
    }

    /// <summary>Field number for the "session_information_request" field.</summary>
    public const int SessionInformationRequestFieldNumber = 7;
    private global::TradingSession2.SessionInformationRequest sessionInformationRequest_;
    /// <summary>
    /// Request for session information.
    /// Number of simultaneous requests in processing is limited, 10 by default.
    /// Number of simultaneous session information update subscriptions is limited, 200 by default.
    /// Requests are accepted only if the user is not subscribed for this information at the moment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingSession2.SessionInformationRequest SessionInformationRequest {
      get { return sessionInformationRequest_; }
      set {
        sessionInformationRequest_ = value;
      }
    }

    /// <summary>Field number for the "historical_orders_request" field.</summary>
    public const int HistoricalOrdersRequestFieldNumber = 13;
    private global::TradeRouting2.HistoricalOrdersRequest historicalOrdersRequest_;
    /// <summary>
    /// Request for a list of historical orders (including all transactions) according to a search criteria.
    /// Number of simultaneous requests in processing is limited, 1 by default.
    /// The request depth is limited, 30 days by default.
    /// Subscription is not supported for this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradeRouting2.HistoricalOrdersRequest HistoricalOrdersRequest {
      get { return historicalOrdersRequest_; }
      set {
        historicalOrdersRequest_ = value;
      }
    }

    /// <summary>Field number for the "symbols_by_underlying_request" field.</summary>
    public const int SymbolsByUnderlyingRequestFieldNumber = 14;
    private global::SymbolBrowsing2.SymbolsByUnderlyingRequest symbolsByUnderlyingRequest_;
    /// <summary>
    /// Request a list of child symbols for an underlying contract.
    /// Number of simultaneous requests in processing is limited, 5 by default.
    /// Number of simultaneous update subscriptions is limited, 100 by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SymbolsByUnderlyingRequest SymbolsByUnderlyingRequest {
      get { return symbolsByUnderlyingRequest_; }
      set {
        symbolsByUnderlyingRequest_ = value;
      }
    }

    /// <summary>Field number for the "child_symbols_request" field.</summary>
    public const int ChildSymbolsRequestFieldNumber = 15;
    private global::SymbolBrowsing2.ChildSymbolsRequest childSymbolsRequest_;
    /// <summary>
    /// Request a list of child symbols for a higher level symbol.
    /// Number of simultaneous requests in processing is limited, 5 by default.
    /// Number of simultaneous update subscriptions is limited, 100 by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.ChildSymbolsRequest ChildSymbolsRequest {
      get { return childSymbolsRequest_; }
      set {
        childSymbolsRequest_ = value;
      }
    }

    /// <summary>Field number for the "at_the_money_strike_request" field.</summary>
    public const int AtTheMoneyStrikeRequestFieldNumber = 16;
    private global::MarketData2.AtTheMoneyStrikeRequest atTheMoneyStrikeRequest_;
    /// <summary>
    /// Request at-the-money strike for the option maturity.
    /// Number of simultaneous requests in processing is limited, 5 by default.
    /// Number of simultaneous update subscriptions is limited, 100 by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MarketData2.AtTheMoneyStrikeRequest AtTheMoneyStrikeRequest {
      get { return atTheMoneyStrikeRequest_; }
      set {
        atTheMoneyStrikeRequest_ = value;
      }
    }

    /// <summary>Field number for the "strategy_definition_request" field.</summary>
    public const int StrategyDefinitionRequestFieldNumber = 17;
    private global::Strategy2.StrategyDefinitionRequest strategyDefinitionRequest_;
    /// <summary>
    /// Request strategy definition with no subscription.
    /// Requests rate is limited, 10000 per 24 hours by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Strategy2.StrategyDefinitionRequest StrategyDefinitionRequest {
      get { return strategyDefinitionRequest_; }
      set {
        strategyDefinitionRequest_ = value;
      }
    }

    /// <summary>Field number for the "session_timerange_request" field.</summary>
    public const int SessionTimerangeRequestFieldNumber = 18;
    private global::TradingSession2.SessionTimeRangeRequest sessionTimerangeRequest_;
    /// <summary>
    /// Request for session timerange information.
    /// Number of simultaneous requests in processing is limited, 10 by default.
    /// The request range is limited. 1 year/1000 sessions by default.
    /// Subscription is NOT supported for this request, so subscribe flag will be ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingSession2.SessionTimeRangeRequest SessionTimerangeRequest {
      get { return sessionTimerangeRequest_; }
      set {
        sessionTimerangeRequest_ = value;
      }
    }

    /// <summary>Field number for the "trading_day_timerange_request" field.</summary>
    public const int TradingDayTimerangeRequestFieldNumber = 19;
    private global::TradingSession2.TradingDayTimeRangeRequest tradingDayTimerangeRequest_;
    /// <summary>
    /// Request for trading day timerange information.
    /// Number of simultaneous requests in processing is limited, 10 by default.
    /// The request range is limited. 1 year/250 trading days by default.
    /// Subscription is NOT supported for this request, so subscribe flag will be ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingSession2.TradingDayTimeRangeRequest TradingDayTimerangeRequest {
      get { return tradingDayTimerangeRequest_; }
      set {
        tradingDayTimerangeRequest_ = value;
      }
    }

    /// <summary>Field number for the "order_entitlement_request" field.</summary>
    public const int OrderEntitlementRequestFieldNumber = 20;
    private global::Order2.OrderEntitlementRequest orderEntitlementRequest_;
    /// <summary>
    /// Request of order entitlements.
    /// Number of simultaneous requests in processing is limited, 100 by default.
    /// Subscription is not supported for this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Order2.OrderEntitlementRequest OrderEntitlementRequest {
      get { return orderEntitlementRequest_; }
      set {
        orderEntitlementRequest_ = value;
      }
    }

    /// <summary>Field number for the "symbol_category_list_request" field.</summary>
    public const int SymbolCategoryListRequestFieldNumber = 21;
    private global::SymbolBrowsing2.SymbolCategoryListRequest symbolCategoryListRequest_;
    /// <summary>
    /// Request for a symbol category tree for a particular root. each category can have a list of sub-categories.
    /// Number of simultaneous requests in processing is limited, 100 by default.
    /// Number of simultaneous update subscriptions is limited, 100 by default.
    /// There can be only one subscription per category root for updates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SymbolCategoryListRequest SymbolCategoryListRequest {
      get { return symbolCategoryListRequest_; }
      set {
        symbolCategoryListRequest_ = value;
      }
    }

    /// <summary>Field number for the "symbol_category_request" field.</summary>
    public const int SymbolCategoryRequestFieldNumber = 27;
    private global::SymbolBrowsing2.SymbolCategoryRequest symbolCategoryRequest_;
    /// <summary>
    /// Request for a specific category by its ID.
    /// Number of simultaneous requests in processing is limited, 1000 by default.
    /// Number of simultaneous update subscriptions is limited, 1000 by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SymbolCategoryRequest SymbolCategoryRequest {
      get { return symbolCategoryRequest_; }
      set {
        symbolCategoryRequest_ = value;
      }
    }

    /// <summary>Field number for the "symbol_list_request" field.</summary>
    public const int SymbolListRequestFieldNumber = 22;
    private global::SymbolBrowsing2.SymbolListRequest symbolListRequest_;
    /// <summary>
    /// Request for a list of symbols according to a specified filter.
    /// Number of simultaneous requests in processing is limited, 150 by default.
    /// Number of simultaneous update subscriptions is limited, 150 by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SymbolListRequest SymbolListRequest {
      get { return symbolListRequest_; }
      set {
        symbolListRequest_ = value;
      }
    }

    /// <summary>Field number for the "symbol_request" field.</summary>
    public const int SymbolRequestFieldNumber = 23;
    private global::SymbolBrowsing2.SymbolRequest symbolRequest_;
    /// <summary>
    /// Request for a specific symbol by its ID.
    /// Requests rate is limited, 10000 per 24 hours by default.
    /// Number of simultaneous requests in processing is limited, 150 by default.
    /// Subscription is not supported for this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SymbolRequest SymbolRequest {
      get { return symbolRequest_; }
      set {
        symbolRequest_ = value;
      }
    }

    /// <summary>Field number for the "entitlement_request" field.</summary>
    public const int EntitlementRequestFieldNumber = 24;
    private global::Shared1.EntitlementRequest entitlementRequest_;
    /// <summary>
    /// Request for a list of entitlements of the current user.
    /// Subscription is not supported for this request yet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Shared1.EntitlementRequest EntitlementRequest {
      get { return entitlementRequest_; }
      set {
        entitlementRequest_ = value;
      }
    }

    /// <summary>Field number for the "contract_metadata_request" field.</summary>
    public const int ContractMetadataRequestFieldNumber = 25;
    private global::Metadata2.ContractMetadataRequest contractMetadataRequest_;
    /// <summary>
    /// Request contract metadata by contract ID.
    /// Subscription is not supported for this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Metadata2.ContractMetadataRequest ContractMetadataRequest {
      get { return contractMetadataRequest_; }
      set {
        contractMetadataRequest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InformationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InformationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Subscribe != other.Subscribe) return false;
      if (!object.Equals(AccountsRequest, other.AccountsRequest)) return false;
      if (!object.Equals(SymbolResolutionRequest, other.SymbolResolutionRequest)) return false;
      if (!object.Equals(LastStatementBalancesRequest, other.LastStatementBalancesRequest)) return false;
      if (!object.Equals(CurrencyRatesRequest, other.CurrencyRatesRequest)) return false;
      if (!object.Equals(SessionInformationRequest, other.SessionInformationRequest)) return false;
      if (!object.Equals(HistoricalOrdersRequest, other.HistoricalOrdersRequest)) return false;
      if (!object.Equals(SymbolsByUnderlyingRequest, other.SymbolsByUnderlyingRequest)) return false;
      if (!object.Equals(ChildSymbolsRequest, other.ChildSymbolsRequest)) return false;
      if (!object.Equals(AtTheMoneyStrikeRequest, other.AtTheMoneyStrikeRequest)) return false;
      if (!object.Equals(StrategyDefinitionRequest, other.StrategyDefinitionRequest)) return false;
      if (!object.Equals(SessionTimerangeRequest, other.SessionTimerangeRequest)) return false;
      if (!object.Equals(TradingDayTimerangeRequest, other.TradingDayTimerangeRequest)) return false;
      if (!object.Equals(OrderEntitlementRequest, other.OrderEntitlementRequest)) return false;
      if (!object.Equals(SymbolCategoryListRequest, other.SymbolCategoryListRequest)) return false;
      if (!object.Equals(SymbolCategoryRequest, other.SymbolCategoryRequest)) return false;
      if (!object.Equals(SymbolListRequest, other.SymbolListRequest)) return false;
      if (!object.Equals(SymbolRequest, other.SymbolRequest)) return false;
      if (!object.Equals(EntitlementRequest, other.EntitlementRequest)) return false;
      if (!object.Equals(ContractMetadataRequest, other.ContractMetadataRequest)) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasSubscribe) hash ^= Subscribe.GetHashCode();
      if (accountsRequest_ != null) hash ^= AccountsRequest.GetHashCode();
      if (symbolResolutionRequest_ != null) hash ^= SymbolResolutionRequest.GetHashCode();
      if (lastStatementBalancesRequest_ != null) hash ^= LastStatementBalancesRequest.GetHashCode();
      if (currencyRatesRequest_ != null) hash ^= CurrencyRatesRequest.GetHashCode();
      if (sessionInformationRequest_ != null) hash ^= SessionInformationRequest.GetHashCode();
      if (historicalOrdersRequest_ != null) hash ^= HistoricalOrdersRequest.GetHashCode();
      if (symbolsByUnderlyingRequest_ != null) hash ^= SymbolsByUnderlyingRequest.GetHashCode();
      if (childSymbolsRequest_ != null) hash ^= ChildSymbolsRequest.GetHashCode();
      if (atTheMoneyStrikeRequest_ != null) hash ^= AtTheMoneyStrikeRequest.GetHashCode();
      if (strategyDefinitionRequest_ != null) hash ^= StrategyDefinitionRequest.GetHashCode();
      if (sessionTimerangeRequest_ != null) hash ^= SessionTimerangeRequest.GetHashCode();
      if (tradingDayTimerangeRequest_ != null) hash ^= TradingDayTimerangeRequest.GetHashCode();
      if (orderEntitlementRequest_ != null) hash ^= OrderEntitlementRequest.GetHashCode();
      if (symbolCategoryListRequest_ != null) hash ^= SymbolCategoryListRequest.GetHashCode();
      if (symbolCategoryRequest_ != null) hash ^= SymbolCategoryRequest.GetHashCode();
      if (symbolListRequest_ != null) hash ^= SymbolListRequest.GetHashCode();
      if (symbolRequest_ != null) hash ^= SymbolRequest.GetHashCode();
      if (entitlementRequest_ != null) hash ^= EntitlementRequest.GetHashCode();
      if (contractMetadataRequest_ != null) hash ^= ContractMetadataRequest.GetHashCode();
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasSubscribe) {
        output.WriteRawTag(16);
        output.WriteBool(Subscribe);
      }
      if (accountsRequest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AccountsRequest);
      }
      if (symbolResolutionRequest_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SymbolResolutionRequest);
      }
      if (lastStatementBalancesRequest_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LastStatementBalancesRequest);
      }
      if (currencyRatesRequest_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CurrencyRatesRequest);
      }
      if (sessionInformationRequest_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SessionInformationRequest);
      }
      if (historicalOrdersRequest_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(HistoricalOrdersRequest);
      }
      if (symbolsByUnderlyingRequest_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(SymbolsByUnderlyingRequest);
      }
      if (childSymbolsRequest_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ChildSymbolsRequest);
      }
      if (atTheMoneyStrikeRequest_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(AtTheMoneyStrikeRequest);
      }
      if (strategyDefinitionRequest_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(StrategyDefinitionRequest);
      }
      if (sessionTimerangeRequest_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SessionTimerangeRequest);
      }
      if (tradingDayTimerangeRequest_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(TradingDayTimerangeRequest);
      }
      if (orderEntitlementRequest_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(OrderEntitlementRequest);
      }
      if (symbolCategoryListRequest_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SymbolCategoryListRequest);
      }
      if (symbolListRequest_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(SymbolListRequest);
      }
      if (symbolRequest_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SymbolRequest);
      }
      if (entitlementRequest_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(EntitlementRequest);
      }
      if (contractMetadataRequest_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(ContractMetadataRequest);
      }
      if (symbolCategoryRequest_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(SymbolCategoryRequest);
      }
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasSubscribe) {
        output.WriteRawTag(16);
        output.WriteBool(Subscribe);
      }
      if (accountsRequest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AccountsRequest);
      }
      if (symbolResolutionRequest_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SymbolResolutionRequest);
      }
      if (lastStatementBalancesRequest_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LastStatementBalancesRequest);
      }
      if (currencyRatesRequest_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CurrencyRatesRequest);
      }
      if (sessionInformationRequest_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SessionInformationRequest);
      }
      if (historicalOrdersRequest_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(HistoricalOrdersRequest);
      }
      if (symbolsByUnderlyingRequest_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(SymbolsByUnderlyingRequest);
      }
      if (childSymbolsRequest_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ChildSymbolsRequest);
      }
      if (atTheMoneyStrikeRequest_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(AtTheMoneyStrikeRequest);
      }
      if (strategyDefinitionRequest_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(StrategyDefinitionRequest);
      }
      if (sessionTimerangeRequest_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SessionTimerangeRequest);
      }
      if (tradingDayTimerangeRequest_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(TradingDayTimerangeRequest);
      }
      if (orderEntitlementRequest_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(OrderEntitlementRequest);
      }
      if (symbolCategoryListRequest_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SymbolCategoryListRequest);
      }
      if (symbolListRequest_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(SymbolListRequest);
      }
      if (symbolRequest_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SymbolRequest);
      }
      if (entitlementRequest_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(EntitlementRequest);
      }
      if (contractMetadataRequest_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(ContractMetadataRequest);
      }
      if (symbolCategoryRequest_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(SymbolCategoryRequest);
      }
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasSubscribe) {
        size += 1 + 1;
      }
      if (accountsRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountsRequest);
      }
      if (symbolResolutionRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SymbolResolutionRequest);
      }
      if (lastStatementBalancesRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastStatementBalancesRequest);
      }
      if (currencyRatesRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrencyRatesRequest);
      }
      if (sessionInformationRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionInformationRequest);
      }
      if (historicalOrdersRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HistoricalOrdersRequest);
      }
      if (symbolsByUnderlyingRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SymbolsByUnderlyingRequest);
      }
      if (childSymbolsRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChildSymbolsRequest);
      }
      if (atTheMoneyStrikeRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AtTheMoneyStrikeRequest);
      }
      if (strategyDefinitionRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StrategyDefinitionRequest);
      }
      if (sessionTimerangeRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SessionTimerangeRequest);
      }
      if (tradingDayTimerangeRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TradingDayTimerangeRequest);
      }
      if (orderEntitlementRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderEntitlementRequest);
      }
      if (symbolCategoryListRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SymbolCategoryListRequest);
      }
      if (symbolCategoryRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SymbolCategoryRequest);
      }
      if (symbolListRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SymbolListRequest);
      }
      if (symbolRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SymbolRequest);
      }
      if (entitlementRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EntitlementRequest);
      }
      if (contractMetadataRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContractMetadataRequest);
      }
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InformationRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasSubscribe) {
        Subscribe = other.Subscribe;
      }
      if (other.accountsRequest_ != null) {
        if (accountsRequest_ == null) {
          AccountsRequest = new global::TradingAccount2.AccountsRequest();
        }
        AccountsRequest.MergeFrom(other.AccountsRequest);
      }
      if (other.symbolResolutionRequest_ != null) {
        if (symbolResolutionRequest_ == null) {
          SymbolResolutionRequest = new global::Metadata2.SymbolResolutionRequest();
        }
        SymbolResolutionRequest.MergeFrom(other.SymbolResolutionRequest);
      }
      if (other.lastStatementBalancesRequest_ != null) {
        if (lastStatementBalancesRequest_ == null) {
          LastStatementBalancesRequest = new global::TradingAccount2.LastStatementBalancesRequest();
        }
        LastStatementBalancesRequest.MergeFrom(other.LastStatementBalancesRequest);
      }
      if (other.currencyRatesRequest_ != null) {
        if (currencyRatesRequest_ == null) {
          CurrencyRatesRequest = new global::TradingAccount2.CurrencyRatesRequest();
        }
        CurrencyRatesRequest.MergeFrom(other.CurrencyRatesRequest);
      }
      if (other.sessionInformationRequest_ != null) {
        if (sessionInformationRequest_ == null) {
          SessionInformationRequest = new global::TradingSession2.SessionInformationRequest();
        }
        SessionInformationRequest.MergeFrom(other.SessionInformationRequest);
      }
      if (other.historicalOrdersRequest_ != null) {
        if (historicalOrdersRequest_ == null) {
          HistoricalOrdersRequest = new global::TradeRouting2.HistoricalOrdersRequest();
        }
        HistoricalOrdersRequest.MergeFrom(other.HistoricalOrdersRequest);
      }
      if (other.symbolsByUnderlyingRequest_ != null) {
        if (symbolsByUnderlyingRequest_ == null) {
          SymbolsByUnderlyingRequest = new global::SymbolBrowsing2.SymbolsByUnderlyingRequest();
        }
        SymbolsByUnderlyingRequest.MergeFrom(other.SymbolsByUnderlyingRequest);
      }
      if (other.childSymbolsRequest_ != null) {
        if (childSymbolsRequest_ == null) {
          ChildSymbolsRequest = new global::SymbolBrowsing2.ChildSymbolsRequest();
        }
        ChildSymbolsRequest.MergeFrom(other.ChildSymbolsRequest);
      }
      if (other.atTheMoneyStrikeRequest_ != null) {
        if (atTheMoneyStrikeRequest_ == null) {
          AtTheMoneyStrikeRequest = new global::MarketData2.AtTheMoneyStrikeRequest();
        }
        AtTheMoneyStrikeRequest.MergeFrom(other.AtTheMoneyStrikeRequest);
      }
      if (other.strategyDefinitionRequest_ != null) {
        if (strategyDefinitionRequest_ == null) {
          StrategyDefinitionRequest = new global::Strategy2.StrategyDefinitionRequest();
        }
        StrategyDefinitionRequest.MergeFrom(other.StrategyDefinitionRequest);
      }
      if (other.sessionTimerangeRequest_ != null) {
        if (sessionTimerangeRequest_ == null) {
          SessionTimerangeRequest = new global::TradingSession2.SessionTimeRangeRequest();
        }
        SessionTimerangeRequest.MergeFrom(other.SessionTimerangeRequest);
      }
      if (other.tradingDayTimerangeRequest_ != null) {
        if (tradingDayTimerangeRequest_ == null) {
          TradingDayTimerangeRequest = new global::TradingSession2.TradingDayTimeRangeRequest();
        }
        TradingDayTimerangeRequest.MergeFrom(other.TradingDayTimerangeRequest);
      }
      if (other.orderEntitlementRequest_ != null) {
        if (orderEntitlementRequest_ == null) {
          OrderEntitlementRequest = new global::Order2.OrderEntitlementRequest();
        }
        OrderEntitlementRequest.MergeFrom(other.OrderEntitlementRequest);
      }
      if (other.symbolCategoryListRequest_ != null) {
        if (symbolCategoryListRequest_ == null) {
          SymbolCategoryListRequest = new global::SymbolBrowsing2.SymbolCategoryListRequest();
        }
        SymbolCategoryListRequest.MergeFrom(other.SymbolCategoryListRequest);
      }
      if (other.symbolCategoryRequest_ != null) {
        if (symbolCategoryRequest_ == null) {
          SymbolCategoryRequest = new global::SymbolBrowsing2.SymbolCategoryRequest();
        }
        SymbolCategoryRequest.MergeFrom(other.SymbolCategoryRequest);
      }
      if (other.symbolListRequest_ != null) {
        if (symbolListRequest_ == null) {
          SymbolListRequest = new global::SymbolBrowsing2.SymbolListRequest();
        }
        SymbolListRequest.MergeFrom(other.SymbolListRequest);
      }
      if (other.symbolRequest_ != null) {
        if (symbolRequest_ == null) {
          SymbolRequest = new global::SymbolBrowsing2.SymbolRequest();
        }
        SymbolRequest.MergeFrom(other.SymbolRequest);
      }
      if (other.entitlementRequest_ != null) {
        if (entitlementRequest_ == null) {
          EntitlementRequest = new global::Shared1.EntitlementRequest();
        }
        EntitlementRequest.MergeFrom(other.EntitlementRequest);
      }
      if (other.contractMetadataRequest_ != null) {
        if (contractMetadataRequest_ == null) {
          ContractMetadataRequest = new global::Metadata2.ContractMetadataRequest();
        }
        ContractMetadataRequest.MergeFrom(other.ContractMetadataRequest);
      }
      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Subscribe = input.ReadBool();
            break;
          }
          case 26: {
            if (accountsRequest_ == null) {
              AccountsRequest = new global::TradingAccount2.AccountsRequest();
            }
            input.ReadMessage(AccountsRequest);
            break;
          }
          case 34: {
            if (symbolResolutionRequest_ == null) {
              SymbolResolutionRequest = new global::Metadata2.SymbolResolutionRequest();
            }
            input.ReadMessage(SymbolResolutionRequest);
            break;
          }
          case 42: {
            if (lastStatementBalancesRequest_ == null) {
              LastStatementBalancesRequest = new global::TradingAccount2.LastStatementBalancesRequest();
            }
            input.ReadMessage(LastStatementBalancesRequest);
            break;
          }
          case 50: {
            if (currencyRatesRequest_ == null) {
              CurrencyRatesRequest = new global::TradingAccount2.CurrencyRatesRequest();
            }
            input.ReadMessage(CurrencyRatesRequest);
            break;
          }
          case 58: {
            if (sessionInformationRequest_ == null) {
              SessionInformationRequest = new global::TradingSession2.SessionInformationRequest();
            }
            input.ReadMessage(SessionInformationRequest);
            break;
          }
          case 106: {
            if (historicalOrdersRequest_ == null) {
              HistoricalOrdersRequest = new global::TradeRouting2.HistoricalOrdersRequest();
            }
            input.ReadMessage(HistoricalOrdersRequest);
            break;
          }
          case 114: {
            if (symbolsByUnderlyingRequest_ == null) {
              SymbolsByUnderlyingRequest = new global::SymbolBrowsing2.SymbolsByUnderlyingRequest();
            }
            input.ReadMessage(SymbolsByUnderlyingRequest);
            break;
          }
          case 122: {
            if (childSymbolsRequest_ == null) {
              ChildSymbolsRequest = new global::SymbolBrowsing2.ChildSymbolsRequest();
            }
            input.ReadMessage(ChildSymbolsRequest);
            break;
          }
          case 130: {
            if (atTheMoneyStrikeRequest_ == null) {
              AtTheMoneyStrikeRequest = new global::MarketData2.AtTheMoneyStrikeRequest();
            }
            input.ReadMessage(AtTheMoneyStrikeRequest);
            break;
          }
          case 138: {
            if (strategyDefinitionRequest_ == null) {
              StrategyDefinitionRequest = new global::Strategy2.StrategyDefinitionRequest();
            }
            input.ReadMessage(StrategyDefinitionRequest);
            break;
          }
          case 146: {
            if (sessionTimerangeRequest_ == null) {
              SessionTimerangeRequest = new global::TradingSession2.SessionTimeRangeRequest();
            }
            input.ReadMessage(SessionTimerangeRequest);
            break;
          }
          case 154: {
            if (tradingDayTimerangeRequest_ == null) {
              TradingDayTimerangeRequest = new global::TradingSession2.TradingDayTimeRangeRequest();
            }
            input.ReadMessage(TradingDayTimerangeRequest);
            break;
          }
          case 162: {
            if (orderEntitlementRequest_ == null) {
              OrderEntitlementRequest = new global::Order2.OrderEntitlementRequest();
            }
            input.ReadMessage(OrderEntitlementRequest);
            break;
          }
          case 170: {
            if (symbolCategoryListRequest_ == null) {
              SymbolCategoryListRequest = new global::SymbolBrowsing2.SymbolCategoryListRequest();
            }
            input.ReadMessage(SymbolCategoryListRequest);
            break;
          }
          case 178: {
            if (symbolListRequest_ == null) {
              SymbolListRequest = new global::SymbolBrowsing2.SymbolListRequest();
            }
            input.ReadMessage(SymbolListRequest);
            break;
          }
          case 186: {
            if (symbolRequest_ == null) {
              SymbolRequest = new global::SymbolBrowsing2.SymbolRequest();
            }
            input.ReadMessage(SymbolRequest);
            break;
          }
          case 194: {
            if (entitlementRequest_ == null) {
              EntitlementRequest = new global::Shared1.EntitlementRequest();
            }
            input.ReadMessage(EntitlementRequest);
            break;
          }
          case 202: {
            if (contractMetadataRequest_ == null) {
              ContractMetadataRequest = new global::Metadata2.ContractMetadataRequest();
            }
            input.ReadMessage(ContractMetadataRequest);
            break;
          }
          case 218: {
            if (symbolCategoryRequest_ == null) {
              SymbolCategoryRequest = new global::SymbolBrowsing2.SymbolCategoryRequest();
            }
            input.ReadMessage(SymbolCategoryRequest);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Subscribe = input.ReadBool();
            break;
          }
          case 26: {
            if (accountsRequest_ == null) {
              AccountsRequest = new global::TradingAccount2.AccountsRequest();
            }
            input.ReadMessage(AccountsRequest);
            break;
          }
          case 34: {
            if (symbolResolutionRequest_ == null) {
              SymbolResolutionRequest = new global::Metadata2.SymbolResolutionRequest();
            }
            input.ReadMessage(SymbolResolutionRequest);
            break;
          }
          case 42: {
            if (lastStatementBalancesRequest_ == null) {
              LastStatementBalancesRequest = new global::TradingAccount2.LastStatementBalancesRequest();
            }
            input.ReadMessage(LastStatementBalancesRequest);
            break;
          }
          case 50: {
            if (currencyRatesRequest_ == null) {
              CurrencyRatesRequest = new global::TradingAccount2.CurrencyRatesRequest();
            }
            input.ReadMessage(CurrencyRatesRequest);
            break;
          }
          case 58: {
            if (sessionInformationRequest_ == null) {
              SessionInformationRequest = new global::TradingSession2.SessionInformationRequest();
            }
            input.ReadMessage(SessionInformationRequest);
            break;
          }
          case 106: {
            if (historicalOrdersRequest_ == null) {
              HistoricalOrdersRequest = new global::TradeRouting2.HistoricalOrdersRequest();
            }
            input.ReadMessage(HistoricalOrdersRequest);
            break;
          }
          case 114: {
            if (symbolsByUnderlyingRequest_ == null) {
              SymbolsByUnderlyingRequest = new global::SymbolBrowsing2.SymbolsByUnderlyingRequest();
            }
            input.ReadMessage(SymbolsByUnderlyingRequest);
            break;
          }
          case 122: {
            if (childSymbolsRequest_ == null) {
              ChildSymbolsRequest = new global::SymbolBrowsing2.ChildSymbolsRequest();
            }
            input.ReadMessage(ChildSymbolsRequest);
            break;
          }
          case 130: {
            if (atTheMoneyStrikeRequest_ == null) {
              AtTheMoneyStrikeRequest = new global::MarketData2.AtTheMoneyStrikeRequest();
            }
            input.ReadMessage(AtTheMoneyStrikeRequest);
            break;
          }
          case 138: {
            if (strategyDefinitionRequest_ == null) {
              StrategyDefinitionRequest = new global::Strategy2.StrategyDefinitionRequest();
            }
            input.ReadMessage(StrategyDefinitionRequest);
            break;
          }
          case 146: {
            if (sessionTimerangeRequest_ == null) {
              SessionTimerangeRequest = new global::TradingSession2.SessionTimeRangeRequest();
            }
            input.ReadMessage(SessionTimerangeRequest);
            break;
          }
          case 154: {
            if (tradingDayTimerangeRequest_ == null) {
              TradingDayTimerangeRequest = new global::TradingSession2.TradingDayTimeRangeRequest();
            }
            input.ReadMessage(TradingDayTimerangeRequest);
            break;
          }
          case 162: {
            if (orderEntitlementRequest_ == null) {
              OrderEntitlementRequest = new global::Order2.OrderEntitlementRequest();
            }
            input.ReadMessage(OrderEntitlementRequest);
            break;
          }
          case 170: {
            if (symbolCategoryListRequest_ == null) {
              SymbolCategoryListRequest = new global::SymbolBrowsing2.SymbolCategoryListRequest();
            }
            input.ReadMessage(SymbolCategoryListRequest);
            break;
          }
          case 178: {
            if (symbolListRequest_ == null) {
              SymbolListRequest = new global::SymbolBrowsing2.SymbolListRequest();
            }
            input.ReadMessage(SymbolListRequest);
            break;
          }
          case 186: {
            if (symbolRequest_ == null) {
              SymbolRequest = new global::SymbolBrowsing2.SymbolRequest();
            }
            input.ReadMessage(SymbolRequest);
            break;
          }
          case 194: {
            if (entitlementRequest_ == null) {
              EntitlementRequest = new global::Shared1.EntitlementRequest();
            }
            input.ReadMessage(EntitlementRequest);
            break;
          }
          case 202: {
            if (contractMetadataRequest_ == null) {
              ContractMetadataRequest = new global::Metadata2.ContractMetadataRequest();
            }
            input.ReadMessage(ContractMetadataRequest);
            break;
          }
          case 218: {
            if (symbolCategoryRequest_ == null) {
              SymbolCategoryRequest = new global::SymbolBrowsing2.SymbolCategoryRequest();
            }
            input.ReadMessage(SymbolCategoryRequest);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<InformationRequest, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<InformationRequest, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<InformationRequest, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<InformationRequest, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<InformationRequest, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<InformationRequest, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<InformationRequest, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// Report with requested information and subscription updates.
  /// It will contain only one report type at the same time (related to id).
  /// </summary>
  public sealed partial class InformationReport : pb::IExtendableMessage<InformationReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InformationReport> _parser = new pb::MessageParser<InformationReport>(() => new InformationReport());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<InformationReport> _extensions;
    private pb::ExtensionSet<InformationReport> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InformationReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WebAPI2.Webapi2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformationReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformationReport(InformationReport other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      isReportComplete_ = other.isReportComplete_;
      statusCode_ = other.statusCode_;
      textMessage_ = other.textMessage_;
      accountsReport_ = other.accountsReport_ != null ? other.accountsReport_.Clone() : null;
      symbolResolutionReport_ = other.symbolResolutionReport_ != null ? other.symbolResolutionReport_.Clone() : null;
      lastStatementBalancesReport_ = other.lastStatementBalancesReport_ != null ? other.lastStatementBalancesReport_.Clone() : null;
      currencyRatesReport_ = other.currencyRatesReport_ != null ? other.currencyRatesReport_.Clone() : null;
      sessionInformationReport_ = other.sessionInformationReport_ != null ? other.sessionInformationReport_.Clone() : null;
      historicalOrdersReport_ = other.historicalOrdersReport_ != null ? other.historicalOrdersReport_.Clone() : null;
      symbolsByUnderlyingReport_ = other.symbolsByUnderlyingReport_ != null ? other.symbolsByUnderlyingReport_.Clone() : null;
      childSymbolsReport_ = other.childSymbolsReport_ != null ? other.childSymbolsReport_.Clone() : null;
      atTheMoneyStrikeReport_ = other.atTheMoneyStrikeReport_ != null ? other.atTheMoneyStrikeReport_.Clone() : null;
      strategyDefinitionReport_ = other.strategyDefinitionReport_ != null ? other.strategyDefinitionReport_.Clone() : null;
      sessionTimerangeReport_ = other.sessionTimerangeReport_ != null ? other.sessionTimerangeReport_.Clone() : null;
      tradingDayTimerangeReport_ = other.tradingDayTimerangeReport_ != null ? other.tradingDayTimerangeReport_.Clone() : null;
      orderEntitlementReport_ = other.orderEntitlementReport_ != null ? other.orderEntitlementReport_.Clone() : null;
      symbolCategoryListReport_ = other.symbolCategoryListReport_ != null ? other.symbolCategoryListReport_.Clone() : null;
      symbolCategoryReport_ = other.symbolCategoryReport_ != null ? other.symbolCategoryReport_.Clone() : null;
      symbolListReport_ = other.symbolListReport_ != null ? other.symbolListReport_.Clone() : null;
      symbolReport_ = other.symbolReport_ != null ? other.symbolReport_.Clone() : null;
      entitlementReport_ = other.entitlementReport_ != null ? other.entitlementReport_.Clone() : null;
      contractMetadataReport_ = other.contractMetadataReport_ != null ? other.contractMetadataReport_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InformationReport Clone() {
      return new InformationReport(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    /// Report ID is equal to a corresponding request and subscription ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "is_report_complete" field.</summary>
    public const int IsReportCompleteFieldNumber = 2;
    private readonly static bool IsReportCompleteDefaultValue = true;

    private bool isReportComplete_;
    /// <summary>
    /// True means that requested data is complete at the moment, false means more report messages are expected for completeness.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReportComplete {
      get { if ((_hasBits0 & 2) != 0) { return isReportComplete_; } else { return IsReportCompleteDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isReportComplete_ = value;
      }
    }
    /// <summary>Gets whether the "is_report_complete" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsReportComplete {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is_report_complete" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsReportComplete() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 3;
    private readonly static uint StatusCodeDefaultValue = 0;

    private uint statusCode_;
    /// <summary>
    /// This field is associated with StatusCode enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StatusCode {
      get { if ((_hasBits0 & 4) != 0) { return statusCode_; } else { return StatusCodeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        statusCode_ = value;
      }
    }
    /// <summary>Gets whether the "status_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStatusCode {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "status_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatusCode() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "text_message" field.</summary>
    public const int TextMessageFieldNumber = 4;
    private readonly static string TextMessageDefaultValue = "";

    private string textMessage_;
    /// <summary>
    /// Possible details of status or failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextMessage {
      get { return textMessage_ ?? TextMessageDefaultValue; }
      set {
        textMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text_message" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTextMessage {
      get { return textMessage_ != null; }
    }
    /// <summary>Clears the value of the "text_message" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTextMessage() {
      textMessage_ = null;
    }

    /// <summary>Field number for the "accounts_report" field.</summary>
    public const int AccountsReportFieldNumber = 5;
    private global::TradingAccount2.AccountsReport accountsReport_;
    /// <summary>
    /// Report with trading accounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingAccount2.AccountsReport AccountsReport {
      get { return accountsReport_; }
      set {
        accountsReport_ = value;
      }
    }

    /// <summary>Field number for the "symbol_resolution_report" field.</summary>
    public const int SymbolResolutionReportFieldNumber = 6;
    private global::Metadata2.SymbolResolutionReport symbolResolutionReport_;
    /// <summary>
    /// Resolved symbol initial information or update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Metadata2.SymbolResolutionReport SymbolResolutionReport {
      get { return symbolResolutionReport_; }
      set {
        symbolResolutionReport_ = value;
      }
    }

    /// <summary>Field number for the "last_statement_balances_report" field.</summary>
    public const int LastStatementBalancesReportFieldNumber = 7;
    private global::TradingAccount2.LastStatementBalancesReport lastStatementBalancesReport_;
    /// <summary>
    /// Report with balances from the last statement for all authorized accounts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingAccount2.LastStatementBalancesReport LastStatementBalancesReport {
      get { return lastStatementBalancesReport_; }
      set {
        lastStatementBalancesReport_ = value;
      }
    }

    /// <summary>Field number for the "currency_rates_report" field.</summary>
    public const int CurrencyRatesReportFieldNumber = 8;
    private global::TradingAccount2.CurrencyRatesReport currencyRatesReport_;
    /// <summary>
    /// Report with currency rates per brokerage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingAccount2.CurrencyRatesReport CurrencyRatesReport {
      get { return currencyRatesReport_; }
      set {
        currencyRatesReport_ = value;
      }
    }

    /// <summary>Field number for the "session_information_report" field.</summary>
    public const int SessionInformationReportFieldNumber = 9;
    private global::TradingSession2.SessionInformationReport sessionInformationReport_;
    /// <summary>
    /// Report with session information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingSession2.SessionInformationReport SessionInformationReport {
      get { return sessionInformationReport_; }
      set {
        sessionInformationReport_ = value;
      }
    }

    /// <summary>Field number for the "historical_orders_report" field.</summary>
    public const int HistoricalOrdersReportFieldNumber = 15;
    private global::TradeRouting2.HistoricalOrdersReport historicalOrdersReport_;
    /// <summary>
    /// Report with a list of historical orders according to specified parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradeRouting2.HistoricalOrdersReport HistoricalOrdersReport {
      get { return historicalOrdersReport_; }
      set {
        historicalOrdersReport_ = value;
      }
    }

    /// <summary>Field number for the "symbols_by_underlying_report" field.</summary>
    public const int SymbolsByUnderlyingReportFieldNumber = 16;
    private global::SymbolBrowsing2.SymbolsByUnderlyingReport symbolsByUnderlyingReport_;
    /// <summary>
    /// Report with a list of symbols for an underlying contract.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SymbolsByUnderlyingReport SymbolsByUnderlyingReport {
      get { return symbolsByUnderlyingReport_; }
      set {
        symbolsByUnderlyingReport_ = value;
      }
    }

    /// <summary>Field number for the "child_symbols_report" field.</summary>
    public const int ChildSymbolsReportFieldNumber = 17;
    private global::SymbolBrowsing2.ChildSymbolsReport childSymbolsReport_;
    /// <summary>
    /// Report with a list of child symbols.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.ChildSymbolsReport ChildSymbolsReport {
      get { return childSymbolsReport_; }
      set {
        childSymbolsReport_ = value;
      }
    }

    /// <summary>Field number for the "at_the_money_strike_report" field.</summary>
    public const int AtTheMoneyStrikeReportFieldNumber = 18;
    private global::MarketData2.AtTheMoneyStrikeReport atTheMoneyStrikeReport_;
    /// <summary>
    /// Report with at-the-money strikes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MarketData2.AtTheMoneyStrikeReport AtTheMoneyStrikeReport {
      get { return atTheMoneyStrikeReport_; }
      set {
        atTheMoneyStrikeReport_ = value;
      }
    }

    /// <summary>Field number for the "strategy_definition_report" field.</summary>
    public const int StrategyDefinitionReportFieldNumber = 19;
    private global::Strategy2.StrategyDefinitionReport strategyDefinitionReport_;
    /// <summary>
    /// Report with the defined strategy metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Strategy2.StrategyDefinitionReport StrategyDefinitionReport {
      get { return strategyDefinitionReport_; }
      set {
        strategyDefinitionReport_ = value;
      }
    }

    /// <summary>Field number for the "session_timerange_report" field.</summary>
    public const int SessionTimerangeReportFieldNumber = 20;
    private global::TradingSession2.SessionTimeRangeReport sessionTimerangeReport_;
    /// <summary>
    /// Report with session timerange information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingSession2.SessionTimeRangeReport SessionTimerangeReport {
      get { return sessionTimerangeReport_; }
      set {
        sessionTimerangeReport_ = value;
      }
    }

    /// <summary>Field number for the "trading_day_timerange_report" field.</summary>
    public const int TradingDayTimerangeReportFieldNumber = 21;
    private global::TradingSession2.TradingDayTimeRangeReport tradingDayTimerangeReport_;
    /// <summary>
    /// Report with trading day timerange information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TradingSession2.TradingDayTimeRangeReport TradingDayTimerangeReport {
      get { return tradingDayTimerangeReport_; }
      set {
        tradingDayTimerangeReport_ = value;
      }
    }

    /// <summary>Field number for the "order_entitlement_report" field.</summary>
    public const int OrderEntitlementReportFieldNumber = 22;
    private global::Order2.OrderEntitlementReport orderEntitlementReport_;
    /// <summary>
    /// Report with order entitlements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Order2.OrderEntitlementReport OrderEntitlementReport {
      get { return orderEntitlementReport_; }
      set {
        orderEntitlementReport_ = value;
      }
    }

    /// <summary>Field number for the "symbol_category_list_report" field.</summary>
    public const int SymbolCategoryListReportFieldNumber = 23;
    private global::SymbolBrowsing2.SymbolCategoryListReport symbolCategoryListReport_;
    /// <summary>
    /// Report with a symbol category tree for a particular root.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SymbolCategoryListReport SymbolCategoryListReport {
      get { return symbolCategoryListReport_; }
      set {
        symbolCategoryListReport_ = value;
      }
    }

    /// <summary>Field number for the "symbol_category_report" field.</summary>
    public const int SymbolCategoryReportFieldNumber = 29;
    private global::SymbolBrowsing2.SymbolCategoryReport symbolCategoryReport_;
    /// <summary>
    /// Report with a symbol category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SymbolCategoryReport SymbolCategoryReport {
      get { return symbolCategoryReport_; }
      set {
        symbolCategoryReport_ = value;
      }
    }

    /// <summary>Field number for the "symbol_list_report" field.</summary>
    public const int SymbolListReportFieldNumber = 24;
    private global::SymbolBrowsing2.SymbolListReport symbolListReport_;
    /// <summary>
    /// Report with a list of found symbols.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SymbolListReport SymbolListReport {
      get { return symbolListReport_; }
      set {
        symbolListReport_ = value;
      }
    }

    /// <summary>Field number for the "symbol_report" field.</summary>
    public const int SymbolReportFieldNumber = 25;
    private global::SymbolBrowsing2.SymbolReport symbolReport_;
    /// <summary>
    /// Report with a symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SymbolReport SymbolReport {
      get { return symbolReport_; }
      set {
        symbolReport_ = value;
      }
    }

    /// <summary>Field number for the "entitlement_report" field.</summary>
    public const int EntitlementReportFieldNumber = 26;
    private global::Shared1.EntitlementReport entitlementReport_;
    /// <summary>
    /// Report with a list of entitlements of the current user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Shared1.EntitlementReport EntitlementReport {
      get { return entitlementReport_; }
      set {
        entitlementReport_ = value;
      }
    }

    /// <summary>Field number for the "contract_metadata_report" field.</summary>
    public const int ContractMetadataReportFieldNumber = 27;
    private global::Metadata2.ContractMetadataReport contractMetadataReport_;
    /// <summary>
    /// Report with the requested contract metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Metadata2.ContractMetadataReport ContractMetadataReport {
      get { return contractMetadataReport_; }
      set {
        contractMetadataReport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InformationReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InformationReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsReportComplete != other.IsReportComplete) return false;
      if (StatusCode != other.StatusCode) return false;
      if (TextMessage != other.TextMessage) return false;
      if (!object.Equals(AccountsReport, other.AccountsReport)) return false;
      if (!object.Equals(SymbolResolutionReport, other.SymbolResolutionReport)) return false;
      if (!object.Equals(LastStatementBalancesReport, other.LastStatementBalancesReport)) return false;
      if (!object.Equals(CurrencyRatesReport, other.CurrencyRatesReport)) return false;
      if (!object.Equals(SessionInformationReport, other.SessionInformationReport)) return false;
      if (!object.Equals(HistoricalOrdersReport, other.HistoricalOrdersReport)) return false;
      if (!object.Equals(SymbolsByUnderlyingReport, other.SymbolsByUnderlyingReport)) return false;
      if (!object.Equals(ChildSymbolsReport, other.ChildSymbolsReport)) return false;
      if (!object.Equals(AtTheMoneyStrikeReport, other.AtTheMoneyStrikeReport)) return false;
      if (!object.Equals(StrategyDefinitionReport, other.StrategyDefinitionReport)) return false;
      if (!object.Equals(SessionTimerangeReport, other.SessionTimerangeReport)) return false;
      if (!object.Equals(TradingDayTimerangeReport, other.TradingDayTimerangeReport)) return false;
      if (!object.Equals(OrderEntitlementReport, other.OrderEntitlementReport)) return false;
      if (!object.Equals(SymbolCategoryListReport, other.SymbolCategoryListReport)) return false;
      if (!object.Equals(SymbolCategoryReport, other.SymbolCategoryReport)) return false;
      if (!object.Equals(SymbolListReport, other.SymbolListReport)) return false;
      if (!object.Equals(SymbolReport, other.SymbolReport)) return false;
      if (!object.Equals(EntitlementReport, other.EntitlementReport)) return false;
      if (!object.Equals(ContractMetadataReport, other.ContractMetadataReport)) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasIsReportComplete) hash ^= IsReportComplete.GetHashCode();
      if (HasStatusCode) hash ^= StatusCode.GetHashCode();
      if (HasTextMessage) hash ^= TextMessage.GetHashCode();
      if (accountsReport_ != null) hash ^= AccountsReport.GetHashCode();
      if (symbolResolutionReport_ != null) hash ^= SymbolResolutionReport.GetHashCode();
      if (lastStatementBalancesReport_ != null) hash ^= LastStatementBalancesReport.GetHashCode();
      if (currencyRatesReport_ != null) hash ^= CurrencyRatesReport.GetHashCode();
      if (sessionInformationReport_ != null) hash ^= SessionInformationReport.GetHashCode();
      if (historicalOrdersReport_ != null) hash ^= HistoricalOrdersReport.GetHashCode();
      if (symbolsByUnderlyingReport_ != null) hash ^= SymbolsByUnderlyingReport.GetHashCode();
      if (childSymbolsReport_ != null) hash ^= ChildSymbolsReport.GetHashCode();
      if (atTheMoneyStrikeReport_ != null) hash ^= AtTheMoneyStrikeReport.GetHashCode();
      if (strategyDefinitionReport_ != null) hash ^= StrategyDefinitionReport.GetHashCode();
      if (sessionTimerangeReport_ != null) hash ^= SessionTimerangeReport.GetHashCode();
      if (tradingDayTimerangeReport_ != null) hash ^= TradingDayTimerangeReport.GetHashCode();
      if (orderEntitlementReport_ != null) hash ^= OrderEntitlementReport.GetHashCode();
      if (symbolCategoryListReport_ != null) hash ^= SymbolCategoryListReport.GetHashCode();
      if (symbolCategoryReport_ != null) hash ^= SymbolCategoryReport.GetHashCode();
      if (symbolListReport_ != null) hash ^= SymbolListReport.GetHashCode();
      if (symbolReport_ != null) hash ^= SymbolReport.GetHashCode();
      if (entitlementReport_ != null) hash ^= EntitlementReport.GetHashCode();
      if (contractMetadataReport_ != null) hash ^= ContractMetadataReport.GetHashCode();
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasIsReportComplete) {
        output.WriteRawTag(16);
        output.WriteBool(IsReportComplete);
      }
      if (HasStatusCode) {
        output.WriteRawTag(24);
        output.WriteUInt32(StatusCode);
      }
      if (HasTextMessage) {
        output.WriteRawTag(34);
        output.WriteString(TextMessage);
      }
      if (accountsReport_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AccountsReport);
      }
      if (symbolResolutionReport_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SymbolResolutionReport);
      }
      if (lastStatementBalancesReport_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LastStatementBalancesReport);
      }
      if (currencyRatesReport_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CurrencyRatesReport);
      }
      if (sessionInformationReport_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SessionInformationReport);
      }
      if (historicalOrdersReport_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(HistoricalOrdersReport);
      }
      if (symbolsByUnderlyingReport_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(SymbolsByUnderlyingReport);
      }
      if (childSymbolsReport_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ChildSymbolsReport);
      }
      if (atTheMoneyStrikeReport_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(AtTheMoneyStrikeReport);
      }
      if (strategyDefinitionReport_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(StrategyDefinitionReport);
      }
      if (sessionTimerangeReport_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SessionTimerangeReport);
      }
      if (tradingDayTimerangeReport_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(TradingDayTimerangeReport);
      }
      if (orderEntitlementReport_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(OrderEntitlementReport);
      }
      if (symbolCategoryListReport_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SymbolCategoryListReport);
      }
      if (symbolListReport_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(SymbolListReport);
      }
      if (symbolReport_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(SymbolReport);
      }
      if (entitlementReport_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(EntitlementReport);
      }
      if (contractMetadataReport_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(ContractMetadataReport);
      }
      if (symbolCategoryReport_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(SymbolCategoryReport);
      }
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasIsReportComplete) {
        output.WriteRawTag(16);
        output.WriteBool(IsReportComplete);
      }
      if (HasStatusCode) {
        output.WriteRawTag(24);
        output.WriteUInt32(StatusCode);
      }
      if (HasTextMessage) {
        output.WriteRawTag(34);
        output.WriteString(TextMessage);
      }
      if (accountsReport_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AccountsReport);
      }
      if (symbolResolutionReport_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SymbolResolutionReport);
      }
      if (lastStatementBalancesReport_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LastStatementBalancesReport);
      }
      if (currencyRatesReport_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CurrencyRatesReport);
      }
      if (sessionInformationReport_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SessionInformationReport);
      }
      if (historicalOrdersReport_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(HistoricalOrdersReport);
      }
      if (symbolsByUnderlyingReport_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(SymbolsByUnderlyingReport);
      }
      if (childSymbolsReport_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ChildSymbolsReport);
      }
      if (atTheMoneyStrikeReport_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(AtTheMoneyStrikeReport);
      }
      if (strategyDefinitionReport_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(StrategyDefinitionReport);
      }
      if (sessionTimerangeReport_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SessionTimerangeReport);
      }
      if (tradingDayTimerangeReport_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(TradingDayTimerangeReport);
      }
      if (orderEntitlementReport_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(OrderEntitlementReport);
      }
      if (symbolCategoryListReport_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(SymbolCategoryListReport);
      }
      if (symbolListReport_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(SymbolListReport);
      }
      if (symbolReport_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(SymbolReport);
      }
      if (entitlementReport_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(EntitlementReport);
      }
      if (contractMetadataReport_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(ContractMetadataReport);
      }
      if (symbolCategoryReport_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(SymbolCategoryReport);
      }
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasIsReportComplete) {
        size += 1 + 1;
      }
      if (HasStatusCode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StatusCode);
      }
      if (HasTextMessage) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextMessage);
      }
      if (accountsReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountsReport);
      }
      if (symbolResolutionReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SymbolResolutionReport);
      }
      if (lastStatementBalancesReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastStatementBalancesReport);
      }
      if (currencyRatesReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrencyRatesReport);
      }
      if (sessionInformationReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SessionInformationReport);
      }
      if (historicalOrdersReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HistoricalOrdersReport);
      }
      if (symbolsByUnderlyingReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SymbolsByUnderlyingReport);
      }
      if (childSymbolsReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChildSymbolsReport);
      }
      if (atTheMoneyStrikeReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AtTheMoneyStrikeReport);
      }
      if (strategyDefinitionReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StrategyDefinitionReport);
      }
      if (sessionTimerangeReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SessionTimerangeReport);
      }
      if (tradingDayTimerangeReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TradingDayTimerangeReport);
      }
      if (orderEntitlementReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderEntitlementReport);
      }
      if (symbolCategoryListReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SymbolCategoryListReport);
      }
      if (symbolCategoryReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SymbolCategoryReport);
      }
      if (symbolListReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SymbolListReport);
      }
      if (symbolReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SymbolReport);
      }
      if (entitlementReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EntitlementReport);
      }
      if (contractMetadataReport_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContractMetadataReport);
      }
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InformationReport other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasIsReportComplete) {
        IsReportComplete = other.IsReportComplete;
      }
      if (other.HasStatusCode) {
        StatusCode = other.StatusCode;
      }
      if (other.HasTextMessage) {
        TextMessage = other.TextMessage;
      }
      if (other.accountsReport_ != null) {
        if (accountsReport_ == null) {
          AccountsReport = new global::TradingAccount2.AccountsReport();
        }
        AccountsReport.MergeFrom(other.AccountsReport);
      }
      if (other.symbolResolutionReport_ != null) {
        if (symbolResolutionReport_ == null) {
          SymbolResolutionReport = new global::Metadata2.SymbolResolutionReport();
        }
        SymbolResolutionReport.MergeFrom(other.SymbolResolutionReport);
      }
      if (other.lastStatementBalancesReport_ != null) {
        if (lastStatementBalancesReport_ == null) {
          LastStatementBalancesReport = new global::TradingAccount2.LastStatementBalancesReport();
        }
        LastStatementBalancesReport.MergeFrom(other.LastStatementBalancesReport);
      }
      if (other.currencyRatesReport_ != null) {
        if (currencyRatesReport_ == null) {
          CurrencyRatesReport = new global::TradingAccount2.CurrencyRatesReport();
        }
        CurrencyRatesReport.MergeFrom(other.CurrencyRatesReport);
      }
      if (other.sessionInformationReport_ != null) {
        if (sessionInformationReport_ == null) {
          SessionInformationReport = new global::TradingSession2.SessionInformationReport();
        }
        SessionInformationReport.MergeFrom(other.SessionInformationReport);
      }
      if (other.historicalOrdersReport_ != null) {
        if (historicalOrdersReport_ == null) {
          HistoricalOrdersReport = new global::TradeRouting2.HistoricalOrdersReport();
        }
        HistoricalOrdersReport.MergeFrom(other.HistoricalOrdersReport);
      }
      if (other.symbolsByUnderlyingReport_ != null) {
        if (symbolsByUnderlyingReport_ == null) {
          SymbolsByUnderlyingReport = new global::SymbolBrowsing2.SymbolsByUnderlyingReport();
        }
        SymbolsByUnderlyingReport.MergeFrom(other.SymbolsByUnderlyingReport);
      }
      if (other.childSymbolsReport_ != null) {
        if (childSymbolsReport_ == null) {
          ChildSymbolsReport = new global::SymbolBrowsing2.ChildSymbolsReport();
        }
        ChildSymbolsReport.MergeFrom(other.ChildSymbolsReport);
      }
      if (other.atTheMoneyStrikeReport_ != null) {
        if (atTheMoneyStrikeReport_ == null) {
          AtTheMoneyStrikeReport = new global::MarketData2.AtTheMoneyStrikeReport();
        }
        AtTheMoneyStrikeReport.MergeFrom(other.AtTheMoneyStrikeReport);
      }
      if (other.strategyDefinitionReport_ != null) {
        if (strategyDefinitionReport_ == null) {
          StrategyDefinitionReport = new global::Strategy2.StrategyDefinitionReport();
        }
        StrategyDefinitionReport.MergeFrom(other.StrategyDefinitionReport);
      }
      if (other.sessionTimerangeReport_ != null) {
        if (sessionTimerangeReport_ == null) {
          SessionTimerangeReport = new global::TradingSession2.SessionTimeRangeReport();
        }
        SessionTimerangeReport.MergeFrom(other.SessionTimerangeReport);
      }
      if (other.tradingDayTimerangeReport_ != null) {
        if (tradingDayTimerangeReport_ == null) {
          TradingDayTimerangeReport = new global::TradingSession2.TradingDayTimeRangeReport();
        }
        TradingDayTimerangeReport.MergeFrom(other.TradingDayTimerangeReport);
      }
      if (other.orderEntitlementReport_ != null) {
        if (orderEntitlementReport_ == null) {
          OrderEntitlementReport = new global::Order2.OrderEntitlementReport();
        }
        OrderEntitlementReport.MergeFrom(other.OrderEntitlementReport);
      }
      if (other.symbolCategoryListReport_ != null) {
        if (symbolCategoryListReport_ == null) {
          SymbolCategoryListReport = new global::SymbolBrowsing2.SymbolCategoryListReport();
        }
        SymbolCategoryListReport.MergeFrom(other.SymbolCategoryListReport);
      }
      if (other.symbolCategoryReport_ != null) {
        if (symbolCategoryReport_ == null) {
          SymbolCategoryReport = new global::SymbolBrowsing2.SymbolCategoryReport();
        }
        SymbolCategoryReport.MergeFrom(other.SymbolCategoryReport);
      }
      if (other.symbolListReport_ != null) {
        if (symbolListReport_ == null) {
          SymbolListReport = new global::SymbolBrowsing2.SymbolListReport();
        }
        SymbolListReport.MergeFrom(other.SymbolListReport);
      }
      if (other.symbolReport_ != null) {
        if (symbolReport_ == null) {
          SymbolReport = new global::SymbolBrowsing2.SymbolReport();
        }
        SymbolReport.MergeFrom(other.SymbolReport);
      }
      if (other.entitlementReport_ != null) {
        if (entitlementReport_ == null) {
          EntitlementReport = new global::Shared1.EntitlementReport();
        }
        EntitlementReport.MergeFrom(other.EntitlementReport);
      }
      if (other.contractMetadataReport_ != null) {
        if (contractMetadataReport_ == null) {
          ContractMetadataReport = new global::Metadata2.ContractMetadataReport();
        }
        ContractMetadataReport.MergeFrom(other.ContractMetadataReport);
      }
      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            IsReportComplete = input.ReadBool();
            break;
          }
          case 24: {
            StatusCode = input.ReadUInt32();
            break;
          }
          case 34: {
            TextMessage = input.ReadString();
            break;
          }
          case 42: {
            if (accountsReport_ == null) {
              AccountsReport = new global::TradingAccount2.AccountsReport();
            }
            input.ReadMessage(AccountsReport);
            break;
          }
          case 50: {
            if (symbolResolutionReport_ == null) {
              SymbolResolutionReport = new global::Metadata2.SymbolResolutionReport();
            }
            input.ReadMessage(SymbolResolutionReport);
            break;
          }
          case 58: {
            if (lastStatementBalancesReport_ == null) {
              LastStatementBalancesReport = new global::TradingAccount2.LastStatementBalancesReport();
            }
            input.ReadMessage(LastStatementBalancesReport);
            break;
          }
          case 66: {
            if (currencyRatesReport_ == null) {
              CurrencyRatesReport = new global::TradingAccount2.CurrencyRatesReport();
            }
            input.ReadMessage(CurrencyRatesReport);
            break;
          }
          case 74: {
            if (sessionInformationReport_ == null) {
              SessionInformationReport = new global::TradingSession2.SessionInformationReport();
            }
            input.ReadMessage(SessionInformationReport);
            break;
          }
          case 122: {
            if (historicalOrdersReport_ == null) {
              HistoricalOrdersReport = new global::TradeRouting2.HistoricalOrdersReport();
            }
            input.ReadMessage(HistoricalOrdersReport);
            break;
          }
          case 130: {
            if (symbolsByUnderlyingReport_ == null) {
              SymbolsByUnderlyingReport = new global::SymbolBrowsing2.SymbolsByUnderlyingReport();
            }
            input.ReadMessage(SymbolsByUnderlyingReport);
            break;
          }
          case 138: {
            if (childSymbolsReport_ == null) {
              ChildSymbolsReport = new global::SymbolBrowsing2.ChildSymbolsReport();
            }
            input.ReadMessage(ChildSymbolsReport);
            break;
          }
          case 146: {
            if (atTheMoneyStrikeReport_ == null) {
              AtTheMoneyStrikeReport = new global::MarketData2.AtTheMoneyStrikeReport();
            }
            input.ReadMessage(AtTheMoneyStrikeReport);
            break;
          }
          case 154: {
            if (strategyDefinitionReport_ == null) {
              StrategyDefinitionReport = new global::Strategy2.StrategyDefinitionReport();
            }
            input.ReadMessage(StrategyDefinitionReport);
            break;
          }
          case 162: {
            if (sessionTimerangeReport_ == null) {
              SessionTimerangeReport = new global::TradingSession2.SessionTimeRangeReport();
            }
            input.ReadMessage(SessionTimerangeReport);
            break;
          }
          case 170: {
            if (tradingDayTimerangeReport_ == null) {
              TradingDayTimerangeReport = new global::TradingSession2.TradingDayTimeRangeReport();
            }
            input.ReadMessage(TradingDayTimerangeReport);
            break;
          }
          case 178: {
            if (orderEntitlementReport_ == null) {
              OrderEntitlementReport = new global::Order2.OrderEntitlementReport();
            }
            input.ReadMessage(OrderEntitlementReport);
            break;
          }
          case 186: {
            if (symbolCategoryListReport_ == null) {
              SymbolCategoryListReport = new global::SymbolBrowsing2.SymbolCategoryListReport();
            }
            input.ReadMessage(SymbolCategoryListReport);
            break;
          }
          case 194: {
            if (symbolListReport_ == null) {
              SymbolListReport = new global::SymbolBrowsing2.SymbolListReport();
            }
            input.ReadMessage(SymbolListReport);
            break;
          }
          case 202: {
            if (symbolReport_ == null) {
              SymbolReport = new global::SymbolBrowsing2.SymbolReport();
            }
            input.ReadMessage(SymbolReport);
            break;
          }
          case 210: {
            if (entitlementReport_ == null) {
              EntitlementReport = new global::Shared1.EntitlementReport();
            }
            input.ReadMessage(EntitlementReport);
            break;
          }
          case 218: {
            if (contractMetadataReport_ == null) {
              ContractMetadataReport = new global::Metadata2.ContractMetadataReport();
            }
            input.ReadMessage(ContractMetadataReport);
            break;
          }
          case 234: {
            if (symbolCategoryReport_ == null) {
              SymbolCategoryReport = new global::SymbolBrowsing2.SymbolCategoryReport();
            }
            input.ReadMessage(SymbolCategoryReport);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            IsReportComplete = input.ReadBool();
            break;
          }
          case 24: {
            StatusCode = input.ReadUInt32();
            break;
          }
          case 34: {
            TextMessage = input.ReadString();
            break;
          }
          case 42: {
            if (accountsReport_ == null) {
              AccountsReport = new global::TradingAccount2.AccountsReport();
            }
            input.ReadMessage(AccountsReport);
            break;
          }
          case 50: {
            if (symbolResolutionReport_ == null) {
              SymbolResolutionReport = new global::Metadata2.SymbolResolutionReport();
            }
            input.ReadMessage(SymbolResolutionReport);
            break;
          }
          case 58: {
            if (lastStatementBalancesReport_ == null) {
              LastStatementBalancesReport = new global::TradingAccount2.LastStatementBalancesReport();
            }
            input.ReadMessage(LastStatementBalancesReport);
            break;
          }
          case 66: {
            if (currencyRatesReport_ == null) {
              CurrencyRatesReport = new global::TradingAccount2.CurrencyRatesReport();
            }
            input.ReadMessage(CurrencyRatesReport);
            break;
          }
          case 74: {
            if (sessionInformationReport_ == null) {
              SessionInformationReport = new global::TradingSession2.SessionInformationReport();
            }
            input.ReadMessage(SessionInformationReport);
            break;
          }
          case 122: {
            if (historicalOrdersReport_ == null) {
              HistoricalOrdersReport = new global::TradeRouting2.HistoricalOrdersReport();
            }
            input.ReadMessage(HistoricalOrdersReport);
            break;
          }
          case 130: {
            if (symbolsByUnderlyingReport_ == null) {
              SymbolsByUnderlyingReport = new global::SymbolBrowsing2.SymbolsByUnderlyingReport();
            }
            input.ReadMessage(SymbolsByUnderlyingReport);
            break;
          }
          case 138: {
            if (childSymbolsReport_ == null) {
              ChildSymbolsReport = new global::SymbolBrowsing2.ChildSymbolsReport();
            }
            input.ReadMessage(ChildSymbolsReport);
            break;
          }
          case 146: {
            if (atTheMoneyStrikeReport_ == null) {
              AtTheMoneyStrikeReport = new global::MarketData2.AtTheMoneyStrikeReport();
            }
            input.ReadMessage(AtTheMoneyStrikeReport);
            break;
          }
          case 154: {
            if (strategyDefinitionReport_ == null) {
              StrategyDefinitionReport = new global::Strategy2.StrategyDefinitionReport();
            }
            input.ReadMessage(StrategyDefinitionReport);
            break;
          }
          case 162: {
            if (sessionTimerangeReport_ == null) {
              SessionTimerangeReport = new global::TradingSession2.SessionTimeRangeReport();
            }
            input.ReadMessage(SessionTimerangeReport);
            break;
          }
          case 170: {
            if (tradingDayTimerangeReport_ == null) {
              TradingDayTimerangeReport = new global::TradingSession2.TradingDayTimeRangeReport();
            }
            input.ReadMessage(TradingDayTimerangeReport);
            break;
          }
          case 178: {
            if (orderEntitlementReport_ == null) {
              OrderEntitlementReport = new global::Order2.OrderEntitlementReport();
            }
            input.ReadMessage(OrderEntitlementReport);
            break;
          }
          case 186: {
            if (symbolCategoryListReport_ == null) {
              SymbolCategoryListReport = new global::SymbolBrowsing2.SymbolCategoryListReport();
            }
            input.ReadMessage(SymbolCategoryListReport);
            break;
          }
          case 194: {
            if (symbolListReport_ == null) {
              SymbolListReport = new global::SymbolBrowsing2.SymbolListReport();
            }
            input.ReadMessage(SymbolListReport);
            break;
          }
          case 202: {
            if (symbolReport_ == null) {
              SymbolReport = new global::SymbolBrowsing2.SymbolReport();
            }
            input.ReadMessage(SymbolReport);
            break;
          }
          case 210: {
            if (entitlementReport_ == null) {
              EntitlementReport = new global::Shared1.EntitlementReport();
            }
            input.ReadMessage(EntitlementReport);
            break;
          }
          case 218: {
            if (contractMetadataReport_ == null) {
              ContractMetadataReport = new global::Metadata2.ContractMetadataReport();
            }
            input.ReadMessage(ContractMetadataReport);
            break;
          }
          case 234: {
            if (symbolCategoryReport_ == null) {
              SymbolCategoryReport = new global::SymbolBrowsing2.SymbolCategoryReport();
            }
            input.ReadMessage(SymbolCategoryReport);
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<InformationReport, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<InformationReport, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<InformationReport, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<InformationReport, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<InformationReport, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<InformationReport, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<InformationReport, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InformationReport message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Optional status code for a request or subscription, status is only sent for initial status and status changes.
      /// </summary>
      public enum StatusCode {
        /// <summary>
        //// success codes  (0 - 99)
        /// Request is processed without subscription (subscription was not requested).
        /// </summary>
        [pbr::OriginalName("STATUS_CODE_SUCCESS")] Success = 0,
        /// <summary>
        /// Request is processed and subscription is established.
        /// </summary>
        [pbr::OriginalName("STATUS_CODE_SUBSCRIBED")] Subscribed = 1,
        /// <summary>
        /// Subscription is dropped by a client request.
        /// </summary>
        [pbr::OriginalName("STATUS_CODE_DROPPED")] Dropped = 2,
        /// <summary>
        /// Unsolicited information update because of subscription.
        /// </summary>
        [pbr::OriginalName("STATUS_CODE_UPDATE")] Update = 3,
        /// <summary>
        /// Currently subscription is disconnect because of communication issues.
        /// NOTE: Clients should not resubscribe in this case, the server will restore subscription with
        /// sending SUBSCRIBED status once communication issues are resolved.
        /// </summary>
        [pbr::OriginalName("STATUS_CODE_DISCONNECTED")] Disconnected = 4,
        /// <summary>
        //// failure codes (100+), subscription (if any) is dropped in case of failure.
        /// General failure.
        /// </summary>
        [pbr::OriginalName("STATUS_CODE_FAILURE")] Failure = 101,
        /// <summary>
        /// Requested information is not found.
        /// </summary>
        [pbr::OriginalName("STATUS_CODE_NOT_FOUND")] NotFound = 104,
        /// <summary>
        /// The request rate limit has been violated.
        /// </summary>
        [pbr::OriginalName("STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION")] RequestRateLimitViolation = 105,
        /// <summary>
        /// The limit of subscriptions has been violated.
        /// </summary>
        [pbr::OriginalName("STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION")] SubscriptionLimitViolation = 106,
        /// <summary>
        /// The limit of active requests has been violated.
        /// </summary>
        [pbr::OriginalName("STATUS_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION")] ActiveRequestsLimitViolation = 107,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
