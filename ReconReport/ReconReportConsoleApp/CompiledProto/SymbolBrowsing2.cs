// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WebAPI/symbol_browsing_2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SymbolBrowsing2 {

  /// <summary>Holder for reflection information generated from WebAPI/symbol_browsing_2.proto</summary>
  public static partial class SymbolBrowsing2Reflection {

    #region Descriptor
    /// <summary>File descriptor for WebAPI/symbol_browsing_2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SymbolBrowsing2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5XZWJBUEkvc3ltYm9sX2Jyb3dzaW5nXzIucHJvdG8SEXN5bWJvbF9icm93",
            "c2luZ18yGhRjb21tb24vZGVjaW1hbC5wcm90bxoVY29tbW9uL3NoYXJlZF8x",
            "LnByb3RvGhdXZWJBUEkvbWV0YWRhdGFfMi5wcm90bxodV2ViQVBJL21ldGFk",
            "YXRhX2FkbWluXzIucHJvdG8ikgQKBlN5bWJvbBIKCgJpZBgBIAIoCRIMCgRu",
            "YW1lGAIgAigJEhMKC2Rlc2NyaXB0aW9uGAMgAigJEhAKCGNmaV9jb2RlGAQg",
            "ASgJEhkKEWhhc19jaGlsZF9zeW1ib2xzGAUgASgIEjcKEWNvbnRyYWN0X21l",
            "dGFkYXRhGAYgASgLMhwubWV0YWRhdGFfMi5Db250cmFjdE1ldGFkYXRhEg8K",
            "B2RlbGV0ZWQYByABKAgSGQoRbGFzdF90cmFkaW5nX2RhdGUYCCABKBISGwoT",
            "bWF0dXJpdHlfbW9udGhfeWVhchgJIAEoCRIdChVpbnN0cnVtZW50X2dyb3Vw",
            "X25hbWUYCiABKAkSGAoQcGFyZW50X3N5bWJvbF9pZBgLIAEoCRIUCgxjYXRl",
            "Z29yeV9pZHMYDCADKAkSGAoQc291cmNlX3N5bWJvbF9pZBgNIAEoCRI8ChBw",
            "cm9kdWN0X21ldGFkYXRhGA4gASgLMiIuc3ltYm9sX2Jyb3dzaW5nXzIuUHJv",
            "ZHVjdE1ldGFkYXRhEj4KEXNlY3VyaXR5X21ldGFkYXRhGA8gASgLMiMuc3lt",
            "Ym9sX2Jyb3dzaW5nXzIuU2VjdXJpdHlNZXRhZGF0YRJDChhvcHRpb25fbWF0",
            "dXJpdHlfbWV0YWRhdGEYECABKAsyIS5zeW1ib2xfYnJvd3NpbmdfMi5PcHRp",
            "b25NYXR1cml0eSIsCg5PcHRpb25NYXR1cml0eRIaChJvcHRpb25fbWF0dXJp",
            "dHlfaWQYASABKAkiPAoaU3ltYm9sc0J5VW5kZXJseWluZ1JlcXVlc3QSHgoW",
            "dW5kZXJseWluZ19jb250cmFjdF9pZBgBIAIoDSJHChlTeW1ib2xzQnlVbmRl",
            "cmx5aW5nUmVwb3J0EioKB3N5bWJvbHMYASADKAsyGS5zeW1ib2xfYnJvd3Np",
            "bmdfMi5TeW1ib2wiRQoTQ2hpbGRTeW1ib2xzUmVxdWVzdBIYChBwYXJlbnRf",
            "c3ltYm9sX2lkGAEgAigJEhQKDGNhdGVnb3J5X2lkcxgCIAMoCSJAChJDaGls",
            "ZFN5bWJvbHNSZXBvcnQSKgoHc3ltYm9scxgBIAMoCzIZLnN5bWJvbF9icm93",
            "c2luZ18yLlN5bWJvbCKkAQoOU3ltYm9sQ2F0ZWdvcnkSCgoCaWQYASACKAkS",
            "DAoEbmFtZRgCIAIoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRIRCglwYXJlbnRf",
            "aWQYBCABKAkSEgoKY2FuX2ZpbHRlchgFIAIoCBITCgtleGNoYW5nZV9pZBgG",
            "IAEoERIWCg5jb250cmlidXRvcl9pZBgHIAEoCRIPCgdkZWxldGVkGAggASgI",
            "Ij8KGVN5bWJvbENhdGVnb3J5TGlzdFJlcXVlc3QSEwoLY2F0ZWdvcnlfaWQY",
            "ASABKAkSDQoFZGVwdGgYAiABKA0iWAoYU3ltYm9sQ2F0ZWdvcnlMaXN0UmVw",
            "b3J0EjwKEXN5bWJvbF9jYXRlZ29yaWVzGAEgAygLMiEuc3ltYm9sX2Jyb3dz",
            "aW5nXzIuU3ltYm9sQ2F0ZWdvcnkiLAoVU3ltYm9sQ2F0ZWdvcnlSZXF1ZXN0",
            "EhMKC2NhdGVnb3J5X2lkGAEgASgJIlIKFFN5bWJvbENhdGVnb3J5UmVwb3J0",
            "EjoKD3N5bWJvbF9jYXRlZ29yeRgBIAEoCzIhLnN5bWJvbF9icm93c2luZ18y",
            "LlN5bWJvbENhdGVnb3J5IjgKEVN5bWJvbExpc3RSZXF1ZXN0EhQKDGNhdGVn",
            "b3J5X2lkcxgBIAMoCRINCgVkZXB0aBgCIAEoDSI+ChBTeW1ib2xMaXN0UmVw",
            "b3J0EioKB3N5bWJvbHMYASADKAsyGS5zeW1ib2xfYnJvd3NpbmdfMi5TeW1i",
            "b2wiIgoNU3ltYm9sUmVxdWVzdBIRCglzeW1ib2xfaWQYASACKAkiOQoMU3lt",
            "Ym9sUmVwb3J0EikKBnN5bWJvbBgBIAEoCzIZLnN5bWJvbF9icm93c2luZ18y",
            "LlN5bWJvbCIlCg9Qcm9kdWN0TWV0YWRhdGESEgoKcHJvZHVjdF9pZBgBIAEo",
            "CSLTAgoQU2VjdXJpdHlNZXRhZGF0YRITCgtzZWN1cml0eV9pZBgBIAEoCRIQ",
            "CghjZmlfY29kZRgCIAEoCRIQCghjdXJyZW5jeRgDIAEoCRIRCgl0aWNrX3Np",
            "emUYBCABKAESEgoKdGlja192YWx1ZRgFIAEoARITCgtwZXJpb2RfdHlwZRgG",
            "IAEoDRIUCgxwZXJpb2RfdmFsdWUYByABKA0SLAoWY29udHJhY3Rfc2l6ZV9p",
            "bl91bml0cxgIIAEoCzIMLmNxZy5EZWNpbWFsEioKEmNvbnRyYWN0X3NpemVf",
            "dW5pdBgJIAEoCzIOLnNoYXJlZF8xLlRleHQSRwoWY29udHJpYnV0b3JfcGFy",
            "YW1ldGVycxgKIAMoCzInLm1ldGFkYXRhX2FkbWluXzIuQ29udHJpYnV0b3JQ",
            "YXJhbWV0ZXJzEhEKCXN5bWJvbF9pZBgLIAEoCQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cqg.DecimalReflection.Descriptor, global::Shared1.Shared1Reflection.Descriptor, global::Metadata2.Metadata2Reflection.Descriptor, global::MetadataAdmin2.MetadataAdmin2Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.Symbol), global::SymbolBrowsing2.Symbol.Parser, new[]{ "Id", "Name", "Description", "CfiCode", "HasChildSymbols", "ContractMetadata", "Deleted", "LastTradingDate", "MaturityMonthYear", "InstrumentGroupName", "ParentSymbolId", "CategoryIds", "SourceSymbolId", "ProductMetadata", "SecurityMetadata", "OptionMaturityMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.OptionMaturity), global::SymbolBrowsing2.OptionMaturity.Parser, new[]{ "OptionMaturityId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolsByUnderlyingRequest), global::SymbolBrowsing2.SymbolsByUnderlyingRequest.Parser, new[]{ "UnderlyingContractId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolsByUnderlyingReport), global::SymbolBrowsing2.SymbolsByUnderlyingReport.Parser, new[]{ "Symbols" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.ChildSymbolsRequest), global::SymbolBrowsing2.ChildSymbolsRequest.Parser, new[]{ "ParentSymbolId", "CategoryIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.ChildSymbolsReport), global::SymbolBrowsing2.ChildSymbolsReport.Parser, new[]{ "Symbols" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategory), global::SymbolBrowsing2.SymbolCategory.Parser, new[]{ "Id", "Name", "Description", "ParentId", "CanFilter", "ExchangeId", "ContributorId", "Deleted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategoryListRequest), global::SymbolBrowsing2.SymbolCategoryListRequest.Parser, new[]{ "CategoryId", "Depth" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategoryListReport), global::SymbolBrowsing2.SymbolCategoryListReport.Parser, new[]{ "SymbolCategories" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategoryRequest), global::SymbolBrowsing2.SymbolCategoryRequest.Parser, new[]{ "CategoryId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolCategoryReport), global::SymbolBrowsing2.SymbolCategoryReport.Parser, new[]{ "SymbolCategory" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolListRequest), global::SymbolBrowsing2.SymbolListRequest.Parser, new[]{ "CategoryIds", "Depth" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolListReport), global::SymbolBrowsing2.SymbolListReport.Parser, new[]{ "Symbols" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolRequest), global::SymbolBrowsing2.SymbolRequest.Parser, new[]{ "SymbolId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SymbolReport), global::SymbolBrowsing2.SymbolReport.Parser, new[]{ "Symbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.ProductMetadata), global::SymbolBrowsing2.ProductMetadata.Parser, new[]{ "ProductId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SymbolBrowsing2.SecurityMetadata), global::SymbolBrowsing2.SecurityMetadata.Parser, new[]{ "SecurityId", "CfiCode", "Currency", "TickSize", "TickValue", "PeriodType", "PeriodValue", "ContractSizeInUnits", "ContractSizeUnit", "ContributorParameters", "SymbolId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Symbol structure.
  /// </summary>
  public sealed partial class Symbol : pb::IMessage<Symbol>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Symbol> _parser = new pb::MessageParser<Symbol>(() => new Symbol());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Symbol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Symbol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Symbol(Symbol other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      cfiCode_ = other.cfiCode_;
      hasChildSymbols_ = other.hasChildSymbols_;
      contractMetadata_ = other.contractMetadata_ != null ? other.contractMetadata_.Clone() : null;
      deleted_ = other.deleted_;
      lastTradingDate_ = other.lastTradingDate_;
      maturityMonthYear_ = other.maturityMonthYear_;
      instrumentGroupName_ = other.instrumentGroupName_;
      parentSymbolId_ = other.parentSymbolId_;
      categoryIds_ = other.categoryIds_.Clone();
      sourceSymbolId_ = other.sourceSymbolId_;
      productMetadata_ = other.productMetadata_ != null ? other.productMetadata_.Clone() : null;
      securityMetadata_ = other.securityMetadata_ != null ? other.securityMetadata_.Clone() : null;
      optionMaturityMetadata_ = other.optionMaturityMetadata_ != null ? other.optionMaturityMetadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Symbol Clone() {
      return new Symbol(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// Symbol Identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Symbol readable name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Symbol description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "cfi_code" field.</summary>
    public const int CfiCodeFieldNumber = 4;
    private readonly static string CfiCodeDefaultValue = "";

    private string cfiCode_;
    /// <summary>
    /// CFI code (Classification of Financial Instruments, ISO 10962) if appropriate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CfiCode {
      get { return cfiCode_ ?? CfiCodeDefaultValue; }
      set {
        cfiCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cfi_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCfiCode {
      get { return cfiCode_ != null; }
    }
    /// <summary>Clears the value of the "cfi_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCfiCode() {
      cfiCode_ = null;
    }

    /// <summary>Field number for the "has_child_symbols" field.</summary>
    public const int HasChildSymbolsFieldNumber = 5;
    private readonly static bool HasChildSymbolsDefaultValue = false;

    private bool hasChildSymbols_;
    /// <summary>
    /// True if this symbol has child symbols (false for leafs of the symbol tree).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasChildSymbols {
      get { if ((_hasBits0 & 1) != 0) { return hasChildSymbols_; } else { return HasChildSymbolsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hasChildSymbols_ = value;
      }
    }
    /// <summary>Gets whether the "has_child_symbols" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasChildSymbols {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "has_child_symbols" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasChildSymbols() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "contract_metadata" field.</summary>
    public const int ContractMetadataFieldNumber = 6;
    private global::Metadata2.ContractMetadata contractMetadata_;
    /// <summary>
    /// Contract meta-data if a symbol is a specific contract (leaf of the symbol tree).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Metadata2.ContractMetadata ContractMetadata {
      get { return contractMetadata_; }
      set {
        contractMetadata_ = value;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 7;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// Deleted flag is used in updates when the symbol is either removed (e.g. expired) or
    /// no longer meets request filtering criterias (e.g. SymbolListRequest.category_id filter).
    /// Note: list of categories in category_id field (see below) may be cleared when symbol is removed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deleted {
      get { if ((_hasBits0 & 2) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeleted {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeleted() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "last_trading_date" field.</summary>
    public const int LastTradingDateFieldNumber = 8;
    private readonly static long LastTradingDateDefaultValue = 0L;

    private long lastTradingDate_;
    /// <summary>
    /// Last trading date for derivatives if applicable.
    /// (local exchange date in time format, use date part only).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTradingDate {
      get { if ((_hasBits0 & 4) != 0) { return lastTradingDate_; } else { return LastTradingDateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        lastTradingDate_ = value;
      }
    }
    /// <summary>Gets whether the "last_trading_date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastTradingDate {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "last_trading_date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastTradingDate() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "maturity_month_year" field.</summary>
    public const int MaturityMonthYearFieldNumber = 9;
    private readonly static string MaturityMonthYearDefaultValue = "";

    private string maturityMonthYear_;
    /// <summary>
    /// Month letter and 2-digit year identifying the maturity month of the symbol.
    /// Note: look at comment for maturity_month_year from ContractMetadata for further info.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaturityMonthYear {
      get { return maturityMonthYear_ ?? MaturityMonthYearDefaultValue; }
      set {
        maturityMonthYear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "maturity_month_year" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaturityMonthYear {
      get { return maturityMonthYear_ != null; }
    }
    /// <summary>Clears the value of the "maturity_month_year" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaturityMonthYear() {
      maturityMonthYear_ = null;
    }

    /// <summary>Field number for the "instrument_group_name" field.</summary>
    public const int InstrumentGroupNameFieldNumber = 10;
    private readonly static string InstrumentGroupNameDefaultValue = "";

    private string instrumentGroupName_;
    /// <summary>
    /// Name of a group of symbols that share the same properties (e.g. commodity name for futures and options).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentGroupName {
      get { return instrumentGroupName_ ?? InstrumentGroupNameDefaultValue; }
      set {
        instrumentGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "instrument_group_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInstrumentGroupName {
      get { return instrumentGroupName_ != null; }
    }
    /// <summary>Clears the value of the "instrument_group_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInstrumentGroupName() {
      instrumentGroupName_ = null;
    }

    /// <summary>Field number for the "parent_symbol_id" field.</summary>
    public const int ParentSymbolIdFieldNumber = 11;
    private readonly static string ParentSymbolIdDefaultValue = "";

    private string parentSymbolId_;
    /// <summary>
    /// ID of the parent symbol (if this is not the root symbol - product).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentSymbolId {
      get { return parentSymbolId_ ?? ParentSymbolIdDefaultValue; }
      set {
        parentSymbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "parent_symbol_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentSymbolId {
      get { return parentSymbolId_ != null; }
    }
    /// <summary>Clears the value of the "parent_symbol_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentSymbolId() {
      parentSymbolId_ = null;
    }

    /// <summary>Field number for the "category_ids" field.</summary>
    public const int CategoryIdsFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_categoryIds_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> categoryIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of categories of this symbol, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CategoryIds {
      get { return categoryIds_; }
    }

    /// <summary>Field number for the "source_symbol_id" field.</summary>
    public const int SourceSymbolIdFieldNumber = 13;
    private readonly static string SourceSymbolIdDefaultValue = "";

    private string sourceSymbolId_;
    /// <summary>
    /// If this is a double-quoted product then a source symbol ID is included.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceSymbolId {
      get { return sourceSymbolId_ ?? SourceSymbolIdDefaultValue; }
      set {
        sourceSymbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "source_symbol_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceSymbolId {
      get { return sourceSymbolId_ != null; }
    }
    /// <summary>Clears the value of the "source_symbol_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceSymbolId() {
      sourceSymbolId_ = null;
    }

    /// <summary>Field number for the "product_metadata" field.</summary>
    public const int ProductMetadataFieldNumber = 14;
    private global::SymbolBrowsing2.ProductMetadata productMetadata_;
    /// <summary>
    /// Meta-data of a product if this symbol describes one (aka Symbol Root Key).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.ProductMetadata ProductMetadata {
      get { return productMetadata_; }
      set {
        productMetadata_ = value;
      }
    }

    /// <summary>Field number for the "security_metadata" field.</summary>
    public const int SecurityMetadataFieldNumber = 15;
    private global::SymbolBrowsing2.SecurityMetadata securityMetadata_;
    /// <summary>
    /// Meta-data of a security if this symbol describes one (aka Symbol Prefix Key).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SecurityMetadata SecurityMetadata {
      get { return securityMetadata_; }
      set {
        securityMetadata_ = value;
      }
    }

    /// <summary>Field number for the "option_maturity_metadata" field.</summary>
    public const int OptionMaturityMetadataFieldNumber = 16;
    private global::SymbolBrowsing2.OptionMaturity optionMaturityMetadata_;
    /// <summary>
    /// Meta-data of options maturity group if this symbol describes one (aka Option Lead Key).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.OptionMaturity OptionMaturityMetadata {
      get { return optionMaturityMetadata_; }
      set {
        optionMaturityMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Symbol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Symbol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (CfiCode != other.CfiCode) return false;
      if (HasChildSymbols != other.HasChildSymbols) return false;
      if (!object.Equals(ContractMetadata, other.ContractMetadata)) return false;
      if (Deleted != other.Deleted) return false;
      if (LastTradingDate != other.LastTradingDate) return false;
      if (MaturityMonthYear != other.MaturityMonthYear) return false;
      if (InstrumentGroupName != other.InstrumentGroupName) return false;
      if (ParentSymbolId != other.ParentSymbolId) return false;
      if(!categoryIds_.Equals(other.categoryIds_)) return false;
      if (SourceSymbolId != other.SourceSymbolId) return false;
      if (!object.Equals(ProductMetadata, other.ProductMetadata)) return false;
      if (!object.Equals(SecurityMetadata, other.SecurityMetadata)) return false;
      if (!object.Equals(OptionMaturityMetadata, other.OptionMaturityMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasCfiCode) hash ^= CfiCode.GetHashCode();
      if (HasHasChildSymbols) hash ^= HasChildSymbols.GetHashCode();
      if (contractMetadata_ != null) hash ^= ContractMetadata.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (HasLastTradingDate) hash ^= LastTradingDate.GetHashCode();
      if (HasMaturityMonthYear) hash ^= MaturityMonthYear.GetHashCode();
      if (HasInstrumentGroupName) hash ^= InstrumentGroupName.GetHashCode();
      if (HasParentSymbolId) hash ^= ParentSymbolId.GetHashCode();
      hash ^= categoryIds_.GetHashCode();
      if (HasSourceSymbolId) hash ^= SourceSymbolId.GetHashCode();
      if (productMetadata_ != null) hash ^= ProductMetadata.GetHashCode();
      if (securityMetadata_ != null) hash ^= SecurityMetadata.GetHashCode();
      if (optionMaturityMetadata_ != null) hash ^= OptionMaturityMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasCfiCode) {
        output.WriteRawTag(34);
        output.WriteString(CfiCode);
      }
      if (HasHasChildSymbols) {
        output.WriteRawTag(40);
        output.WriteBool(HasChildSymbols);
      }
      if (contractMetadata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ContractMetadata);
      }
      if (HasDeleted) {
        output.WriteRawTag(56);
        output.WriteBool(Deleted);
      }
      if (HasLastTradingDate) {
        output.WriteRawTag(64);
        output.WriteSInt64(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        output.WriteRawTag(74);
        output.WriteString(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        output.WriteRawTag(82);
        output.WriteString(InstrumentGroupName);
      }
      if (HasParentSymbolId) {
        output.WriteRawTag(90);
        output.WriteString(ParentSymbolId);
      }
      categoryIds_.WriteTo(output, _repeated_categoryIds_codec);
      if (HasSourceSymbolId) {
        output.WriteRawTag(106);
        output.WriteString(SourceSymbolId);
      }
      if (productMetadata_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ProductMetadata);
      }
      if (securityMetadata_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SecurityMetadata);
      }
      if (optionMaturityMetadata_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(OptionMaturityMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasCfiCode) {
        output.WriteRawTag(34);
        output.WriteString(CfiCode);
      }
      if (HasHasChildSymbols) {
        output.WriteRawTag(40);
        output.WriteBool(HasChildSymbols);
      }
      if (contractMetadata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ContractMetadata);
      }
      if (HasDeleted) {
        output.WriteRawTag(56);
        output.WriteBool(Deleted);
      }
      if (HasLastTradingDate) {
        output.WriteRawTag(64);
        output.WriteSInt64(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        output.WriteRawTag(74);
        output.WriteString(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        output.WriteRawTag(82);
        output.WriteString(InstrumentGroupName);
      }
      if (HasParentSymbolId) {
        output.WriteRawTag(90);
        output.WriteString(ParentSymbolId);
      }
      categoryIds_.WriteTo(ref output, _repeated_categoryIds_codec);
      if (HasSourceSymbolId) {
        output.WriteRawTag(106);
        output.WriteString(SourceSymbolId);
      }
      if (productMetadata_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ProductMetadata);
      }
      if (securityMetadata_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SecurityMetadata);
      }
      if (optionMaturityMetadata_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(OptionMaturityMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasCfiCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CfiCode);
      }
      if (HasHasChildSymbols) {
        size += 1 + 1;
      }
      if (contractMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractMetadata);
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (HasLastTradingDate) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LastTradingDate);
      }
      if (HasMaturityMonthYear) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaturityMonthYear);
      }
      if (HasInstrumentGroupName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentGroupName);
      }
      if (HasParentSymbolId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentSymbolId);
      }
      size += categoryIds_.CalculateSize(_repeated_categoryIds_codec);
      if (HasSourceSymbolId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceSymbolId);
      }
      if (productMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProductMetadata);
      }
      if (securityMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecurityMetadata);
      }
      if (optionMaturityMetadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OptionMaturityMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Symbol other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasCfiCode) {
        CfiCode = other.CfiCode;
      }
      if (other.HasHasChildSymbols) {
        HasChildSymbols = other.HasChildSymbols;
      }
      if (other.contractMetadata_ != null) {
        if (contractMetadata_ == null) {
          ContractMetadata = new global::Metadata2.ContractMetadata();
        }
        ContractMetadata.MergeFrom(other.ContractMetadata);
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      if (other.HasLastTradingDate) {
        LastTradingDate = other.LastTradingDate;
      }
      if (other.HasMaturityMonthYear) {
        MaturityMonthYear = other.MaturityMonthYear;
      }
      if (other.HasInstrumentGroupName) {
        InstrumentGroupName = other.InstrumentGroupName;
      }
      if (other.HasParentSymbolId) {
        ParentSymbolId = other.ParentSymbolId;
      }
      categoryIds_.Add(other.categoryIds_);
      if (other.HasSourceSymbolId) {
        SourceSymbolId = other.SourceSymbolId;
      }
      if (other.productMetadata_ != null) {
        if (productMetadata_ == null) {
          ProductMetadata = new global::SymbolBrowsing2.ProductMetadata();
        }
        ProductMetadata.MergeFrom(other.ProductMetadata);
      }
      if (other.securityMetadata_ != null) {
        if (securityMetadata_ == null) {
          SecurityMetadata = new global::SymbolBrowsing2.SecurityMetadata();
        }
        SecurityMetadata.MergeFrom(other.SecurityMetadata);
      }
      if (other.optionMaturityMetadata_ != null) {
        if (optionMaturityMetadata_ == null) {
          OptionMaturityMetadata = new global::SymbolBrowsing2.OptionMaturity();
        }
        OptionMaturityMetadata.MergeFrom(other.OptionMaturityMetadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            CfiCode = input.ReadString();
            break;
          }
          case 40: {
            HasChildSymbols = input.ReadBool();
            break;
          }
          case 50: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
          case 56: {
            Deleted = input.ReadBool();
            break;
          }
          case 64: {
            LastTradingDate = input.ReadSInt64();
            break;
          }
          case 74: {
            MaturityMonthYear = input.ReadString();
            break;
          }
          case 82: {
            InstrumentGroupName = input.ReadString();
            break;
          }
          case 90: {
            ParentSymbolId = input.ReadString();
            break;
          }
          case 98: {
            categoryIds_.AddEntriesFrom(input, _repeated_categoryIds_codec);
            break;
          }
          case 106: {
            SourceSymbolId = input.ReadString();
            break;
          }
          case 114: {
            if (productMetadata_ == null) {
              ProductMetadata = new global::SymbolBrowsing2.ProductMetadata();
            }
            input.ReadMessage(ProductMetadata);
            break;
          }
          case 122: {
            if (securityMetadata_ == null) {
              SecurityMetadata = new global::SymbolBrowsing2.SecurityMetadata();
            }
            input.ReadMessage(SecurityMetadata);
            break;
          }
          case 130: {
            if (optionMaturityMetadata_ == null) {
              OptionMaturityMetadata = new global::SymbolBrowsing2.OptionMaturity();
            }
            input.ReadMessage(OptionMaturityMetadata);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            CfiCode = input.ReadString();
            break;
          }
          case 40: {
            HasChildSymbols = input.ReadBool();
            break;
          }
          case 50: {
            if (contractMetadata_ == null) {
              ContractMetadata = new global::Metadata2.ContractMetadata();
            }
            input.ReadMessage(ContractMetadata);
            break;
          }
          case 56: {
            Deleted = input.ReadBool();
            break;
          }
          case 64: {
            LastTradingDate = input.ReadSInt64();
            break;
          }
          case 74: {
            MaturityMonthYear = input.ReadString();
            break;
          }
          case 82: {
            InstrumentGroupName = input.ReadString();
            break;
          }
          case 90: {
            ParentSymbolId = input.ReadString();
            break;
          }
          case 98: {
            categoryIds_.AddEntriesFrom(ref input, _repeated_categoryIds_codec);
            break;
          }
          case 106: {
            SourceSymbolId = input.ReadString();
            break;
          }
          case 114: {
            if (productMetadata_ == null) {
              ProductMetadata = new global::SymbolBrowsing2.ProductMetadata();
            }
            input.ReadMessage(ProductMetadata);
            break;
          }
          case 122: {
            if (securityMetadata_ == null) {
              SecurityMetadata = new global::SymbolBrowsing2.SecurityMetadata();
            }
            input.ReadMessage(SecurityMetadata);
            break;
          }
          case 130: {
            if (optionMaturityMetadata_ == null) {
              OptionMaturityMetadata = new global::SymbolBrowsing2.OptionMaturity();
            }
            input.ReadMessage(OptionMaturityMetadata);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OptionMaturity : pb::IMessage<OptionMaturity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionMaturity> _parser = new pb::MessageParser<OptionMaturity>(() => new OptionMaturity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptionMaturity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionMaturity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionMaturity(OptionMaturity other) : this() {
      optionMaturityId_ = other.optionMaturityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionMaturity Clone() {
      return new OptionMaturity(this);
    }

    /// <summary>Field number for the "option_maturity_id" field.</summary>
    public const int OptionMaturityIdFieldNumber = 1;
    private readonly static string OptionMaturityIdDefaultValue = "";

    private string optionMaturityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OptionMaturityId {
      get { return optionMaturityId_ ?? OptionMaturityIdDefaultValue; }
      set {
        optionMaturityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "option_maturity_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOptionMaturityId {
      get { return optionMaturityId_ != null; }
    }
    /// <summary>Clears the value of the "option_maturity_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOptionMaturityId() {
      optionMaturityId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptionMaturity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptionMaturity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OptionMaturityId != other.OptionMaturityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOptionMaturityId) hash ^= OptionMaturityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOptionMaturityId) {
        output.WriteRawTag(10);
        output.WriteString(OptionMaturityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOptionMaturityId) {
        output.WriteRawTag(10);
        output.WriteString(OptionMaturityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOptionMaturityId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OptionMaturityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptionMaturity other) {
      if (other == null) {
        return;
      }
      if (other.HasOptionMaturityId) {
        OptionMaturityId = other.OptionMaturityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OptionMaturityId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            OptionMaturityId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request a list of symbols (options) by an underlying contract.
  /// </summary>
  public sealed partial class SymbolsByUnderlyingRequest : pb::IMessage<SymbolsByUnderlyingRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolsByUnderlyingRequest> _parser = new pb::MessageParser<SymbolsByUnderlyingRequest>(() => new SymbolsByUnderlyingRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolsByUnderlyingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsByUnderlyingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsByUnderlyingRequest(SymbolsByUnderlyingRequest other) : this() {
      _hasBits0 = other._hasBits0;
      underlyingContractId_ = other.underlyingContractId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsByUnderlyingRequest Clone() {
      return new SymbolsByUnderlyingRequest(this);
    }

    /// <summary>Field number for the "underlying_contract_id" field.</summary>
    public const int UnderlyingContractIdFieldNumber = 1;
    private readonly static uint UnderlyingContractIdDefaultValue = 0;

    private uint underlyingContractId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnderlyingContractId {
      get { if ((_hasBits0 & 1) != 0) { return underlyingContractId_; } else { return UnderlyingContractIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        underlyingContractId_ = value;
      }
    }
    /// <summary>Gets whether the "underlying_contract_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnderlyingContractId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "underlying_contract_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUnderlyingContractId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolsByUnderlyingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolsByUnderlyingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnderlyingContractId != other.UnderlyingContractId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUnderlyingContractId) hash ^= UnderlyingContractId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUnderlyingContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnderlyingContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUnderlyingContractId) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnderlyingContractId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUnderlyingContractId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnderlyingContractId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolsByUnderlyingRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasUnderlyingContractId) {
        UnderlyingContractId = other.UnderlyingContractId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnderlyingContractId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UnderlyingContractId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a list of symbols.
  /// When the list is updated by a subscription
  /// (e.g. some option maturity is expired or a new one appears)
  /// the list includes only new or deleted symbols.
  /// </summary>
  public sealed partial class SymbolsByUnderlyingReport : pb::IMessage<SymbolsByUnderlyingReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolsByUnderlyingReport> _parser = new pb::MessageParser<SymbolsByUnderlyingReport>(() => new SymbolsByUnderlyingReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolsByUnderlyingReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsByUnderlyingReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsByUnderlyingReport(SymbolsByUnderlyingReport other) : this() {
      symbols_ = other.symbols_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolsByUnderlyingReport Clone() {
      return new SymbolsByUnderlyingReport(this);
    }

    /// <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SymbolBrowsing2.Symbol> _repeated_symbols_codec
        = pb::FieldCodec.ForMessage(10, global::SymbolBrowsing2.Symbol.Parser);
    private readonly pbc::RepeatedField<global::SymbolBrowsing2.Symbol> symbols_ = new pbc::RepeatedField<global::SymbolBrowsing2.Symbol>();
    /// <summary>
    /// List of related symbols (option maturities without strikes).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SymbolBrowsing2.Symbol> Symbols {
      get { return symbols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolsByUnderlyingReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolsByUnderlyingReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbols_.Equals(other.symbols_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbols_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbols_.WriteTo(output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbols_.WriteTo(ref output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += symbols_.CalculateSize(_repeated_symbols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolsByUnderlyingReport other) {
      if (other == null) {
        return;
      }
      symbols_.Add(other.symbols_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            symbols_.AddEntriesFrom(ref input, _repeated_symbols_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request a list of child symbols for a higher level symbol.
  /// </summary>
  public sealed partial class ChildSymbolsRequest : pb::IMessage<ChildSymbolsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChildSymbolsRequest> _parser = new pb::MessageParser<ChildSymbolsRequest>(() => new ChildSymbolsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChildSymbolsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChildSymbolsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChildSymbolsRequest(ChildSymbolsRequest other) : this() {
      parentSymbolId_ = other.parentSymbolId_;
      categoryIds_ = other.categoryIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChildSymbolsRequest Clone() {
      return new ChildSymbolsRequest(this);
    }

    /// <summary>Field number for the "parent_symbol_id" field.</summary>
    public const int ParentSymbolIdFieldNumber = 1;
    private readonly static string ParentSymbolIdDefaultValue = "";

    private string parentSymbolId_;
    /// <summary>
    /// Can be either id of the parent symbol or instrument group's name (for futures only, e.g. 'F.US.EP').
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentSymbolId {
      get { return parentSymbolId_ ?? ParentSymbolIdDefaultValue; }
      set {
        parentSymbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "parent_symbol_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentSymbolId {
      get { return parentSymbolId_ != null; }
    }
    /// <summary>Clears the value of the "parent_symbol_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentSymbolId() {
      parentSymbolId_ = null;
    }

    /// <summary>Field number for the "category_ids" field.</summary>
    public const int CategoryIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_categoryIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> categoryIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optional filter by categories.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CategoryIds {
      get { return categoryIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChildSymbolsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChildSymbolsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParentSymbolId != other.ParentSymbolId) return false;
      if(!categoryIds_.Equals(other.categoryIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasParentSymbolId) hash ^= ParentSymbolId.GetHashCode();
      hash ^= categoryIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasParentSymbolId) {
        output.WriteRawTag(10);
        output.WriteString(ParentSymbolId);
      }
      categoryIds_.WriteTo(output, _repeated_categoryIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasParentSymbolId) {
        output.WriteRawTag(10);
        output.WriteString(ParentSymbolId);
      }
      categoryIds_.WriteTo(ref output, _repeated_categoryIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasParentSymbolId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentSymbolId);
      }
      size += categoryIds_.CalculateSize(_repeated_categoryIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChildSymbolsRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasParentSymbolId) {
        ParentSymbolId = other.ParentSymbolId;
      }
      categoryIds_.Add(other.categoryIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ParentSymbolId = input.ReadString();
            break;
          }
          case 18: {
            categoryIds_.AddEntriesFrom(input, _repeated_categoryIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ParentSymbolId = input.ReadString();
            break;
          }
          case 18: {
            categoryIds_.AddEntriesFrom(ref input, _repeated_categoryIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a list of child symbols.
  /// </summary>
  public sealed partial class ChildSymbolsReport : pb::IMessage<ChildSymbolsReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChildSymbolsReport> _parser = new pb::MessageParser<ChildSymbolsReport>(() => new ChildSymbolsReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChildSymbolsReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChildSymbolsReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChildSymbolsReport(ChildSymbolsReport other) : this() {
      symbols_ = other.symbols_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChildSymbolsReport Clone() {
      return new ChildSymbolsReport(this);
    }

    /// <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SymbolBrowsing2.Symbol> _repeated_symbols_codec
        = pb::FieldCodec.ForMessage(10, global::SymbolBrowsing2.Symbol.Parser);
    private readonly pbc::RepeatedField<global::SymbolBrowsing2.Symbol> symbols_ = new pbc::RepeatedField<global::SymbolBrowsing2.Symbol>();
    /// <summary>
    /// List of child symbols.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SymbolBrowsing2.Symbol> Symbols {
      get { return symbols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChildSymbolsReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChildSymbolsReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbols_.Equals(other.symbols_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbols_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbols_.WriteTo(output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbols_.WriteTo(ref output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += symbols_.CalculateSize(_repeated_symbols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChildSymbolsReport other) {
      if (other == null) {
        return;
      }
      symbols_.Add(other.symbols_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            symbols_.AddEntriesFrom(ref input, _repeated_symbols_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Symbol category.
  /// </summary>
  public sealed partial class SymbolCategory : pb::IMessage<SymbolCategory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategory> _parser = new pb::MessageParser<SymbolCategory>(() => new SymbolCategory());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolCategory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategory(SymbolCategory other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      parentId_ = other.parentId_;
      canFilter_ = other.canFilter_;
      exchangeId_ = other.exchangeId_;
      contributorId_ = other.contributorId_;
      deleted_ = other.deleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategory Clone() {
      return new SymbolCategory(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// Category identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Category name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Category description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "parent_id" field.</summary>
    public const int ParentIdFieldNumber = 4;
    private readonly static string ParentIdDefaultValue = "";

    private string parentId_;
    /// <summary>
    /// Category parent identifier. Omitted for root categories.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentId {
      get { return parentId_ ?? ParentIdDefaultValue; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "parent_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasParentId {
      get { return parentId_ != null; }
    }
    /// <summary>Clears the value of the "parent_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearParentId() {
      parentId_ = null;
    }

    /// <summary>Field number for the "can_filter" field.</summary>
    public const int CanFilterFieldNumber = 5;
    private readonly static bool CanFilterDefaultValue = false;

    private bool canFilter_;
    /// <summary>
    /// Indicates whether this category can be used as a filter for getting a list of symbols.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanFilter {
      get { if ((_hasBits0 & 1) != 0) { return canFilter_; } else { return CanFilterDefaultValue; } }
      set {
        _hasBits0 |= 1;
        canFilter_ = value;
      }
    }
    /// <summary>Gets whether the "can_filter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCanFilter {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "can_filter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCanFilter() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 6;
    private readonly static int ExchangeIdDefaultValue = 0;

    private int exchangeId_;
    /// <summary>
    /// If the category is an exchange then this field defines exchange ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExchangeId {
      get { if ((_hasBits0 & 2) != 0) { return exchangeId_; } else { return ExchangeIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        exchangeId_ = value;
      }
    }
    /// <summary>Gets whether the "exchange_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExchangeId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "exchange_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExchangeId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "contributor_id" field.</summary>
    public const int ContributorIdFieldNumber = 7;
    private readonly static string ContributorIdDefaultValue = "";

    private string contributorId_;
    /// <summary>
    /// If the category is a contributor then this field defines contributor ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContributorId {
      get { return contributorId_ ?? ContributorIdDefaultValue; }
      set {
        contributorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contributor_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContributorId {
      get { return contributorId_ != null; }
    }
    /// <summary>Clears the value of the "contributor_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContributorId() {
      contributorId_ = null;
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 8;
    private readonly static bool DeletedDefaultValue = false;

    private bool deleted_;
    /// <summary>
    /// Deleted flag is used in updates when the category is removed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deleted {
      get { if ((_hasBits0 & 4) != 0) { return deleted_; } else { return DeletedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        deleted_ = value;
      }
    }
    /// <summary>Gets whether the "deleted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeleted {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "deleted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeleted() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolCategory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (ParentId != other.ParentId) return false;
      if (CanFilter != other.CanFilter) return false;
      if (ExchangeId != other.ExchangeId) return false;
      if (ContributorId != other.ContributorId) return false;
      if (Deleted != other.Deleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasParentId) hash ^= ParentId.GetHashCode();
      if (HasCanFilter) hash ^= CanFilter.GetHashCode();
      if (HasExchangeId) hash ^= ExchangeId.GetHashCode();
      if (HasContributorId) hash ^= ContributorId.GetHashCode();
      if (HasDeleted) hash ^= Deleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasParentId) {
        output.WriteRawTag(34);
        output.WriteString(ParentId);
      }
      if (HasCanFilter) {
        output.WriteRawTag(40);
        output.WriteBool(CanFilter);
      }
      if (HasExchangeId) {
        output.WriteRawTag(48);
        output.WriteSInt32(ExchangeId);
      }
      if (HasContributorId) {
        output.WriteRawTag(58);
        output.WriteString(ContributorId);
      }
      if (HasDeleted) {
        output.WriteRawTag(64);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (HasParentId) {
        output.WriteRawTag(34);
        output.WriteString(ParentId);
      }
      if (HasCanFilter) {
        output.WriteRawTag(40);
        output.WriteBool(CanFilter);
      }
      if (HasExchangeId) {
        output.WriteRawTag(48);
        output.WriteSInt32(ExchangeId);
      }
      if (HasContributorId) {
        output.WriteRawTag(58);
        output.WriteString(ContributorId);
      }
      if (HasDeleted) {
        output.WriteRawTag(64);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasParentId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentId);
      }
      if (HasCanFilter) {
        size += 1 + 1;
      }
      if (HasExchangeId) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ExchangeId);
      }
      if (HasContributorId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContributorId);
      }
      if (HasDeleted) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolCategory other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasParentId) {
        ParentId = other.ParentId;
      }
      if (other.HasCanFilter) {
        CanFilter = other.CanFilter;
      }
      if (other.HasExchangeId) {
        ExchangeId = other.ExchangeId;
      }
      if (other.HasContributorId) {
        ContributorId = other.ContributorId;
      }
      if (other.HasDeleted) {
        Deleted = other.Deleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            ParentId = input.ReadString();
            break;
          }
          case 40: {
            CanFilter = input.ReadBool();
            break;
          }
          case 48: {
            ExchangeId = input.ReadSInt32();
            break;
          }
          case 58: {
            ContributorId = input.ReadString();
            break;
          }
          case 64: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            ParentId = input.ReadString();
            break;
          }
          case 40: {
            CanFilter = input.ReadBool();
            break;
          }
          case 48: {
            ExchangeId = input.ReadSInt32();
            break;
          }
          case 58: {
            ContributorId = input.ReadString();
            break;
          }
          case 64: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for a symbol category [sub-]tree for a particular root. each category can have a list of sub-categories.
  /// A list of roots can be requested using an empty list of category IDs.
  /// </summary>
  public sealed partial class SymbolCategoryListRequest : pb::IMessage<SymbolCategoryListRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategoryListRequest> _parser = new pb::MessageParser<SymbolCategoryListRequest>(() => new SymbolCategoryListRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolCategoryListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryListRequest(SymbolCategoryListRequest other) : this() {
      _hasBits0 = other._hasBits0;
      categoryId_ = other.categoryId_;
      depth_ = other.depth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryListRequest Clone() {
      return new SymbolCategoryListRequest(this);
    }

    /// <summary>Field number for the "category_id" field.</summary>
    public const int CategoryIdFieldNumber = 1;
    private readonly static string CategoryIdDefaultValue = "";

    private string categoryId_;
    /// <summary>
    /// Category Identifier to request corresponding sub-tree.
    /// Do not specify category ID to get categories from roots.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CategoryId {
      get { return categoryId_ ?? CategoryIdDefaultValue; }
      set {
        categoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "category_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCategoryId {
      get { return categoryId_ != null; }
    }
    /// <summary>Clears the value of the "category_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCategoryId() {
      categoryId_ = null;
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 2;
    private readonly static uint DepthDefaultValue = 0;

    private uint depth_;
    /// <summary>
    /// Optional depth. One level is returned if not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Depth {
      get { if ((_hasBits0 & 1) != 0) { return depth_; } else { return DepthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        depth_ = value;
      }
    }
    /// <summary>Gets whether the "depth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDepth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "depth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDepth() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategoryListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolCategoryListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CategoryId != other.CategoryId) return false;
      if (Depth != other.Depth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCategoryId) hash ^= CategoryId.GetHashCode();
      if (HasDepth) hash ^= Depth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCategoryId) {
        output.WriteRawTag(10);
        output.WriteString(CategoryId);
      }
      if (HasDepth) {
        output.WriteRawTag(16);
        output.WriteUInt32(Depth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCategoryId) {
        output.WriteRawTag(10);
        output.WriteString(CategoryId);
      }
      if (HasDepth) {
        output.WriteRawTag(16);
        output.WriteUInt32(Depth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCategoryId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryId);
      }
      if (HasDepth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Depth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolCategoryListRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasCategoryId) {
        CategoryId = other.CategoryId;
      }
      if (other.HasDepth) {
        Depth = other.Depth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CategoryId = input.ReadString();
            break;
          }
          case 16: {
            Depth = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CategoryId = input.ReadString();
            break;
          }
          case 16: {
            Depth = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a symbol category tree for a particular root.
  /// </summary>
  public sealed partial class SymbolCategoryListReport : pb::IMessage<SymbolCategoryListReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategoryListReport> _parser = new pb::MessageParser<SymbolCategoryListReport>(() => new SymbolCategoryListReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolCategoryListReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryListReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryListReport(SymbolCategoryListReport other) : this() {
      symbolCategories_ = other.symbolCategories_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryListReport Clone() {
      return new SymbolCategoryListReport(this);
    }

    /// <summary>Field number for the "symbol_categories" field.</summary>
    public const int SymbolCategoriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SymbolBrowsing2.SymbolCategory> _repeated_symbolCategories_codec
        = pb::FieldCodec.ForMessage(10, global::SymbolBrowsing2.SymbolCategory.Parser);
    private readonly pbc::RepeatedField<global::SymbolBrowsing2.SymbolCategory> symbolCategories_ = new pbc::RepeatedField<global::SymbolBrowsing2.SymbolCategory>();
    /// <summary>
    /// List of categories linked to their parents.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SymbolBrowsing2.SymbolCategory> SymbolCategories {
      get { return symbolCategories_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategoryListReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolCategoryListReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbolCategories_.Equals(other.symbolCategories_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbolCategories_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbolCategories_.WriteTo(output, _repeated_symbolCategories_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbolCategories_.WriteTo(ref output, _repeated_symbolCategories_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += symbolCategories_.CalculateSize(_repeated_symbolCategories_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolCategoryListReport other) {
      if (other == null) {
        return;
      }
      symbolCategories_.Add(other.symbolCategories_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbolCategories_.AddEntriesFrom(input, _repeated_symbolCategories_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            symbolCategories_.AddEntriesFrom(ref input, _repeated_symbolCategories_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for a specific category by ID.
  /// </summary>
  public sealed partial class SymbolCategoryRequest : pb::IMessage<SymbolCategoryRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategoryRequest> _parser = new pb::MessageParser<SymbolCategoryRequest>(() => new SymbolCategoryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolCategoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryRequest(SymbolCategoryRequest other) : this() {
      categoryId_ = other.categoryId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryRequest Clone() {
      return new SymbolCategoryRequest(this);
    }

    /// <summary>Field number for the "category_id" field.</summary>
    public const int CategoryIdFieldNumber = 1;
    private readonly static string CategoryIdDefaultValue = "";

    private string categoryId_;
    /// <summary>
    /// Category Identifier to request corresponding category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CategoryId {
      get { return categoryId_ ?? CategoryIdDefaultValue; }
      set {
        categoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "category_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCategoryId {
      get { return categoryId_ != null; }
    }
    /// <summary>Clears the value of the "category_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCategoryId() {
      categoryId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolCategoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CategoryId != other.CategoryId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCategoryId) hash ^= CategoryId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCategoryId) {
        output.WriteRawTag(10);
        output.WriteString(CategoryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCategoryId) {
        output.WriteRawTag(10);
        output.WriteString(CategoryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCategoryId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolCategoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasCategoryId) {
        CategoryId = other.CategoryId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CategoryId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CategoryId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a category.
  /// </summary>
  public sealed partial class SymbolCategoryReport : pb::IMessage<SymbolCategoryReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolCategoryReport> _parser = new pb::MessageParser<SymbolCategoryReport>(() => new SymbolCategoryReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolCategoryReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryReport(SymbolCategoryReport other) : this() {
      symbolCategory_ = other.symbolCategory_ != null ? other.symbolCategory_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolCategoryReport Clone() {
      return new SymbolCategoryReport(this);
    }

    /// <summary>Field number for the "symbol_category" field.</summary>
    public const int SymbolCategoryFieldNumber = 1;
    private global::SymbolBrowsing2.SymbolCategory symbolCategory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.SymbolCategory SymbolCategory {
      get { return symbolCategory_; }
      set {
        symbolCategory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolCategoryReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolCategoryReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SymbolCategory, other.SymbolCategory)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (symbolCategory_ != null) hash ^= SymbolCategory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (symbolCategory_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SymbolCategory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (symbolCategory_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SymbolCategory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (symbolCategory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SymbolCategory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolCategoryReport other) {
      if (other == null) {
        return;
      }
      if (other.symbolCategory_ != null) {
        if (symbolCategory_ == null) {
          SymbolCategory = new global::SymbolBrowsing2.SymbolCategory();
        }
        SymbolCategory.MergeFrom(other.SymbolCategory);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (symbolCategory_ == null) {
              SymbolCategory = new global::SymbolBrowsing2.SymbolCategory();
            }
            input.ReadMessage(SymbolCategory);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (symbolCategory_ == null) {
              SymbolCategory = new global::SymbolBrowsing2.SymbolCategory();
            }
            input.ReadMessage(SymbolCategory);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for a list of symbols according to a filter.
  /// At least one filter field has to be specified.
  /// </summary>
  public sealed partial class SymbolListRequest : pb::IMessage<SymbolListRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolListRequest> _parser = new pb::MessageParser<SymbolListRequest>(() => new SymbolListRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListRequest(SymbolListRequest other) : this() {
      _hasBits0 = other._hasBits0;
      categoryIds_ = other.categoryIds_.Clone();
      depth_ = other.depth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListRequest Clone() {
      return new SymbolListRequest(this);
    }

    /// <summary>Field number for the "category_ids" field.</summary>
    public const int CategoryIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_categoryIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> categoryIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Category filtering. Only symbols that belong to all of the specified categories are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CategoryIds {
      get { return categoryIds_; }
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 2;
    private readonly static uint DepthDefaultValue = 0;

    private uint depth_;
    /// <summary>
    /// Number of levels in the symbol tree to return, one is returned if omitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Depth {
      get { if ((_hasBits0 & 1) != 0) { return depth_; } else { return DepthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        depth_ = value;
      }
    }
    /// <summary>Gets whether the "depth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDepth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "depth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDepth() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!categoryIds_.Equals(other.categoryIds_)) return false;
      if (Depth != other.Depth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= categoryIds_.GetHashCode();
      if (HasDepth) hash ^= Depth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      categoryIds_.WriteTo(output, _repeated_categoryIds_codec);
      if (HasDepth) {
        output.WriteRawTag(16);
        output.WriteUInt32(Depth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      categoryIds_.WriteTo(ref output, _repeated_categoryIds_codec);
      if (HasDepth) {
        output.WriteRawTag(16);
        output.WriteUInt32(Depth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += categoryIds_.CalculateSize(_repeated_categoryIds_codec);
      if (HasDepth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Depth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolListRequest other) {
      if (other == null) {
        return;
      }
      categoryIds_.Add(other.categoryIds_);
      if (other.HasDepth) {
        Depth = other.Depth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            categoryIds_.AddEntriesFrom(input, _repeated_categoryIds_codec);
            break;
          }
          case 16: {
            Depth = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            categoryIds_.AddEntriesFrom(ref input, _repeated_categoryIds_codec);
            break;
          }
          case 16: {
            Depth = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a list of found symbols.
  /// </summary>
  public sealed partial class SymbolListReport : pb::IMessage<SymbolListReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolListReport> _parser = new pb::MessageParser<SymbolListReport>(() => new SymbolListReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolListReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListReport(SymbolListReport other) : this() {
      symbols_ = other.symbols_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListReport Clone() {
      return new SymbolListReport(this);
    }

    /// <summary>Field number for the "symbols" field.</summary>
    public const int SymbolsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SymbolBrowsing2.Symbol> _repeated_symbols_codec
        = pb::FieldCodec.ForMessage(10, global::SymbolBrowsing2.Symbol.Parser);
    private readonly pbc::RepeatedField<global::SymbolBrowsing2.Symbol> symbols_ = new pbc::RepeatedField<global::SymbolBrowsing2.Symbol>();
    /// <summary>
    /// List of symbols.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SymbolBrowsing2.Symbol> Symbols {
      get { return symbols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolListReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolListReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbols_.Equals(other.symbols_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbols_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbols_.WriteTo(output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbols_.WriteTo(ref output, _repeated_symbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += symbols_.CalculateSize(_repeated_symbols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolListReport other) {
      if (other == null) {
        return;
      }
      symbols_.Add(other.symbols_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            symbols_.AddEntriesFrom(ref input, _repeated_symbols_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for a specific symbol by ID.
  /// </summary>
  public sealed partial class SymbolRequest : pb::IMessage<SymbolRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolRequest> _parser = new pb::MessageParser<SymbolRequest>(() => new SymbolRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolRequest(SymbolRequest other) : this() {
      symbolId_ = other.symbolId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolRequest Clone() {
      return new SymbolRequest(this);
    }

    /// <summary>Field number for the "symbol_id" field.</summary>
    public const int SymbolIdFieldNumber = 1;
    private readonly static string SymbolIdDefaultValue = "";

    private string symbolId_;
    /// <summary>
    /// ID of a symbol to request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolId {
      get { return symbolId_ ?? SymbolIdDefaultValue; }
      set {
        symbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "symbol_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSymbolId {
      get { return symbolId_ != null; }
    }
    /// <summary>Clears the value of the "symbol_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSymbolId() {
      symbolId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolId != other.SymbolId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSymbolId) hash ^= SymbolId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSymbolId) {
        output.WriteRawTag(10);
        output.WriteString(SymbolId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSymbolId) {
        output.WriteRawTag(10);
        output.WriteString(SymbolId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSymbolId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasSymbolId) {
        SymbolId = other.SymbolId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SymbolId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Report with a symbol.
  /// </summary>
  public sealed partial class SymbolReport : pb::IMessage<SymbolReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SymbolReport> _parser = new pb::MessageParser<SymbolReport>(() => new SymbolReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolReport(SymbolReport other) : this() {
      symbol_ = other.symbol_ != null ? other.symbol_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolReport Clone() {
      return new SymbolReport(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private global::SymbolBrowsing2.Symbol symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SymbolBrowsing2.Symbol Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Symbol, other.Symbol)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (symbol_ != null) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (symbol_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (symbol_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (symbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolReport other) {
      if (other == null) {
        return;
      }
      if (other.symbol_ != null) {
        if (symbol_ == null) {
          Symbol = new global::SymbolBrowsing2.Symbol();
        }
        Symbol.MergeFrom(other.Symbol);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (symbol_ == null) {
              Symbol = new global::SymbolBrowsing2.Symbol();
            }
            input.ReadMessage(Symbol);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (symbol_ == null) {
              Symbol = new global::SymbolBrowsing2.Symbol();
            }
            input.ReadMessage(Symbol);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProductMetadata : pb::IMessage<ProductMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProductMetadata> _parser = new pb::MessageParser<ProductMetadata>(() => new ProductMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductMetadata(ProductMetadata other) : this() {
      productId_ = other.productId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductMetadata Clone() {
      return new ProductMetadata(this);
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 1;
    private readonly static string ProductIdDefaultValue = "";

    private string productId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_ ?? ProductIdDefaultValue; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "product_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProductId {
      get { return productId_ != null; }
    }
    /// <summary>Clears the value of the "product_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProductId() {
      productId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProductId != other.ProductId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProductId) hash ^= ProductId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasProductId) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasProductId) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasProductId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasProductId) {
        ProductId = other.ProductId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SecurityMetadata : pb::IMessage<SecurityMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SecurityMetadata> _parser = new pb::MessageParser<SecurityMetadata>(() => new SecurityMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SecurityMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SymbolBrowsing2.SymbolBrowsing2Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityMetadata(SecurityMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      securityId_ = other.securityId_;
      cfiCode_ = other.cfiCode_;
      currency_ = other.currency_;
      tickSize_ = other.tickSize_;
      tickValue_ = other.tickValue_;
      periodType_ = other.periodType_;
      periodValue_ = other.periodValue_;
      contractSizeInUnits_ = other.contractSizeInUnits_ != null ? other.contractSizeInUnits_.Clone() : null;
      contractSizeUnit_ = other.contractSizeUnit_ != null ? other.contractSizeUnit_.Clone() : null;
      contributorParameters_ = other.contributorParameters_.Clone();
      symbolId_ = other.symbolId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SecurityMetadata Clone() {
      return new SecurityMetadata(this);
    }

    /// <summary>Field number for the "security_id" field.</summary>
    public const int SecurityIdFieldNumber = 1;
    private readonly static string SecurityIdDefaultValue = "";

    private string securityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecurityId {
      get { return securityId_ ?? SecurityIdDefaultValue; }
      set {
        securityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "security_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecurityId {
      get { return securityId_ != null; }
    }
    /// <summary>Clears the value of the "security_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecurityId() {
      securityId_ = null;
    }

    /// <summary>Field number for the "cfi_code" field.</summary>
    public const int CfiCodeFieldNumber = 2;
    private readonly static string CfiCodeDefaultValue = "";

    private string cfiCode_;
    /// <summary>
    /// CFI code (Classification of Financial Instruments, ISO 10962).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CfiCode {
      get { return cfiCode_ ?? CfiCodeDefaultValue; }
      set {
        cfiCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cfi_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCfiCode {
      get { return cfiCode_ != null; }
    }
    /// <summary>Clears the value of the "cfi_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCfiCode() {
      cfiCode_ = null;
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 3;
    private readonly static string CurrencyDefaultValue = "";

    private string currency_;
    /// <summary>
    /// Contract currency code (ISO 4217 based).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_ ?? CurrencyDefaultValue; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCurrency {
      get { return currency_ != null; }
    }
    /// <summary>Clears the value of the "currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCurrency() {
      currency_ = null;
    }

    /// <summary>Field number for the "tick_size" field.</summary>
    public const int TickSizeFieldNumber = 4;
    private readonly static double TickSizeDefaultValue = 0D;

    private double tickSize_;
    /// <summary>
    /// Size or a single market tick in correct price format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TickSize {
      get { if ((_hasBits0 & 1) != 0) { return tickSize_; } else { return TickSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        tickSize_ = value;
      }
    }
    /// <summary>Gets whether the "tick_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTickSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tick_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTickSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 5;
    private readonly static double TickValueDefaultValue = 0D;

    private double tickValue_;
    /// <summary>
    /// Symbol tick money value in the symbol's currency.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TickValue {
      get { if ((_hasBits0 & 2) != 0) { return tickValue_; } else { return TickValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        tickValue_ = value;
      }
    }
    /// <summary>Gets whether the "tick_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTickValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "tick_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTickValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "period_type" field.</summary>
    public const int PeriodTypeFieldNumber = 6;
    private readonly static uint PeriodTypeDefaultValue = 0;

    private uint periodType_;
    /// <summary>
    /// Period type. This field is associated with PeriodType enum type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PeriodType {
      get { if ((_hasBits0 & 4) != 0) { return periodType_; } else { return PeriodTypeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        periodType_ = value;
      }
    }
    /// <summary>Gets whether the "period_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPeriodType {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "period_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPeriodType() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "period_value" field.</summary>
    public const int PeriodValueFieldNumber = 7;
    private readonly static uint PeriodValueDefaultValue = 0;

    private uint periodValue_;
    /// <summary>
    /// Period value in period_type units.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PeriodValue {
      get { if ((_hasBits0 & 8) != 0) { return periodValue_; } else { return PeriodValueDefaultValue; } }
      set {
        _hasBits0 |= 8;
        periodValue_ = value;
      }
    }
    /// <summary>Gets whether the "period_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPeriodValue {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "period_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPeriodValue() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "contract_size_in_units" field.</summary>
    public const int ContractSizeInUnitsFieldNumber = 8;
    private global::Cqg.Decimal contractSizeInUnits_;
    /// <summary>
    /// Contract size in the number of units (where defined). Unit is defined by contract_size_unit filed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cqg.Decimal ContractSizeInUnits {
      get { return contractSizeInUnits_; }
      set {
        contractSizeInUnits_ = value;
      }
    }

    /// <summary>Field number for the "contract_size_unit" field.</summary>
    public const int ContractSizeUnitFieldNumber = 9;
    private global::Shared1.Text contractSizeUnit_;
    /// <summary>
    /// Unit label for the contract size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Shared1.Text ContractSizeUnit {
      get { return contractSizeUnit_; }
      set {
        contractSizeUnit_ = value;
      }
    }

    /// <summary>Field number for the "contributor_parameters" field.</summary>
    public const int ContributorParametersFieldNumber = 10;
    private static readonly pb::FieldCodec<global::MetadataAdmin2.ContributorParameters> _repeated_contributorParameters_codec
        = pb::FieldCodec.ForMessage(82, global::MetadataAdmin2.ContributorParameters.Parser);
    private readonly pbc::RepeatedField<global::MetadataAdmin2.ContributorParameters> contributorParameters_ = new pbc::RepeatedField<global::MetadataAdmin2.ContributorParameters>();
    /// <summary>
    /// Optional custom symbol parameters per associated contributor (if any).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MetadataAdmin2.ContributorParameters> ContributorParameters {
      get { return contributorParameters_; }
    }

    /// <summary>Field number for the "symbol_id" field.</summary>
    public const int SymbolIdFieldNumber = 11;
    private readonly static string SymbolIdDefaultValue = "";

    private string symbolId_;
    /// <summary>
    /// ID of the symbol the security represents (Symbol.id attribute).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolId {
      get { return symbolId_ ?? SymbolIdDefaultValue; }
      set {
        symbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "symbol_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSymbolId {
      get { return symbolId_ != null; }
    }
    /// <summary>Clears the value of the "symbol_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSymbolId() {
      symbolId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SecurityMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SecurityMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SecurityId != other.SecurityId) return false;
      if (CfiCode != other.CfiCode) return false;
      if (Currency != other.Currency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickSize, other.TickSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (PeriodType != other.PeriodType) return false;
      if (PeriodValue != other.PeriodValue) return false;
      if (!object.Equals(ContractSizeInUnits, other.ContractSizeInUnits)) return false;
      if (!object.Equals(ContractSizeUnit, other.ContractSizeUnit)) return false;
      if(!contributorParameters_.Equals(other.contributorParameters_)) return false;
      if (SymbolId != other.SymbolId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSecurityId) hash ^= SecurityId.GetHashCode();
      if (HasCfiCode) hash ^= CfiCode.GetHashCode();
      if (HasCurrency) hash ^= Currency.GetHashCode();
      if (HasTickSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickSize);
      if (HasTickValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TickValue);
      if (HasPeriodType) hash ^= PeriodType.GetHashCode();
      if (HasPeriodValue) hash ^= PeriodValue.GetHashCode();
      if (contractSizeInUnits_ != null) hash ^= ContractSizeInUnits.GetHashCode();
      if (contractSizeUnit_ != null) hash ^= ContractSizeUnit.GetHashCode();
      hash ^= contributorParameters_.GetHashCode();
      if (HasSymbolId) hash ^= SymbolId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSecurityId) {
        output.WriteRawTag(10);
        output.WriteString(SecurityId);
      }
      if (HasCfiCode) {
        output.WriteRawTag(18);
        output.WriteString(CfiCode);
      }
      if (HasCurrency) {
        output.WriteRawTag(26);
        output.WriteString(Currency);
      }
      if (HasTickSize) {
        output.WriteRawTag(33);
        output.WriteDouble(TickSize);
      }
      if (HasTickValue) {
        output.WriteRawTag(41);
        output.WriteDouble(TickValue);
      }
      if (HasPeriodType) {
        output.WriteRawTag(48);
        output.WriteUInt32(PeriodType);
      }
      if (HasPeriodValue) {
        output.WriteRawTag(56);
        output.WriteUInt32(PeriodValue);
      }
      if (contractSizeInUnits_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ContractSizeUnit);
      }
      contributorParameters_.WriteTo(output, _repeated_contributorParameters_codec);
      if (HasSymbolId) {
        output.WriteRawTag(90);
        output.WriteString(SymbolId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSecurityId) {
        output.WriteRawTag(10);
        output.WriteString(SecurityId);
      }
      if (HasCfiCode) {
        output.WriteRawTag(18);
        output.WriteString(CfiCode);
      }
      if (HasCurrency) {
        output.WriteRawTag(26);
        output.WriteString(Currency);
      }
      if (HasTickSize) {
        output.WriteRawTag(33);
        output.WriteDouble(TickSize);
      }
      if (HasTickValue) {
        output.WriteRawTag(41);
        output.WriteDouble(TickValue);
      }
      if (HasPeriodType) {
        output.WriteRawTag(48);
        output.WriteUInt32(PeriodType);
      }
      if (HasPeriodValue) {
        output.WriteRawTag(56);
        output.WriteUInt32(PeriodValue);
      }
      if (contractSizeInUnits_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ContractSizeUnit);
      }
      contributorParameters_.WriteTo(ref output, _repeated_contributorParameters_codec);
      if (HasSymbolId) {
        output.WriteRawTag(90);
        output.WriteString(SymbolId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSecurityId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecurityId);
      }
      if (HasCfiCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CfiCode);
      }
      if (HasCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (HasTickSize) {
        size += 1 + 8;
      }
      if (HasTickValue) {
        size += 1 + 8;
      }
      if (HasPeriodType) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeriodType);
      }
      if (HasPeriodValue) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PeriodValue);
      }
      if (contractSizeInUnits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractSizeInUnits);
      }
      if (contractSizeUnit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractSizeUnit);
      }
      size += contributorParameters_.CalculateSize(_repeated_contributorParameters_codec);
      if (HasSymbolId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SecurityMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasSecurityId) {
        SecurityId = other.SecurityId;
      }
      if (other.HasCfiCode) {
        CfiCode = other.CfiCode;
      }
      if (other.HasCurrency) {
        Currency = other.Currency;
      }
      if (other.HasTickSize) {
        TickSize = other.TickSize;
      }
      if (other.HasTickValue) {
        TickValue = other.TickValue;
      }
      if (other.HasPeriodType) {
        PeriodType = other.PeriodType;
      }
      if (other.HasPeriodValue) {
        PeriodValue = other.PeriodValue;
      }
      if (other.contractSizeInUnits_ != null) {
        if (contractSizeInUnits_ == null) {
          ContractSizeInUnits = new global::Cqg.Decimal();
        }
        ContractSizeInUnits.MergeFrom(other.ContractSizeInUnits);
      }
      if (other.contractSizeUnit_ != null) {
        if (contractSizeUnit_ == null) {
          ContractSizeUnit = new global::Shared1.Text();
        }
        ContractSizeUnit.MergeFrom(other.ContractSizeUnit);
      }
      contributorParameters_.Add(other.contributorParameters_);
      if (other.HasSymbolId) {
        SymbolId = other.SymbolId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SecurityId = input.ReadString();
            break;
          }
          case 18: {
            CfiCode = input.ReadString();
            break;
          }
          case 26: {
            Currency = input.ReadString();
            break;
          }
          case 33: {
            TickSize = input.ReadDouble();
            break;
          }
          case 41: {
            TickValue = input.ReadDouble();
            break;
          }
          case 48: {
            PeriodType = input.ReadUInt32();
            break;
          }
          case 56: {
            PeriodValue = input.ReadUInt32();
            break;
          }
          case 66: {
            if (contractSizeInUnits_ == null) {
              ContractSizeInUnits = new global::Cqg.Decimal();
            }
            input.ReadMessage(ContractSizeInUnits);
            break;
          }
          case 74: {
            if (contractSizeUnit_ == null) {
              ContractSizeUnit = new global::Shared1.Text();
            }
            input.ReadMessage(ContractSizeUnit);
            break;
          }
          case 82: {
            contributorParameters_.AddEntriesFrom(input, _repeated_contributorParameters_codec);
            break;
          }
          case 90: {
            SymbolId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SecurityId = input.ReadString();
            break;
          }
          case 18: {
            CfiCode = input.ReadString();
            break;
          }
          case 26: {
            Currency = input.ReadString();
            break;
          }
          case 33: {
            TickSize = input.ReadDouble();
            break;
          }
          case 41: {
            TickValue = input.ReadDouble();
            break;
          }
          case 48: {
            PeriodType = input.ReadUInt32();
            break;
          }
          case 56: {
            PeriodValue = input.ReadUInt32();
            break;
          }
          case 66: {
            if (contractSizeInUnits_ == null) {
              ContractSizeInUnits = new global::Cqg.Decimal();
            }
            input.ReadMessage(ContractSizeInUnits);
            break;
          }
          case 74: {
            if (contractSizeUnit_ == null) {
              ContractSizeUnit = new global::Shared1.Text();
            }
            input.ReadMessage(ContractSizeUnit);
            break;
          }
          case 82: {
            contributorParameters_.AddEntriesFrom(ref input, _repeated_contributorParameters_codec);
            break;
          }
          case 90: {
            SymbolId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
